/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d1_kit/gto_d1.hpp"
#include <cmath>

namespace {
    static const double Pi = M_PI;
}

void kinetic_gradient_22(
double ae , 
double be , 
double cc , 
double xAB , 
double yAB , 
double zAB , 
double* const gx , 
double* const gy , 
double* const gz , 
std::size_t matrix_size , 
std::size_t Ai , 
std::size_t Bi ) 
{
    double cnst0 = std::sqrt(0.5625);
    double C8521 = yAB*ae;
    double C8581 = ae*zAB;
    double cnst1 = 4*ae;
    double cnst2 = std::sqrt(0.1875);
    double C8351 = std::pow(ae , 2);
    double cnst3 = std::sqrt(2.25);
    double C8348 = xAB*ae;
    double cnst4 = std::sqrt(0.75);
    double cnst6 = cc* ( std::sqrt(9.) ) ;
    double cnst7 = std::sqrt(3.0);
    double cnst8 = 6*ae;
    double C8345 = be+ae;
    double C8368 = std::pow(C8345 , 2);
    double C8382 = C8368*2.;
    double C8358 = 2.*C8345;
    double C8377 = 1/C8358;
    double C8378 = std::sqrt( ( Pi/C8345 ) );
    double C8589 = C8581*C8378;
    double C9023 = C8589/C8345;
    double cnst9 = C9023*C8378;
    double cnst10 = C9023*2;
    double C8606 =  ( be*C8589 ) *2;
    double C8952 =  ( C8348*C8378 ) /C8345;
    double cnst11 = C8952*C8378;
    double C8611 =  ( - (  ( be*C8378 ) *2 )  ) /C8358;
    double C8529 = C8521*C8378;
    double C8546 =  ( C8529*be ) *2;
    double C8980 = C8529/C8345;
    double cnst16 = C8980*C8378;
    double C8671 =  (  ( C8378*ae ) *2. ) /C8358;
    double cnst18 = C8378*C8378;
    double C8392 = C8378/C8358;
    double C8553 =  (  (  ( std::pow(C8521 , 2) ) *C8378 ) /C8368 ) +C8392;
    double cnst19 = C8378*C8553;
    double C8613 =  (  ( C8378* ( std::pow(C8581 , 2) )  ) /C8368 ) +C8392;
    double cnst20 = C8613*C8378;
    double C8683 =  (  (  ( std::pow(C8348 , 2) ) *C8378 ) /C8368 ) +C8392;
    double cnst21 = C8683*C8378;
    double C8353 = be*zAB;
    double C8814 = C8353*C8378;
    double C9024 = C8814/C8345;
    double C8342 = -C9024;
    double cnst22 = C8342*C8378;
    double C8355 = C8342*ae;
    double C9162 = C8611- (  (  ( C8353*C8355 ) *2 ) /C8345 ) ;
    double C9203 = C9162*ae;
    double C8862 = C9203*2;
    double C8905 =  ( - (  ( be*C8862 ) *6 )  ) /C8358;
    double C8371 = C8355*2;
    double C9287 =  (  ( - (  ( be*C8371 ) *4 )  ) /C8358 ) - (  (  ( C8353*C9203 ) *2 ) /C8345 ) ;
    double C9300 = C9287*ae;
    double C9257 =  (  (  ( C8581*C9300 ) *2 ) /C8345 ) + (  (  ( C8862*ae ) *6. ) /C8358 ) ;
    double C8860 = C9300*2;
    double C9307 = -C8860;
    double C8896 =  ( C8860- (  ( C9287*be ) *6 )  ) /C8358;
    double C8888 =  (  ( C8353*C9300 ) *2 ) /C8345;
    double C9196 = C8888-C8905;
    double C8912 = C8905-C8888;
    double C9264 =  (  ( C8581*C8912 ) /C8345 ) + (  ( C8860+ ( 6*C9300 )  ) /C8358 ) ;
    double C8923 =  ( C8353*C8912 ) /C8345;
    double C8927 = C8896-C8923;
    double C9184 = C8923-C8896;
    double C9299 = 6* (  (  (  ( C9287*C8581 ) /C8345 ) + (  (  ( 4*C9203 ) +C8862 ) /C8358 )  ) *ae ) ;
    double C9319 =  (  ( C9299+ ( C8912+C9257 )  ) /C8358 ) + (  ( C8581*C9264 ) /C8345 ) ;
    double C8906 =  (  ( C8862- (  ( be*C9162 ) *4 )  ) /C8358 ) - (  ( C9287*C8353 ) /C8345 ) ;
    double C9277 =  (  (  ( C8912*2 ) + (  ( C8906*ae ) *6 )  ) /C8358 ) + (  ( C8581*C8927 ) /C8345 ) ;
    double C9273 = ae* (  (  (  ( C8371*ae ) *4. ) /C8358 ) + (  (  ( C8581*C9203 ) *2 ) /C8345 )  ) ;
    double C9315 =  (  ( C8860+ ( 6*C9273 )  ) /C8358 ) + (  ( C8581*C9257 ) /C8345 ) ;
    double C8614 = C8671+ (  (  ( C8581*C8355 ) *2 ) /C8345 ) ;
    double cnst43 = C8614*C8378;
    double C8626 =  (  ( C8581*C8614 ) /C8345 ) + (  ( C8371+ (  ( C9023*ae ) *2 )  ) /C8358 ) ;
    double C8885 =  (  ( C8355*4. ) /C8358 ) + (  ( C8581*C9162 ) /C8345 ) ;
    double C8832 =  (  ( C8371- (  ( C8342*be ) *2 )  ) /C8358 ) - (  ( C8353*C9162 ) /C8345 ) ;
    double cnst49 = cnst8* (  (  (  ( cnst1*C8832 ) + ( C9287*2 )  ) /C8358 ) + (  ( C8581*C8906 ) /C8345 )  ) ;
    double cnst53 =  (  (  ( cnst49+ (  ( C9264*2 ) +C8927 )  ) /C8358 ) + (  ( C8581*C9277 ) /C8345 )  ) *cnst18;
    double C8883 = C8392- (  ( C8581*C8814 ) /C8368 ) ;
    double C9040 =  (  ( C8581*C8885 ) /C8345 ) + (  (  ( C8614+C9162 ) + (  ( ae*C8883 ) *2 )  ) /C8358 ) ;
    double cnst58 = C8378*C8883;
    double C9037 =  (  ( C9023-C9024 ) /C8358 ) + (  ( C8581*C8883 ) /C8345 ) ;
    double cnst60 = C9037*C8378;
    double C8828 =  (  (  ( std::pow(C8353 , 2) ) *C8378 ) /C8368 ) +C8392;
    double cnst63 = C8828*C8378;
    double C8872 =  ( C8828*ae ) *2;
    double C8903 =  (  (  ( C9162*2 ) +C8872 ) /C8358 ) + (  ( C8581*C8832 ) /C8345 ) ;
    double C8881 =  (  ( C8581*C8828 ) /C8345 ) + (  ( - ( C8814*2. )  ) /C8382 ) ;
    double C8922 =  (  (  (  ( ae*C8881 ) *2 ) + (  ( C8885*2 ) +C8832 )  ) /C8358 ) + (  ( C8581*C8903 ) /C8345 ) ;
    double cnst67 = C8378*C8881;
    double C8915 =  (  ( C8828+ ( C8883*2 )  ) /C8358 ) + (  ( C8581*C8881 ) /C8345 ) ;
    double cnst68 = C8378*C8915;
    double C8435 =  ( ae- (  (  ( C8377+ ( std::pow( ( C8353/C8345 )  , 2) )  ) *C8351 ) *2 )  ) *C8378;
    double C8582 = C8435/C8358;
    double C8620 =  (  ( C8606*ae ) /C8368 ) + (  ( C8581*C8435 ) /C8345 ) ;
    double C8634 =  ( C8582+ (  ( C8581*C8620 ) /C8345 )  ) + (  (  (  (  ( C8613*be ) *2 ) -C8378 ) *ae ) /C8345 ) ;
    double C8833 =  (  (  ( -C8606 ) *be ) /C8368 ) - (  ( C8353*C8435 ) /C8345 ) ;
    double C8841 =  ( C8582- (  ( C8353*C8833 ) /C8345 )  ) + (  (  ( C8872-C8378 ) *be ) /C8345 ) ;
    double C8913 =  ( C8833+ ( C8581*C8841 )  ) + (  (  ( be*C8881 ) *ae ) *2 ) ;
    double C8920 =  ( C8582+ (  ( C8581*C8833 ) /C8345 )  ) + (  (  (  ( be*C8883 ) *ae ) *2 ) /C8345 ) ;
    double C8934 =  (  (  (  ( C8920*2 ) +C8841 ) /C8358 ) + (  ( C8581*C8913 ) /C8368 )  ) + (  (  (  ( 2* ( be*C8915 )  ) -C8828 ) *ae ) /C8345 ) ;
    double C9045 =  (  (  ( C8581*C8920 ) /C8345 ) + (  ( C8620+C8833 ) /C8358 )  ) + (  (  (  ( 2* ( be*C9037 )  ) +C9024 ) *ae ) /C8345 ) ;
    double C8347 = xAB*be;
    double C8412 = C8392+ (  ( C8378* ( std::pow(C8347 , 2) )  ) /C8368 ) ;
    double cnst74 = C8412*C8378;
    double C8425 = C8412*ae;
    double C8438 = C8425*2;
    double C8436 =  ( ae- (  (  ( C8377+ ( std::pow( ( C8347/C8345 )  , 2) )  ) *C8351 ) *2 )  ) *C8378;
    double C8447 = C8436/C8358;
    double C8450 =  (  ( - (  ( C8378*2. ) *C8347 )  ) /C8382 ) + (  ( xAB*C8425 ) /C8345 ) ;
    double cnst89 = C8450*C8378;
    double C8390 = C8347*C8378;
    double C8675 =  ( C8390*ae ) *2;
    double C8694 =  (  ( C8436*C8348 ) /C8345 ) + (  ( C8675*ae ) /C8368 ) ;
    double C8710 =  (  (  ( C8348*C8694 ) /C8345 ) +C8447 ) + (  ( ae* (  (  ( be*C8683 ) *2 ) -C8378 )  ) /C8345 ) ;
    double C8469 =  (  (  ( -C8675 ) *be ) /C8368 ) - (  ( C8436*C8347 ) /C8345 ) ;
    double C8498 =  (  (  ( C8438-C8378 ) *be ) /C8345 ) + ( C8447- (  ( C8347*C8469 ) /C8345 )  ) ;
    double C8510 =  (  ( C8348*C8498 ) +C8469 ) + (  ( ae* ( be*C8450 )  ) *2 ) ;
    double C8427 = C8392- (  ( C8348*C8390 ) /C8368 ) ;
    double C8499 =  (  (  (  ( be*C8427 ) *ae ) *2 ) /C8345 ) + ( C8447+ (  ( C8348*C8469 ) /C8345 )  ) ;
    double cnst126 = C8427*C8378;
    double C8483 =  (  (  ( C8427*2 ) +C8412 ) /C8358 ) + (  ( C8348*C8450 ) /C8345 ) ;
    double cnst130 = C8483*C8378;
    double C8515 =  (  (  (  (  ( be*C8483 ) *2 ) -C8412 ) *ae ) /C8345 ) + (  (  ( C8348*C8510 ) /C8368 ) + (  (  ( C8499*2 ) +C8498 ) /C8358 )  ) ;
    double C8953 = C8390/C8345;
    double C8964 =  (  ( C8348*C8427 ) /C8345 ) + (  ( C8952-C8953 ) /C8358 ) ;
    double C8971 =  (  (  ( C8348*C8499 ) /C8345 ) + (  ( C8469+C8694 ) /C8358 )  ) + (  (  ( C8953+ (  ( be*C8964 ) *2 )  ) *ae ) /C8345 ) ;
    double cnst138 = C8378*C8964;
    double C8334 = -C8953;
    double C8343 = C8334*ae;
    double C8393 = C8611- (  (  ( C8343*C8347 ) *2 ) /C8345 ) ;
    double C8407 = C8393*ae;
    double C8420 = C8407*2;
    double C8467 =  ( - ( 6* ( be*C8420 )  )  ) /C8358;
    double C8356 = C8343*2;
    double C8455 =  (  ( - (  ( be*C8356 ) *4 )  ) /C8358 ) - (  (  ( C8407*C8347 ) *2 ) /C8345 ) ;
    double C8487 =  (  ( C8420- ( 4* ( be*C8393 )  )  ) /C8358 ) - (  ( C8455*C8347 ) /C8345 ) ;
    double C9295 = 6* (  (  (  (  ( C8407*4 ) +C8420 ) /C8358 ) + (  ( C8455*C8348 ) /C8345 )  ) *ae ) ;
    double C8465 = C8455*ae;
    double C8493 =  (  ( C8347*C8465 ) *2 ) /C8345;
    double C8497 = C8467-C8493;
    double C8505 =  ( C8347*C8497 ) /C8345;
    double C9193 = C8493-C8467;
    double C8476 = C8465*2;
    double C9253 =  (  ( C8348*C8497 ) /C8345 ) + (  (  ( 6*C8465 ) +C8476 ) /C8358 ) ;
    double C9178 = -C8476;
    double C9259 =  (  ( 6.* ( C8420*ae )  ) /C8358 ) + (  (  ( C8348*C8465 ) *2 ) /C8345 ) ;
    double C9317 =  (  ( C9295+ ( C9259+C8497 )  ) /C8358 ) + (  ( C9253*C8348 ) /C8345 ) ;
    double C8492 =  ( C8476- ( 6* ( C8455*be )  )  ) /C8358;
    double C8509 = C8492-C8505;
    double C9268 =  (  ( C8348*C8509 ) /C8345 ) + (  (  ( 6* ( C8487*ae )  ) + ( C8497*2 )  ) /C8358 ) ;
    double C9163 = C8505-C8492;
    double C9275 = ae* (  (  (  ( C8407*C8348 ) *2 ) /C8345 ) + (  ( 4.* ( C8356*ae )  ) /C8358 )  ) ;
    double C9316 =  (  ( C8476+ ( 6*C9275 )  ) /C8358 ) + (  ( C8348*C9259 ) /C8345 ) ;
    double C8430 =  (  ( C8343*4. ) /C8358 ) + (  ( C8348*C8393 ) /C8345 ) ;
    double C8678 = C8671+ (  (  ( C8343*C8348 ) *2 ) /C8345 ) ;
    double C8965 =  (  (  (  ( C8427*ae ) *2 ) + ( C8393+C8678 )  ) /C8358 ) + (  ( C8348*C8430 ) /C8345 ) ;
    double C8696 =  (  (  ( 2* ( C8952*ae )  ) +C8356 ) /C8358 ) + (  ( C8348*C8678 ) /C8345 ) ;
    double cnst205 = C8378*C8678;
    double cnst214 = C8334*C8378;
    double C8428 =  (  ( C8356- (  ( C8334*be ) *2 )  ) /C8358 ) - (  ( C8347*C8393 ) /C8345 ) ;
    double cnst227 = cnst8* (  (  (  ( C8455*2 ) + ( C8428*cnst1 )  ) /C8358 ) + (  ( C8487*C8348 ) /C8345 )  ) ;
    double cnst230 =  (  ( cnst227+ (  ( C9253*2 ) +C8509 )  ) /C8358 ) + (  ( C8348*C9268 ) /C8345 ) ;
    double C8463 =  (  ( C8438+ ( C8393*2 )  ) /C8358 ) + (  ( C8348*C8428 ) /C8345 ) ;
    double C8491 =  (  (  (  ( C8450*ae ) *2 ) + ( C8428+ ( C8430*2 )  )  ) /C8358 ) + (  ( C8348*C8463 ) /C8345 ) ;
    double C8352 = be*yAB;
    double C8651 = C8352*C8378;
    double C8750 = C8392- (  ( C8521*C8651 ) /C8368 ) ;
    double cnst256 = C8750*C8378;
    double C8981 = C8651/C8345;
    double C8994 =  (  ( C8750*C8521 ) /C8345 ) + (  ( C8980-C8981 ) /C8358 ) ;
    double cnst298 = C8994*C8378;
    double C8340 = -C8981;
    double cnst320 =  ( C8356*C8340 ) *C9045;
    double C8354 = C8340*ae;
    double C8555 = C8611- (  ( 2* ( C8352*C8354 )  ) /C8345 ) ;
    double C8559 = C8555*ae;
    double C8729 = C8559*2;
    double C8772 =  ( - (  ( be*C8729 ) *6 )  ) /C8358;
    double C8752 =  (  ( C8354*4. ) /C8358 ) + (  ( C8555*C8521 ) /C8345 ) ;
    double C8554 =  (  (  ( C8354*C8521 ) *2 ) /C8345 ) +C8671;
    double cnst399 = C8378*C8554;
    double C8997 =  (  ( C8521*C8752 ) /C8345 ) + (  (  ( C8555+C8554 ) + (  ( C8750*ae ) *2 )  ) /C8358 ) ;
    double C8370 = C8354*2;
    double C8573 =  (  ( - ( 4* ( be*C8370 )  )  ) /C8358 ) - (  (  ( C8352*C8559 ) *2 ) /C8345 ) ;
    double C8575 = C8573*ae;
    double C8727 = 2*C8575;
    double C9161 = -C8727;
    double cnst436 =  (  (  ( C8354*cnst10 ) *C8510 ) /C8345 ) + (  (  ( C9023*C8450 ) *C9161 ) /2.0 ) ;
    double C8755 =  (  ( C8352*C8575 ) *2 ) /C8345;
    double C8779 = C8772-C8755;
    double C8790 =  ( C8352*C8779 ) /C8345;
    double C9192 = C8755-C8772;
    double gy011200 =  ( C8833* ( C8555*C8683 )  ) + (  (  (  ( C8342*C8683 ) *C9192 ) /2.0 ) + ( C8342* ( C8555*C8710 )  )  ) ;
    double gy110101 =  ( C8620* ( C8555*C8427 )  ) + (  ( C9023* ( C8555*C8499 )  ) + (  (  ( C9023*C8427 ) *C9192 ) /2.0 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 3] += gy110101*cnst6;
    double gy011101 =  (  (  (  ( C8952*C8883 ) *C9192 ) /2.0 ) + (  ( C8555*C8694 ) *C8883 )  ) + (  ( C8952*C8555 ) *C8920 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 3] += gy011101*cnst6;
    double gy011002 =  (  ( C9037* ( C8436*C8555 )  ) + (  ( cnst60*C9192 ) /2.0 )  ) + ( C9045* ( C8555*C8378 )  ) ;
    double gy110200 =  ( C8435* ( C8555*C8964 )  ) + (  (  ( C8971*C8555 ) *C8378 ) + (  ( C9192*cnst138 ) /2.0 )  ) ;
    double gy110002 =  (  ( C8334*C8555 ) *C8634 ) + (  ( C8613* ( C8555*C8469 )  ) + (  (  ( C8334*C8613 ) *C9192 ) /2.0 )  ) ;
    double C9262 =  (  ( C8779*C8521 ) /C8345 ) + (  (  ( 6*C8575 ) +C8727 ) /C8358 ) ;
    double gy110011 =  ( C8620* ( C8334*C8752 )  ) + (  (  ( C8752*C8469 ) *C9023 ) - (  (  ( C8334*C9023 ) *C9262 ) /2.0 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 1] += gy110011*cnst6;
    double gy110110 =  (  ( C8427*C8752 ) *C8435 ) + (  (  ( C8499*C8752 ) *C8378 ) - (  ( cnst126*C9262 ) /2.0 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 0] += gy110110*cnst6;
    double gy011011 =  ( C8920* ( C8378*C8752 )  ) + (  ( C8883* ( C8436*C8752 )  ) - (  ( C9262*cnst58 ) /2.0 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 1] += cnst6*gy011011;
    double gy011110 =  ( C8833* ( C8952*C8752 )  ) + (  ( C8342* ( C8752*C8694 )  ) - (  (  ( C8952*C8342 ) *C9262 ) /2.0 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 0] += cnst6*gy011110;
    double C9255 =  (  (  ( C8521*C8575 ) *2 ) /C8345 ) + (  (  ( ae*C8729 ) *6. ) /C8358 ) ;
    double gy101110 =  (  ( C8342* ( C8499*C8554 )  ) - (  ( C9255* ( C8342*C8427 )  ) /2.0 )  ) + (  ( C8427*C8554 ) *C8833 ) ;
    gy[(Ai + 3) * matrix_size + Bi + 0] += gy101110*cnst6;
    double gy200011 =  (  (  ( C8498*C8554 ) *C9023 ) - (  ( C9255* ( C9023*C8412 )  ) /2.0 )  ) + ( C8620* ( C8412*C8554 )  ) ;
    double gy002110 =  (  ( C8828* ( C8694*C8554 )  ) - (  (  ( C8952*C8828 ) *C9255 ) /2.0 )  ) + (  ( C8952*C8554 ) *C8841 ) ;
    double gy002011 =  (  ( C8881* ( C8436*C8554 )  ) - (  ( C9255*cnst67 ) /2.0 )  ) + (  ( cnst399*C8913 ) /C8345 ) ;
    double gy101011 =  ( C8920* ( C8334*C8554 )  ) + (  (  ( C8469*C8554 ) *C8883 ) - (  ( C9255* ( C8334*C8883 )  ) /2.0 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 1] += gy101011*cnst6;
    double gy200110 =  (  ( C8450*C8554 ) *C8435 ) + (  (  ( cnst399*C8510 ) /C8345 ) - (  ( C9255*cnst89 ) /2.0 )  ) ;
    double C8773 =  (  ( C8729- (  ( be*C8555 ) *4 )  ) /C8358 ) - (  ( C8352*C8573 ) /C8345 ) ;
    double C8763 =  ( C8727- ( 6* ( be*C8573 )  )  ) /C8358;
    double C9177 = C8790-C8763;
    double C8794 = C8763-C8790;
    double C9276 =  (  ( C8794*C8521 ) /C8345 ) + (  (  (  ( C8773*ae ) *6 ) + ( C8779*2 )  ) /C8358 ) ;
    double C9297 =  (  (  (  (  ( C8559*4 ) +C8729 ) /C8358 ) + (  ( C8573*C8521 ) /C8345 )  ) *ae ) *6;
    double C9318 =  (  (  ( C9255+C8779 ) +C9297 ) /C8358 ) + (  ( C8521*C9262 ) /C8345 ) ;
    double gy011020 =  (  ( C8342* ( C8436*C8997 )  ) - (  ( C9318*cnst22 ) /2.0 )  ) + ( C8833* ( C8997*C8378 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 2] += cc* (  ( cnst7*gy011002 ) - (  ( cnst4*gy011020 ) + ( cnst4*gy011200 )  )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 4] += cc* (  ( gy011200*cnst3 ) - ( cnst3*gy011020 )  ) ;
    double gy110020 =  (  ( C8378* ( C8997*C8469 )  ) - (  ( C9318*cnst214 ) /2.0 )  ) + ( C8435* ( C8334*C8997 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 4] += cc* (  ( gy110200*cnst3 ) - ( gy110020*cnst3 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 2] += cc* (  ( cnst7*gy110002 ) - (  ( cnst4*gy110200 ) + ( cnst4*gy110020 )  )  ) ;
    double C8566 =  (  ( C8521*C8554 ) /C8345 ) + (  (  (  ( C8980*ae ) *2 ) +C8370 ) /C8358 ) ;
    double gy101101 =  (  (  ( C9161* ( C8427*C8883 )  ) /2.0 ) + (  ( C8370*C8499 ) *C8883 )  ) + ( C8920* ( C8370*C8427 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 3] += gy101101*cnst6;
    double C9271 =  (  (  ( 2* ( C8559*C8521 )  ) /C8345 ) + (  (  ( C8370*ae ) *4. ) /C8358 )  ) *ae;
    double C9314 =  (  ( C9255*C8521 ) /C8345 ) + (  (  ( 6*C9271 ) +C8727 ) /C8358 ) ;
    double gy101020 =  ( C8833* ( C8334*C8566 )  ) + (  (  ( C8469*C8566 ) *C8342 ) - (  ( C9314* ( C8334*C8342 )  ) /2.0 )  ) ;
    double gy200020 =  (  ( C8378* ( C8498*C8566 )  ) - (  ( C9314*cnst74 ) /2.0 )  ) + ( C8435* ( C8412*C8566 )  ) ;
    double cnst575 = cnst2*gy200020;
    double gy002020 =  (  ( C8378*C8566 ) *C8841 ) + (  (  ( C8436*C8566 ) *C8828 ) - (  ( cnst63*C9314 ) /2.0 )  ) ;
    double gy200002 =  (  (  ( C9161* ( C8613*C8412 )  ) /2.0 ) + ( C8613* ( C8370*C8498 )  )  ) + (  ( C8370*C8412 ) *C8634 ) ;
    double gy101002 =  (  (  ( C9161* ( C8334*C9037 )  ) /2.0 ) + ( C9037* ( C8370*C8469 )  )  ) +cnst320;
    double gy002200 =  ( C8841* ( C8370*C8683 )  ) + (  (  ( C9161* ( C8828*C8683 )  ) /2.0 ) + ( C8828* ( C8370*C8710 )  )  ) ;
    double gy200101 = cnst436+ ( C8620* ( C8370*C8450 )  ) ;
    double gy200200 =  (  (  ( C8515*C8370 ) *C8378 ) + (  ( C9161*cnst130 ) /2.0 )  ) + ( C8435* ( C8370*C8483 )  ) ;
    double cnst601 = gy200200*cnst2;
    double cnst611 = C8342* ( C8971*C8370 ) ;
    double gy101200 =  ( C8833* ( C8370*C8964 )  ) + (  (  (  ( C8342*C8964 ) *C9161 ) /2.0 ) +cnst611 ) ;
    gy[(Ai + 3) * matrix_size + Bi + 2] += cc* (  ( cnst7*gy101002 ) - (  ( cnst4*gy101020 ) + ( cnst4*gy101200 )  )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 4] += cc* (  ( gy101200*cnst3 ) - ( cnst3*gy101020 )  ) ;
    double gy002101 =  (  (  (  ( C8952*C8881 ) *C9161 ) /2.0 ) + (  ( C8370*C8694 ) *C8881 )  ) + (  (  ( C8952*C8370 ) *C8913 ) /C8345 ) ;
    double gy002002 =  (  (  ( C9161*cnst68 ) /2.0 ) + (  ( C8436*C8370 ) *C8915 )  ) + ( C8934* ( C8370*C8378 )  ) ;
    double C8690 =  (  ( C8370- (  ( be*C8340 ) *2 )  ) /C8358 ) - (  ( C8352*C8555 ) /C8345 ) ;
    double cnst638 = cnst8* (  (  ( C8773*C8521 ) /C8345 ) + (  (  ( cnst1*C8690 ) + ( C8573*2 )  ) /C8358 )  ) ;
    double cnst641 =  (  ( cnst638+ (  ( C9262*2 ) +C8794 )  ) /C8358 ) + (  ( C8521*C9276 ) /C8345 ) ;
    double gy020002 =  (  (  ( cnst20*C9177 ) /2.0 ) + ( C8613* ( C8436*C8690 )  )  ) + (  ( C8690*C8378 ) *C8634 ) ;
    double gy020200 =  (  (  ( C8690*C8710 ) *C8378 ) + (  ( cnst21*C9177 ) /2.0 )  ) + ( C8435* ( C8690*C8683 )  ) ;
    double cnst654 = gy020200*cnst2;
    double gy020101 =  (  ( C8952*C8690 ) *C8620 ) + (  ( C9023* ( C8690*C8694 )  ) + (  (  ( C8952*C9023 ) *C9177 ) /2.0 )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 3] += cc* (  ( cnst7*gy002101 ) - (  ( cnst4*gy200101 ) + ( cnst4*gy020101 )  )  ) ;
    gy[(Ai + 4) * matrix_size + Bi + 3] += cc* (  ( gy200101*cnst3 ) - ( cnst3*gy020101 )  ) ;
    double cnst666 = C8340*C8378;
    double C8681 =  (  ( C8378* ( std::pow(C8352 , 2) )  ) /C8368 ) +C8392;
    double C8748 =  (  ( C8681*C8521 ) /C8345 ) + (  ( - ( C8651*2. )  ) /C8382 ) ;
    double cnst691 = C8748*C8378;
    double C8739 =  ( C8681*ae ) *2;
    double C8770 =  (  ( C8739+ ( C8555*2 )  ) /C8358 ) + (  ( C8690*C8521 ) /C8345 ) ;
    double C8789 =  (  ( C8770*C8521 ) /C8345 ) + (  (  (  ( C8748*ae ) *2 ) + (  ( C8752*2 ) +C8690 )  ) /C8358 ) ;
    double gy020020 =  (  (  ( C8436*C8789 ) *C8378 ) - (  ( cnst18*cnst641 ) /2.0 )  ) + ( C8435* ( C8378*C8789 )  ) ;
    double cnst718 = cnst2*gy020020;
    double cnst721 =  (  ( cnst4*gy002200 ) + (  (  ( cnst575-cnst601 ) -cnst654 ) +cnst718 )  ) - ( cnst4*gy002020 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 4] += cc*cnst721;
    double cnst723 =  (  ( cnst654+ (  ( cnst4*gy200002 ) - ( cnst601+cnst575 )  )  ) +cnst718 ) - ( cnst4*gy020002 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 2] += cc*cnst723;
    double cnst725 =  ( cnst0*gy020020 ) + (  (  ( cnst0*gy200200 ) - ( cnst0*gy200020 )  ) - ( cnst0*gy020200 )  ) ;
    gy[(Ai + 4) * matrix_size + Bi + 4] += cc*cnst725;
    double gy020110 =  (  ( C8378* ( C8770*C8694 )  ) - (  ( cnst11*C9276 ) /2.0 )  ) + ( C8435* ( C8770*C8952 )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 0] += cc* (  ( cnst7*gy002110 ) - (  ( cnst4*gy020110 ) + ( cnst4*gy200110 )  )  ) ;
    gy[(Ai + 4) * matrix_size + Bi + 0] += cc* (  ( cnst3*gy200110 ) - ( cnst3*gy020110 )  ) ;
    double gy020011 =  ( C8620* ( C8770*C8378 )  ) + (  ( C9023* ( C8436*C8770 )  ) - (  ( cnst9*C9276 ) /2.0 )  ) ;
    gy[(Ai + 4) * matrix_size + Bi + 1] +=  (  ( cnst3*gy200011 ) - ( cnst3*gy020011 )  ) *cc;
    gy[(Ai + 2) * matrix_size + Bi + 1] +=  (  ( cnst7*gy002011 ) - (  ( cnst4*gy020011 ) + ( cnst4*gy200011 )  )  ) *cc;
    double C8782 =  (  ( C8748*C8521 ) /C8345 ) + (  ( C8681+ ( C8750*2 )  ) /C8358 ) ;
    double cnst745 = C8782*C8378;
    double cnst752 = C8681*C8378;
    double C8431 =  ( ae- (  (  (  ( std::pow( ( C8352/C8345 )  , 2) ) +C8377 ) *C8351 ) *2 )  ) *C8378;
    double gz101200 =  (  (  ( C8431*C8964 ) *C9162 ) + ( C9162* ( C8971*C8378 )  )  ) + (  ( C9196*cnst138 ) /2.0 ) ;
    double gx200200 =  ( C8435* ( C8378*C8491 )  ) + (  ( C8378* ( C8431*C8491 )  ) - (  (  ( std::pow(C8378 , 2) ) *cnst230 ) /2.0 )  ) ;
    double cnst773 = cnst2*gx200200;
    double gx002101 =  (  ( cnst205*C8913 ) /C8345 ) + (  (  ( C8431*C8678 ) *C8881 ) - (  ( cnst67*C9259 ) /2.0 )  ) ;
    double gz002002 =  (  ( C8922* ( C8436*C8378 )  ) + ( C8922* ( C8431*C8378 )  )  ) - ( cnst53/2.0 ) ;
    double gx002200 =  ( C8841* ( C8696*C8378 )  ) + (  ( C8828* ( C8696*C8431 )  ) - (  ( cnst63*C9316 ) /2.0 )  ) ;
    double gz101101 =  (  ( C8885* ( C8499*C8378 )  ) + ( C8885* ( C8431*C8427 )  )  ) - (  ( C9264*cnst126 ) /2.0 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 3] += cnst6*gz101101;
    double gz200200 =  (  ( C8371* ( C8431*C8483 )  ) + (  ( C8515*C8378 ) *C8371 )  ) + (  ( cnst130*C9307 ) /2.0 ) ;
    double cnst795 = gz200200*cnst2;
    double gz200101 =  (  ( C8614* ( C8431*C8450 )  ) + (  ( cnst43*C8510 ) /C8345 )  ) - (  ( cnst89*C9257 ) /2.0 ) ;
    double gx101002 =  ( C9045* ( C8393*C8378 )  ) + (  ( C9037* ( C8431*C8393 )  ) + (  ( cnst60*C9193 ) /2.0 )  ) ;
    double gx200101 =  ( C8620* ( C8463*C8378 )  ) + (  ( C9023* ( C8431*C8463 )  ) - (  ( cnst9*C9268 ) /2.0 )  ) ;
    double C8692 =  (  ( be* ( -C8546 )  ) /C8368 ) - (  ( C8352*C8431 ) /C8345 ) ;
    double gz011002 =  (  (  ( C8436*C8340 ) *C9040 ) + ( C9040* ( C8692*C8378 )  )  ) - (  ( C9319*cnst666 ) /2.0 ) ;
    double gz110200 =  (  (  ( C8692*C8964 ) *C8371 ) +cnst611 ) + (  (  ( C8340*C8964 ) *C9307 ) /2.0 ) ;
    double gx011101 =  ( C8920* ( C8340*C8678 )  ) + (  (  ( C8692*C8678 ) *C8883 ) - (  ( C9259* ( C8340*C8883 )  ) /2.0 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 3] += cnst6*gx011101;
    double gx110101 =  ( C8620* ( C8340*C8430 )  ) + (  ( C9023* ( C8430*C8692 )  ) - (  ( C9253* ( C9023*C8340 )  ) /2.0 )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 3] += cnst6*gx110101;
    double gz011200 =  (  ( C9162* ( C8340*C8710 )  ) + ( C9162* ( C8692*C8683 )  )  ) + (  (  ( C8340*C8683 ) *C9196 ) /2.0 ) ;
    double gx011200 =  ( C8833* ( C8696*C8340 )  ) + (  ( C8342* ( C8696*C8692 )  ) - (  (  ( C8342*C8340 ) *C9316 ) /2.0 )  ) ;
    double gx011002 = cnst320+ (  (  ( C9178* ( C9037*C8340 )  ) /2.0 ) + (  ( C8356*C8692 ) *C9037 )  ) ;
    double gz110101 =  (  ( C8614* ( C8427*C8692 )  ) + ( C8614* ( C8340*C8499 )  )  ) - (  (  ( C8340*C8427 ) *C9257 ) /2.0 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 3] += gz110101*cnst6;
    double gx110002 =  ( C8634* ( C8340*C8393 )  ) + (  ( C8613* ( C8692*C8393 )  ) + (  (  ( C8613*C8340 ) *C9193 ) /2.0 )  ) ;
    double gz011101 =  (  ( C8885* ( C8340*C8694 )  ) + (  ( C8952*C8692 ) *C8885 )  ) - (  ( C9264* ( C8952*C8340 )  ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 3] += cnst6*gz011101;
    double gz110002 =  (  (  ( C8340*C8469 ) *C8626 ) + (  ( C8334*C8692 ) *C8626 )  ) - (  (  ( C8334*C8340 ) *C9315 ) /2.0 ) ;
    double gx110200 =  (  (  ( C8965*C8692 ) *C8378 ) - (  ( C9317*cnst666 ) /2.0 )  ) + (  ( C8965*C8340 ) *C8435 ) ;
    double gz101002 =  (  ( C9040* ( C8334*C8431 )  ) + (  ( C8378*C8469 ) *C9040 )  ) - (  ( C9319*cnst214 ) /2.0 ) ;
    double C8560 =  (  ( C8546*ae ) /C8368 ) + (  ( C8431*C8521 ) /C8345 ) ;
    double gz101011 =  (  ( C8885* ( C8980*C8469 )  ) + ( C8885* ( C8334*C8560 )  )  ) - (  ( C9264* ( C8334*C8980 )  ) /2.0 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 1] += gz101011*cnst6;
    double gz002011 =  (  ( C8903* ( C8560*C8378 )  ) + ( C8903* ( C8436*C8980 )  )  ) - (  ( C9277*cnst16 ) /2.0 ) ;
    double gz002110 =  (  ( C9184* ( C8952*C8980 )  ) /2.0 ) + (  (  ( C8980*C8694 ) *C8832 ) + (  ( C8952*C8560 ) *C8832 )  ) ;
    double gx101011 =  (  (  (  ( C8980*C8883 ) *C9193 ) /2.0 ) + ( C8883* ( C8560*C8393 )  )  ) + ( C8920* ( C8980*C8393 )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 1] += gx101011*cnst6;
    double gx200110 =  (  (  ( C8560*C8463 ) *C8378 ) - (  ( C9268*cnst16 ) /2.0 )  ) + ( C8435* ( C8980*C8463 )  ) ;
    double gx002110 =  ( C8841* ( C8980*C8678 )  ) + (  ( C8828* ( C8560*C8678 )  ) - (  (  ( C8980*C8828 ) *C9259 ) /2.0 )  ) ;
    double gx002011 =  (  (  ( C8356*C8560 ) *C8881 ) + (  ( C9178* ( C8980*C8881 )  ) /2.0 )  ) + (  ( C8913* ( C8980*C8356 )  ) /C8345 ) ;
    double gx101110 =  (  ( C8342* ( C8560*C8430 )  ) - (  ( C9253* ( C8980*C8342 )  ) /2.0 )  ) + (  ( C8980*C8430 ) *C8833 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 0] += gx101110*cnst6;
    double gz200110 =  (  (  (  ( C8980*C8371 ) *C8510 ) /C8345 ) + (  ( C8450*C8560 ) *C8371 )  ) + (  (  ( C8980*C8450 ) *C9307 ) /2.0 ) ;
    double gz200011 =  (  (  ( C8980*C8498 ) *C8614 ) + (  ( C8560*C8412 ) *C8614 )  ) - (  ( C9257* ( C8980*C8412 )  ) /2.0 ) ;
    double gz101110 =  (  (  ( C8980*C8427 ) *C9196 ) /2.0 ) + (  ( C9162* ( C8980*C8499 )  ) + ( C9162* ( C8560*C8427 )  )  ) ;
    gz[(Ai + 3) * matrix_size + Bi + 0] += gz101110*cnst6;
    double gx200011 =  (  ( C9023* ( C8428*C8560 )  ) + (  ( C9163* ( C8980*C9023 )  ) /2.0 )  ) + ( C8620* ( C8980*C8428 )  ) ;
    double gz200002 =  (  ( C8626* ( C8498*C8378 )  ) + ( C8626* ( C8431*C8412 )  )  ) - (  ( cnst74*C9315 ) /2.0 ) ;
    double C8522 = C8431/C8358;
    double C8787 =  (  ( 2* (  ( C8750*be ) *ae )  ) /C8345 ) + ( C8522+ (  ( C8521*C8692 ) /C8345 )  ) ;
    double gx011011 =  (  (  ( C9178* ( C8750*C8883 )  ) /2.0 ) + (  ( C8356*C8787 ) *C8883 )  ) + (  ( C8750*C8356 ) *C8920 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 1] += cnst6*gx011011;
    double gx110011 =  ( C8620* ( C8750*C8393 )  ) + (  (  (  ( C8750*C9023 ) *C9193 ) /2.0 ) + (  ( C8787*C8393 ) *C9023 )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 1] += gx110011*cnst6;
    double gz110110 =  (  (  ( C8427*C8787 ) *C8371 ) + ( C8371* ( C8750*C8499 )  )  ) + (  (  ( C8750*C8427 ) *C9307 ) /2.0 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 0] += gz110110*cnst6;
    double gz011110 =  (  ( C9162* ( C8952*C8787 )  ) + (  ( C8750*C8694 ) *C9162 )  ) + (  ( C9196* ( C8952*C8750 )  ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 0] += cnst6*gz011110;
    double gx110110 =  (  ( C8378* ( C8430*C8787 )  ) - (  ( C9253*cnst256 ) /2.0 )  ) + ( C8435* ( C8750*C8430 )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 0] += gx110110*cnst6;
    double gx011110 =  (  ( C8342* ( C8787*C8678 )  ) - (  (  ( C8342*C8750 ) *C9259 ) /2.0 )  ) + (  ( C8750*C8678 ) *C8833 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 0] += gx011110*cnst6;
    double gz110011 =  (  (  ( C8750*C8469 ) *C8614 ) + (  ( C8334*C8787 ) *C8614 )  ) - (  (  ( C8334*C8750 ) *C9257 ) /2.0 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 1] += gz110011*cnst6;
    double gz011011 =  (  (  ( C8436*C8750 ) *C8885 ) + (  ( C8787*C8378 ) *C8885 )  ) - (  ( C9264*cnst256 ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 1] += cnst6*gz011011;
    double C9002 =  (  (  ( C8981+ (  ( be*C8994 ) *2 )  ) *ae ) /C8345 ) + (  (  ( C8521*C8787 ) /C8345 ) + (  ( C8560+C8692 ) /C8358 )  ) ;
    double gz011020 =  (  ( cnst298*C9196 ) /2.0 ) + (  ( C9162* ( C8436*C8994 )  ) + ( C9162* ( C8378*C9002 )  )  ) ;
    gz[(Ai + 1) * matrix_size + Bi + 2] += cc* (  ( cnst7*gz011002 ) - (  ( gz011200*cnst4 ) + ( cnst4*gz011020 )  )  ) ;
    gz[(Ai + 1) * matrix_size + Bi + 4] += cc* (  ( gz011200*cnst3 ) - ( cnst3*gz011020 )  ) ;
    double cnst947 = C8342* ( C8356*C9002 ) ;
    double gx011020 =  (  ( C8994*C8356 ) *C8833 ) + (  (  ( C9178* ( C8342*C8994 )  ) /2.0 ) +cnst947 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 4] += cc* (  ( cnst3*gx011200 ) - ( gx011020*cnst3 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 2] += cc* (  ( cnst7*gx011002 ) - (  ( cnst4*gx011020 ) + ( cnst4*gx011200 )  )  ) ;
    double gz110020 =  (  ( C8371* ( C8994*C8469 )  ) +cnst947 ) + (  (  ( C8334*C8994 ) *C9307 ) /2.0 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 2] +=  (  ( cnst7*gz110002 ) - (  ( cnst4*gz110020 ) + ( gz110200*cnst4 )  )  ) *cc;
    gz[(Ai + 0) * matrix_size + Bi + 4] += cc* (  ( gz110200*cnst3 ) - ( cnst3*gz110020 )  ) ;
    double gx110020 =  ( C8435* ( C8994*C8393 )  ) + (  (  ( cnst298*C9193 ) /2.0 ) + (  ( C8393*C9002 ) *C8378 )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 2] += cc* (  ( cnst7*gx110002 ) - (  ( gx110020*cnst4 ) + ( cnst4*gx110200 )  )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 4] += cc* (  ( cnst3*gx110200 ) - ( gx110020*cnst3 )  ) ;
    double C8574 =  (  (  (  (  ( be*C8553 ) *2 ) -C8378 ) *ae ) /C8345 ) + ( C8522+ (  ( C8560*C8521 ) /C8345 )  ) ;
    double gz101020 =  (  ( C9162* ( C8334*C8574 )  ) + (  ( C8469*C8553 ) *C9162 )  ) + (  ( C9196* ( C8334*C8553 )  ) /2.0 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 4] += cc* (  ( cnst3*gz101200 ) - ( cnst3*gz101020 )  ) ;
    gz[(Ai + 3) * matrix_size + Bi + 2] += cc* (  ( gz101002*cnst7 ) - (  ( cnst4*gz101020 ) + ( cnst4*gz101200 )  )  ) ;
    double gx002020 =  (  ( C8828* ( C8356*C8574 )  ) + (  ( C9178* ( C8828*C8553 )  ) /2.0 )  ) + (  ( C8356*C8553 ) *C8841 ) ;
    double gx200020 =  (  (  ( C8428*C8574 ) *C8378 ) + (  ( C9163*cnst19 ) /2.0 )  ) + ( C8435* ( C8428*C8553 )  ) ;
    double cnst983 = gx200020*cnst2;
    double gx101020 =  ( C8833* ( C8393*C8553 )  ) + (  (  ( C8393*C8574 ) *C8342 ) + (  (  ( C8342*C8553 ) *C9193 ) /2.0 )  ) ;
    double gz200020 =  (  ( C8371* ( C8412*C8574 )  ) + ( C8371* ( C8498*C8553 )  )  ) + (  (  ( C8412*C8553 ) *C9307 ) /2.0 ) ;
    double cnst1002 = gz200020*cnst2;
    double gz002020 =  (  (  ( C8378*C8574 ) *C8832 ) + (  ( C8436*C8553 ) *C8832 )  ) + (  ( C9184*cnst19 ) /2.0 ) ;
    double C8709 =  (  ( be* ( C8739-C8378 )  ) /C8345 ) + ( C8522- (  ( C8352*C8692 ) /C8345 )  ) ;
    double gz020200 =  (  (  ( C8681*C8683 ) *C9307 ) /2.0 ) + (  ( C8371* ( C8681*C8710 )  ) + ( C8371* ( C8709*C8683 )  )  ) ;
    double cnst1016 = gz020200*cnst2;
    double gx020200 =  (  ( C8378* ( C8696*C8709 )  ) - (  ( cnst752*C9316 ) /2.0 )  ) + ( C8435* ( C8696*C8681 )  ) ;
    double cnst1025 = gx020200*cnst2;
    double gx020101 =  (  ( C9023* ( C8709*C8678 )  ) - (  ( C9259* ( C8681*C9023 )  ) /2.0 )  ) + ( C8620* ( C8681*C8678 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 3] += cc* (  ( cnst7*gx002101 ) - (  ( cnst4*gx200101 ) + ( cnst4*gx020101 )  )  ) ;
    gx[(Ai + 4) * matrix_size + Bi + 3] += cc* (  ( gx200101*cnst3 ) - ( gx020101*cnst3 )  ) ;
    double gz020002 =  (  ( C8626* ( C8436*C8681 )  ) + ( C8626* ( C8709*C8378 )  )  ) - (  ( cnst752*C9315 ) /2.0 ) ;
    double gz020101 =  (  (  ( C8952*C8709 ) *C8614 ) + (  ( C8681*C8694 ) *C8614 )  ) - (  (  ( C8952*C8681 ) *C9257 ) /2.0 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 3] += cc* (  ( cnst3*gz200101 ) - ( gz020101*cnst3 )  ) ;
    double gx020002 =  (  ( C8681*C8356 ) *C8634 ) + (  ( C8613* ( C8709*C8356 )  ) + (  ( C9178* ( C8681*C8613 )  ) /2.0 )  ) ;
    double C8780 =  (  (  ( C8748*be ) *ae ) *2 ) + ( C8692+ ( C8709*C8521 )  ) ;
    double gz020011 =  (  (  ( cnst43*C8780 ) /C8345 ) + ( C8614* ( C8436*C8748 )  )  ) - (  ( cnst691*C9257 ) /2.0 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 1] += cc* (  ( cnst3*gz200011 ) - ( cnst3*gz020011 )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 1] += cc* (  ( cnst7*gz002011 ) - (  ( cnst4*gz020011 ) + ( cnst4*gz200011 )  )  ) ;
    double gz020110 =  (  (  ( C8952*C8748 ) *C9307 ) /2.0 ) + (  ( C8371* ( C8748*C8694 )  ) + (  (  ( C8952*C8371 ) *C8780 ) /C8345 )  ) ;
    gz[(Ai + 4) * matrix_size + Bi + 0] += cc* (  ( cnst3*gz200110 ) - ( cnst3*gz020110 )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 0] += cc* (  ( cnst7*gz002110 ) - (  ( cnst4*gz020110 ) + ( cnst4*gz200110 )  )  ) ;
    double cnst1068 =  (  (  ( C8343*cnst10 ) *C8780 ) /C8345 ) + (  ( C9178* ( C8748*C9023 )  ) /2.0 ) ;
    double gx020011 =  ( C8620* ( C8748*C8356 )  ) +cnst1068;
    gx[(Ai + 4) * matrix_size + Bi + 1] += cc* (  ( cnst3*gx200011 ) - ( gx020011*cnst3 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 1] += cc* (  ( cnst7*gx002011 ) - (  ( gx020011*cnst4 ) + ( cnst4*gx200011 )  )  ) ;
    double C8801 =  (  (  ( C8709+ ( C8787*2 )  ) /C8358 ) + (  ( C8521*C8780 ) /C8368 )  ) + (  (  (  (  ( be*C8782 ) *2 ) -C8681 ) *ae ) /C8345 ) ;
    double gz020020 =  (  ( C8371* ( C8436*C8782 )  ) + ( C8371* ( C8378*C8801 )  )  ) + (  ( cnst745*C9307 ) /2.0 ) ;
    double cnst1078 =  (  (  ( gz200200*cnst0 ) - ( cnst0*gz200020 )  ) - ( gz020200*cnst0 )  ) + ( cnst0*gz020020 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 4] += cc*cnst1078;
    double cnst1079 = gz020020*cnst2;
    double cnst1081 =  (  ( cnst1016+ (  ( cnst4*gz200002 ) - ( cnst795+cnst1002 )  )  ) +cnst1079 ) - ( cnst4*gz020002 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 2] += cc*cnst1081;
    double gx020020 =  (  (  ( C9178*cnst745 ) /2.0 ) + (  ( C8356*C8801 ) *C8378 )  ) + ( C8435* ( C8356*C8782 )  ) ;
    double cnst1088 =  (  (  ( cnst0*gx200200 ) - ( cnst0*gx200020 )  ) - ( gx020200*cnst0 )  ) + ( gx020020*cnst0 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 4] += cc*cnst1088;
    double cnst1090 = gx020020*cnst2;
    double cnst1093 =  (  ( cnst4*gx002200 ) + (  (  ( cnst983-cnst773 ) -cnst1025 ) +cnst1090 )  ) - ( cnst4*gx002020 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 4] += cc*cnst1093;
    double gx020110 =  ( C8435* ( C8748*C8678 )  ) + (  (  ( cnst205*C8780 ) /C8345 ) - (  ( cnst691*C9259 ) /2.0 )  ) ;
    gx[(Ai + 4) * matrix_size + Bi + 0] += cc* (  ( gx200110*cnst3 ) - ( cnst3*gx020110 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 0] += cc* (  ( cnst7*gx002110 ) - (  ( cnst4*gx200110 ) + ( cnst4*gx020110 )  )  ) ;
    double gx101200 =  (  ( C8965*C8378 ) *C8833 ) + (  (  ( C8965*C8431 ) *C8342 ) - (  ( C9317*cnst22 ) /2.0 )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 4] +=  (  ( gx101200*cnst3 ) - ( gx101020*cnst3 )  ) *cc;
    gx[(Ai + 3) * matrix_size + Bi + 2] += cc* (  ( cnst7*gx101002 ) - (  ( cnst4*gx101200 ) + ( gx101020*cnst4 )  )  ) ;
    double gx002002 =  (  ( C8356*C8378 ) *C8934 ) + (  (  ( C8431*C8356 ) *C8915 ) + (  ( C9178*cnst68 ) /2.0 )  ) ;
    double gx200002 =  (  ( C8428*C8378 ) *C8634 ) + (  ( C8613* ( C8431*C8428 )  ) + (  ( C9163*cnst20 ) /2.0 )  ) ;
    double cnst1120 =  ( cnst1090+ ( cnst1025+ (  ( cnst4*gx200002 ) - ( cnst983+cnst773 )  )  )  ) - ( gx020002*cnst4 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 2] += cc*cnst1120;
    double gz002101 =  (  ( C8903* ( C8378*C8694 )  ) + ( C8903* ( C8952*C8431 )  )  ) - (  ( cnst11*C9277 ) /2.0 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 3] += cc* (  ( cnst7*gz002101 ) - (  ( cnst4*gz020101 ) + ( cnst4*gz200101 )  )  ) ;
    double gz002200 =  (  (  ( C8710*C8378 ) *C8832 ) + (  ( C8431*C8683 ) *C8832 )  ) + (  ( C9184*cnst21 ) /2.0 ) ;
    double cnst1131 =  (  ( cnst1079+ (  ( cnst1002-cnst795 ) -cnst1016 )  ) + ( cnst4*gz002200 )  ) - ( cnst4*gz002020 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 4] += cc*cnst1131;
    double gx101101 =  (  (  ( C8431*C8430 ) *C8883 ) - (  ( C9253*cnst58 ) /2.0 )  ) + (  ( C8430*C8378 ) *C8920 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 3] += gx101101*cnst6;
    double cnst1138 =  ( 0.25*gz020200 ) + (  (  ( 0.25*gz200200 ) + ( 0.25*gz200020 )  ) - ( 0.5*gz200002 )  ) ;
    double cnst1145 =  ( 0.25*gy020200 ) + (  (  ( 0.25*gy200200 ) + ( 0.25*gy200020 )  ) - ( 0.5*gy200002 )  ) ;
    double cnst1153 =  (  (  ( cnst1145+ ( 0.25*gy020020 )  ) - ( 0.5*gy020002 )  ) - ( 0.5*gy002200 )  ) - ( 0.5*gy002020 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 2] += cc* ( cnst1153+gy002002 ) ;
    double cnst1157 =  ( gx020200*0.25 ) + (  (  ( 0.25*gx200020 ) + ( 0.25*gx200200 )  ) - ( 0.5*gx200002 )  ) ;
    double cnst1161 =  (  (  (  ( 0.25*gz020020 ) +cnst1138 ) - ( 0.5*gz020002 )  ) - ( 0.5*gz002200 )  ) - ( 0.5*gz002020 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 2] += cc* ( cnst1161+gz002002 ) ;
    double cnst1166 =  (  (  ( cnst1157+ ( 0.25*gx020020 )  ) - ( gx020002*0.5 )  ) - ( 0.5*gx002200 )  ) - ( 0.5*gx002020 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 2] += cc* ( gx002002+cnst1166 ) ;
}
