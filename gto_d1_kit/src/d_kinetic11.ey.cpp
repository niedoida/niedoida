/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d1_kit/gto_d1.hpp"
#include <cmath>

namespace {
    static const double Pi = M_PI;
}

void kinetic_gradient_23(
double ae , 
double be , 
double cc , 
double xAB , 
double yAB , 
double zAB , 
double* const gx , 
double* const gy , 
double* const gz , 
std::size_t matrix_size , 
std::size_t Ai , 
std::size_t Bi ) 
{
    double cnst0 = std::sqrt(22.5);
    double cnst1 = std::sqrt(3.75);
    double cnst2 = std::sqrt(1.6875);
    double cnst3 = std::sqrt(0.75);
    double cnst4 = std::sqrt(4.5);
    double cnst5 = std::sqrt(6.75);
    double cnst6 = std::sqrt(7.5);
    double cnst7 = std::sqrt(6.0);
    double cnst9 = cc* ( std::sqrt(45.) ) ;
    double cnst10 = std::sqrt(1.5);
    double cnst11 = std::sqrt(5.625);
    double cnst12 = 4*ae;
    double C12519 = ae*zAB;
    double C12422 = yAB*ae;
    double C12154 = std::pow(ae , 2);
    double cnst14 = std::sqrt( ( 5.0/8.0 ) );
    double cnst16 = std::sqrt( ( 45./8.0 ) );
    double cnst18 = std::sqrt( ( 45.0/8.0 ) );
    double cnst20 = std::sqrt( ( 2.25/8.0 ) );
    double cnst22 = std::sqrt( ( 0.75/8.0 ) );
    double cnst24 = std::sqrt( ( 15./8.0 ) );
    double cnst26 = std::sqrt( ( 3.75/8.0 ) );
    double cnst28 = std::sqrt( ( 33.75/8.0 ) );
    double cnst30 = std::sqrt( ( 1.25/8.0 ) );
    double cnst31 = std::sqrt(1.875);
    double C12148 = xAB*ae;
    double cnst33 = std::sqrt( ( 135./8.0 ) );
    double cnst34 = std::sqrt(18.);
    double cnst36 = std::sqrt( ( 9./8.0 ) );
    double cnst37 = std::sqrt(3.0);
    double cnst39 = std::sqrt( ( 3.0/8.0 ) );
    double cnst40 = 6*ae;
    double cnst41 = std::sqrt(15.0);
    double C12145 = be+ae;
    double C12187 = std::sqrt( ( Pi/C12145 ) );
    double cnst42 = C12187*C12187;
    double C12432 = C12187*C12422;
    double C12445 = C12432*2.;
    double C12453 =  ( C12432*be ) *2;
    double C12727 = C12432/C12145;
    double cnst43 = C12727*C12187;
    double C12203 = C12148*C12187;
    double C12231 =  ( be*C12203 ) *2;
    double C12646 = C12203*2.;
    double C12215 = C12203/C12145;
    double cnst46 = C12215*C12187;
    double C12529 = C12519*C12187;
    double C12954 = C12529/C12145;
    double cnst49 = C12187*C12954;
    double C12550 =  ( C12529*be ) *2;
    double C12542 = C12529*2.;
    double C12175 = std::pow(C12145 , 2);
    double C12191 = C12175*2.;
    double C12161 = 2.*C12145;
    double C12544 =  (  ( C12187*ae ) *2. ) /C12161;
    double C12557 =  ( - (  ( be*C12187 ) *2 )  ) /C12161;
    double C12202 = C12187/C12161;
    double C12681 = C12202+ (  ( C12187* ( std::pow(C12148 , 2) )  ) /C12175 ) ;
    double C12697 =  ( C12646/C12191 ) + (  ( C12148*C12681 ) /C12145 ) ;
    double cnst51 = C12187*C12697;
    double cnst52 = C12187*C12681;
    double C12462 = C12202+ (  (  ( std::pow(C12422 , 2) ) *C12187 ) /C12175 ) ;
    double cnst56 = C12462*C12187;
    double C12481 =  (  ( C12462*C12422 ) /C12145 ) + ( C12445/C12191 ) ;
    double cnst57 = C12187*C12481;
    double C12559 = C12202+ (  ( C12187* ( std::pow(C12519 , 2) )  ) /C12175 ) ;
    double C12578 =  (  ( C12519*C12559 ) /C12145 ) + ( C12542/C12191 ) ;
    double cnst59 = C12578*C12187;
    double cnst61 = C12187*C12559;
    double cnst62 = C12559*2;
    double C12186 = 1/C12161;
    double C12156 = be*zAB;
    double C12925 = C12202+ (  ( C12187* ( std::pow(C12156 , 2) )  ) /C12175 ) ;
    double cnst68 = C12925*2;
    double cnst69 = C12925*C12187;
    double C12984 = 2* ( C12925*ae ) ;
    double C12259 = C12187* ( ae- ( 2* (  ( C12186+ ( std::pow( ( C12156/C12145 )  , 2) )  ) *C12154 )  )  ) ;
    double C12520 = C12259/C12161;
    double C12568 =  (  ( C12259*C12519 ) /C12145 ) + (  ( C12550*ae ) /C12175 ) ;
    double C12598 =  (  (  ( C12568*C12519 ) /C12145 ) +C12520 ) + (  (  (  (  ( be*C12559 ) *2 ) -C12187 ) *ae ) /C12145 ) ;
    double C12607 =  (  (  ( 2* ( C12578*be )  ) - ( C12542/C12145 )  ) *ae ) + ( C12568+ ( C12519*C12598 )  ) ;
    double C12930 =  (  ( be* ( -C12550 )  ) /C12175 ) - (  ( C12259*C12156 ) /C12145 ) ;
    double C12938 =  ( C12520- (  ( C12930*C12156 ) /C12145 )  ) + (  ( be* ( C12984-C12187 )  ) /C12145 ) ;
    double C12911 = C12187*C12156;
    double C12955 = C12911/C12145;
    double C12142 = -C12955;
    double C12158 = C12142*ae;
    double C12560 = C12544+ (  ( 2* ( C12158*C12519 )  ) /C12145 ) ;
    double C12178 = C12158*2;
    double C12579 =  (  ( C12178+ (  ( C12954*ae ) *2 )  ) /C12161 ) + (  ( C12519*C12560 ) /C12145 ) ;
    double cnst80 = C12579*C12187;
    double C12600 =  (  (  ( C12560*2 ) + (  ( ae*C12559 ) *2 )  ) /C12161 ) + (  ( C12579*C12519 ) /C12145 ) ;
    double C13434 = C12557- (  (  ( C12158*C12156 ) *2 ) /C12145 ) ;
    double C13484 = C13434*ae;
    double C12597 =  (  (  ( C13484*C12519 ) *2 ) /C12145 ) + (  (  ( C12178*ae ) *4. ) /C12161 ) ;
    double C13561 =  (  ( - (  ( be*C12178 ) *4 )  ) /C12161 ) - (  (  ( C13484*C12156 ) *2 ) /C12145 ) ;
    double C13577 = ae*C13561;
    double C13008 =  ( 2* ( C13577*C12156 )  ) /C12145;
    double C12965 = C13577*2;
    double C13023 =  ( C12965- ( 6* ( be*C13561 )  )  ) /C12161;
    double C13590 = -C12965;
    double C12574 = C13484*2;
    double C13551 =  (  ( C12574+ ( 4* ( ae*C12560 )  )  ) /C12161 ) + (  ( C12597*C12519 ) /C12145 ) ;
    double C12609 =  (  (  ( C13577*C12519 ) *2 ) /C12145 ) + (  ( 6.* ( C12574*ae )  ) /C12161 ) ;
    double C13550 =  (  ( C12609*C12519 ) /C12145 ) + (  ( C12965+ ( 6* ( C12597*ae )  )  ) /C12161 ) ;
    double C13604 =  (  (  ( 6* ( C13551*ae )  ) + ( C12609*2 )  ) /C12161 ) + (  ( C12519*C13550 ) /C12145 ) ;
    double C13024 =  ( - ( 6* ( C12574*be )  )  ) /C12161;
    double C13036 = C13024-C13008;
    double C13059 =  ( C12156*C13036 ) /C12145;
    double C13460 = C13059-C13023;
    double C13072 = C13023-C13059;
    double C13074 =  (  ( C12519*C13036 ) /C12145 ) + (  ( C12965+ ( 6*C13577 )  ) /C12161 ) ;
    double C13462 = C13074*2;
    double C13475 = C13008-C13024;
    double C13027 =  (  ( C12519*C13561 ) /C12145 ) + (  ( C12574+ ( C13484*4 )  ) /C12161 ) ;
    double C13557 =  (  (  ( C12609+C13036 ) + ( 6* ( C13027*ae )  )  ) /C12161 ) + (  ( C13074*C12519 ) /C12145 ) ;
    double C13037 =  (  ( C12574- (  ( C13434*be ) *4 )  ) /C12161 ) - (  ( C12156*C13561 ) /C12145 ) ;
    double C13102 =  (  (  ( 2*C13036 ) + ( 6* ( ae*C13037 )  )  ) /C12161 ) + (  ( C13072*C12519 ) /C12145 ) ;
    double C13004 =  (  ( C13434*C12519 ) /C12145 ) + (  ( C12158*4. ) /C12161 ) ;
    double C13560 =  (  (  ( C12597+C13561 ) + (  ( C13004*ae ) *4 )  ) /C12161 ) + (  ( C13027*C12519 ) /C12145 ) ;
    double C13608 =  (  ( C12519*C13557 ) /C12145 ) + (  (  ( 6* ( C13560*ae )  ) + ( C13462+C13550 )  ) /C12161 ) ;
    double C13020 = C13004*2;
    double C12929 =  (  ( C12178- (  ( be*C12142 ) *2 )  ) /C12161 ) - (  ( C13434*C12156 ) /C12145 ) ;
    double C13033 =  (  ( C12519*C12929 ) /C12145 ) + (  (  ( C13434*2 ) +C12984 ) /C12161 ) ;
    double C13075 =  (  (  (  ( C12929*ae ) *4 ) + ( 2*C13561 )  ) /C12161 ) + (  ( C12519*C13037 ) /C12145 ) ;
    double cnst105 =  (  ( C13075*C12519 ) /C12145 ) + (  (  ( cnst12*C13033 ) + (  ( C13027*2 ) +C13037 )  ) /C12161 ) ;
    double C13556 =  (  ( C12519*C13102 ) /C12145 ) + (  (  (  ( C13075*ae ) *6 ) + ( C13072+C13462 )  ) /C12161 ) ;
    double cnst115 =  (  (  (  ( C13557*2 ) + ( C13102*2 )  ) + ( cnst40*cnst105 )  ) /C12161 ) + (  ( C12519*C13556 ) /C12145 ) ;
    double cnst118 = C12187*C12929;
    double cnst119 = C12187*C12142;
    double C12999 =  (  ( C12925*C12519 ) /C12145 ) + (  ( - ( C12911*2. )  ) /C12191 ) ;
    double C13051 =  ( C12930+ ( C12519*C12938 )  ) + ( 2* (  ( be*C12999 ) *ae )  ) ;
    double C13070 =  (  ( C12519*C13033 ) /C12145 ) + (  (  ( C13020+C12929 ) + (  ( ae*C12999 ) *2 )  ) /C12161 ) ;
    double C13018 = C12999*2;
    double cnst123 = C12187*C12999;
    double C13001 = C12202- (  ( C12911*C12519 ) /C12175 ) ;
    double cnst127 = C12187*C13001;
    double C13041 =  (  ( C12519*C13001 ) /C12145 ) + (  ( C12954-C12955 ) /C12161 ) ;
    double cnst128 = C12187*C13041;
    double C13064 =  (  (  (  ( be*C13001 ) *ae ) *2 ) /C12145 ) + ( C12520+ (  ( C12930*C12519 ) /C12145 )  ) ;
    double C13105 =  (  (  (  (  ( be*C13041 ) *2 ) +C12955 ) *ae ) /C12145 ) + (  (  ( C13064*C12519 ) /C12145 ) + (  ( C12930+C12568 ) /C12161 )  ) ;
    double C13077 = C13064*2;
    double C13044 =  (  ( C13004*C12519 ) /C12145 ) + (  (  ( C13434+C12560 ) + (  ( C13001*ae ) *2 )  ) /C12161 ) ;
    double C13234 =  (  (  (  ( C13041*ae ) *2 ) + ( C12579+C13020 )  ) /C12161 ) + (  ( C13044*C12519 ) /C12145 ) ;
    double C13016 = C13001*2;
    double C13053 =  (  ( C12519*C12999 ) /C12145 ) + (  ( C12925+C13016 ) /C12161 ) ;
    double C13101 =  (  ( C12519*C13070 ) /C12145 ) + (  (  (  ( C13044*2 ) + ( C13033*2 )  ) + ( 2* ( C13053*ae )  )  ) /C12161 ) ;
    double C13107 =  (  (  (  (  ( be*C13053 ) *2 ) -C12925 ) *ae ) /C12145 ) + (  (  ( C13077+C12938 ) /C12161 ) + (  ( C13051*C12519 ) /C12175 )  ) ;
    double C13116 =  (  (  ( C13105*2 ) + (  ( C13051*2 ) /C12145 )  ) /C12161 ) + (  ( C13107*C12519 ) /C12145 ) ;
    double C13092 =  (  ( C13053*C12519 ) /C12145 ) + (  (  ( C13041*2 ) +C13018 ) /C12161 ) ;
    double C13117 =  (  (  (  (  ( be*C13092 ) *2 ) -C13018 ) *ae ) /C12145 ) +C13116;
    double cnst133 = C12187*C13092;
    double cnst136 = C13053*C12187;
    double C13229 =  (  ( C12519*C13041 ) /C12145 ) + (  ( C13016+C12559 ) /C12161 ) ;
    double cnst137 = C12187*C13229;
    double C13238 =  (  (  (  (  ( be*C13229 ) *2 ) -C13016 ) *ae ) /C12145 ) + (  (  ( C12598+C13077 ) /C12161 ) + (  ( C13105*C12519 ) /C12145 )  ) ;
    double C12155 = be*yAB;
    double C12254 = C12187* ( ae- (  ( C12154* ( C12186+ ( std::pow( ( C12155/C12145 )  , 2) )  )  ) *2 )  ) ;
    double C12423 = C12254/C12161;
    double C12471 =  (  ( C12254*C12422 ) /C12145 ) + (  ( ae*C12453 ) /C12175 ) ;
    double C12501 =  (  (  ( C12471*C12422 ) /C12145 ) +C12423 ) + (  (  (  (  ( C12462*be ) *2 ) -C12187 ) *ae ) /C12145 ) ;
    double C12510 =  ( C12471+ ( C12501*C12422 )  ) + (  (  (  ( be*C12481 ) *2 ) - ( C12445/C12145 )  ) *ae ) ;
    double C12689 =  (  (  ( -C12453 ) *be ) /C12175 ) - (  ( C12254*C12155 ) /C12145 ) ;
    double C12677 = C12202+ (  (  ( std::pow(C12155 , 2) ) *C12187 ) /C12175 ) ;
    double C12757 =  ( C12677*ae ) *2;
    double C12707 =  (  ( be* ( C12757-C12187 )  ) /C12145 ) + ( C12423- (  ( C12155*C12689 ) /C12145 )  ) ;
    double cnst181 = C12677*C12187;
    double C12635 = C12155*C12187;
    double C12772 =  (  ( - ( C12635*2. )  ) /C12191 ) + (  ( C12677*C12422 ) /C12145 ) ;
    double C12824 =  (  (  ( be*C12772 ) *ae ) *2 ) + (  ( C12707*C12422 ) +C12689 ) ;
    double cnst200 = C12187*C12772;
    double C12791 = C12772*2;
    double C12774 = C12202- (  ( C12635*C12422 ) /C12175 ) ;
    double C12837 =  (  ( 2* ( ae* ( be*C12774 )  )  ) /C12145 ) + ( C12423+ (  ( C12689*C12422 ) /C12145 )  ) ;
    double C12850 = 2*C12837;
    double cnst222 = C12187*C12774;
    double C12789 = C12774*2;
    double C12826 =  (  ( C12677+C12789 ) /C12161 ) + (  ( C12422*C12772 ) /C12145 ) ;
    double cnst226 = C12826*C12187;
    double C12880 =  (  (  (  (  ( be*C12826 ) *2 ) -C12677 ) *ae ) /C12145 ) + (  (  ( C12707+C12850 ) /C12161 ) + (  ( C12824*C12422 ) /C12175 )  ) ;
    double C12728 = C12635/C12145;
    double C12814 =  (  ( C12774*C12422 ) /C12145 ) + (  ( C12727-C12728 ) /C12161 ) ;
    double cnst241 = C12187*C12814;
    double C13180 =  (  ( C12814*C12422 ) /C12145 ) + (  ( C12462+C12789 ) /C12161 ) ;
    double cnst245 = C12187*C13180;
    double C12865 =  (  ( C12826*C12422 ) /C12145 ) + (  ( C12791+ ( C12814*2 )  ) /C12161 ) ;
    double cnst249 = C12865*C12187;
    double C12878 =  (  (  ( C12471+C12689 ) /C12161 ) + (  ( C12422*C12837 ) /C12145 )  ) + (  ( ae* (  ( 2* ( be*C12814 )  ) +C12728 )  ) /C12145 ) ;
    double C13189 =  (  (  (  (  ( be*C13180 ) *2 ) -C12789 ) *ae ) /C12145 ) + (  (  ( C12878*C12422 ) /C12145 ) + (  ( C12850+C12501 ) /C12161 )  ) ;
    double C12889 =  (  ( C12422*C12880 ) /C12145 ) + (  (  ( C12878*2 ) + (  ( C12824*2 ) /C12145 )  ) /C12161 ) ;
    double C12890 =  (  (  (  (  ( be*C12865 ) *2 ) -C12791 ) *ae ) /C12145 ) +C12889;
    double C12140 = -C12728;
    double C12157 = C12140*ae;
    double C12463 = C12544+ (  (  ( C12157*C12422 ) *2 ) /C12145 ) ;
    double C12177 = C12157*2;
    double C12482 =  (  ( C12177+ (  ( C12727*ae ) *2 )  ) /C12161 ) + (  ( C12463*C12422 ) /C12145 ) ;
    double cnst299 = C12187*C12482;
    double C12503 =  (  (  ( C12463*2 ) + (  ( C12462*ae ) *2 )  ) /C12161 ) + (  ( C12482*C12422 ) /C12145 ) ;
    double C12464 = C12557- (  (  ( C12155*C12157 ) *2 ) /C12145 ) ;
    double C12470 = C12464*ae;
    double C12498 =  (  ( - ( 4* ( C12177*be )  )  ) /C12161 ) - (  ( 2* ( C12155*C12470 )  ) /C12145 ) ;
    double C12504 = C12498*ae;
    double C12738 = 2*C12504;
    double C13433 = -C12738;
    double C12781 =  (  ( C12155*C12504 ) *2 ) /C12145;
    double C12796 =  ( C12738- ( 6* ( be*C12498 )  )  ) /C12161;
    double C12500 =  (  (  ( C12470*C12422 ) *2 ) /C12145 ) + (  (  ( C12177*ae ) *4. ) /C12161 ) ;
    double C12477 = C12470*2;
    double C13549 =  (  ( C12477+ ( 4* ( C12463*ae )  )  ) /C12161 ) + (  ( C12500*C12422 ) /C12145 ) ;
    double C12512 =  (  (  ( C12477*ae ) *6. ) /C12161 ) + (  (  ( C12422*C12504 ) *2 ) /C12145 ) ;
    double C13548 =  (  ( C12512*C12422 ) /C12145 ) + (  ( C12738+ ( 6* ( C12500*ae )  )  ) /C12161 ) ;
    double C13603 =  (  ( C13548*C12422 ) /C12145 ) + (  (  ( 6* ( C13549*ae )  ) + ( C12512*2 )  ) /C12161 ) ;
    double C12797 =  ( - ( 6* ( be*C12477 )  )  ) /C12161;
    double C12809 = C12797-C12781;
    double C12832 =  ( C12809*C12155 ) /C12145;
    double C12845 = C12796-C12832;
    double C13452 = C12832-C12796;
    double C12847 =  (  ( C12738+ ( 6*C12504 )  ) /C12161 ) + (  ( C12809*C12422 ) /C12145 ) ;
    double C13455 = C12847*2;
    double C13470 = C12781-C12797;
    double C12800 =  (  ( C12498*C12422 ) /C12145 ) + (  (  ( 4*C12470 ) +C12477 ) /C12161 ) ;
    double C13555 =  (  (  ( 6* ( ae*C12800 )  ) + ( C12809+C12512 )  ) /C12161 ) + (  ( C12847*C12422 ) /C12145 ) ;
    double C12685 =  (  ( C12177- (  ( C12140*be ) *2 )  ) /C12161 ) - (  ( C12155*C12464 ) /C12145 ) ;
    double cnst362 = C12685*C12187;
    double C12806 =  (  ( C12685*C12422 ) /C12145 ) + (  (  ( C12464*2 ) +C12757 ) /C12161 ) ;
    double C12777 =  (  ( C12157*4. ) /C12161 ) + (  ( C12464*C12422 ) /C12145 ) ;
    double C12817 =  (  (  ( C12463+C12464 ) + (  ( C12774*ae ) *2 )  ) /C12161 ) + (  ( C12777*C12422 ) /C12145 ) ;
    double C13559 =  (  ( C12800*C12422 ) /C12145 ) + (  (  ( 4* ( C12777*ae )  ) + ( C12500+C12498 )  ) /C12161 ) ;
    double C13607 =  (  (  ( C13548+C13455 ) + (  ( C13559*ae ) *6 )  ) /C12161 ) + (  ( C13555*C12422 ) /C12145 ) ;
    double C12793 = C12777*2;
    double C12843 =  (  (  (  ( ae*C12772 ) *2 ) + ( C12685+C12793 )  ) /C12161 ) + (  ( C12422*C12806 ) /C12145 ) ;
    double C12874 =  (  (  (  ( C12826*ae ) *2 ) + (  ( C12817*2 ) + ( 2*C12806 )  )  ) /C12161 ) + (  ( C12843*C12422 ) /C12145 ) ;
    double C13185 =  (  ( C12817*C12422 ) /C12145 ) + (  (  ( C12793+C12482 ) + (  ( C12814*ae ) *2 )  ) /C12161 ) ;
    double C12810 =  (  ( C12477- (  ( be*C12464 ) *4 )  ) /C12161 ) - (  ( C12155*C12498 ) /C12145 ) ;
    double C12848 =  (  (  (  ( C12685*ae ) *4 ) + ( C12498*2 )  ) /C12161 ) + (  ( C12422*C12810 ) /C12145 ) ;
    double cnst404 =  (  (  ( cnst12*C12806 ) + (  ( C12800*2 ) +C12810 )  ) /C12161 ) + (  ( C12848*C12422 ) /C12145 ) ;
    double C12875 =  (  ( C12422*C12845 ) /C12145 ) + (  (  (  ( ae*C12810 ) *6 ) + ( C12809*2 )  ) /C12161 ) ;
    double C13554 =  (  ( C12875*C12422 ) /C12145 ) + (  (  ( 6* ( C12848*ae )  ) + ( C12845+C13455 )  ) /C12161 ) ;
    double cnst420 =  (  (  ( cnst40*cnst404 ) + (  ( C12875*2 ) + ( C13555*2 )  )  ) /C12161 ) + (  ( C12422*C13554 ) /C12145 ) ;
    double cnst427 = C12140*C12187;
    double C12147 = xAB*be;
    double C12200 = C12187*C12147;
    double C12247 = C12202- (  ( C12200*C12148 ) /C12175 ) ;
    double C12265 = C12247*2;
    double cnst476 = C12187*C12247;
    double C12216 = C12200/C12145;
    double C12132 = -C12216;
    double C12143 = ae*C12132;
    double C12159 = 2*C12143;
    double cnst494 =  ( C12140*C12159 ) *C13238;
    double cnst504 =  ( C12159*C13189 ) *C12142;
    double C12204 = C12557- (  (  ( C12147*C12143 ) *2 ) /C12145 ) ;
    double C12252 =  (  ( 4.*C12143 ) /C12161 ) + (  ( C12204*C12148 ) /C12145 ) ;
    double C12269 = C12252*2;
    double C12223 = C12204*ae;
    double C12679 =  (  (  ( C12159*ae ) *4. ) /C12161 ) + (  ( 2* ( C12223*C12148 )  ) /C12145 ) ;
    double C12239 = C12223*2;
    double C12304 =  ( - ( 6* ( be*C12239 )  )  ) /C12161;
    double C12287 =  (  ( - ( 4* ( be*C12159 )  )  ) /C12161 ) - (  (  ( C12223*C12147 ) *2 ) /C12145 ) ;
    double C12302 = C12287*ae;
    double C12320 = C12302*2;
    double C12351 =  ( C12320- ( 6* ( C12287*be )  )  ) /C12161;
    double C13453 = -C12320;
    double gx020003 =  (  ( C12578* ( C12707*C12159 )  ) + (  (  ( C12677*C12578 ) *C13453 ) /2.0 )  ) + (  (  ( C12677*C12159 ) *C12607 ) /C12145 ) ;
    double gx011003 = cnst494+ (  (  (  ( C12140*C13229 ) *C13453 ) /2.0 ) + ( C13229* ( C12159*C12689 )  )  ) ;
    double cnst608 =  (  (  ( cnst68*C12143 ) *C12510 ) /C12145 ) + (  (  ( C12925*C12481 ) *C13453 ) /2.0 ) ;
    double gx002030 = cnst608+ ( C12938* ( C12159*C12481 )  ) ;
    double gx002021 =  (  (  (  ( C12462*C12999 ) *C13453 ) /2.0 ) + (  ( C12159*C12501 ) *C12999 )  ) + (  ( C13051* ( C12462*C12159 )  ) /C12145 ) ;
    double cnst618 =  (  ( C12824* ( cnst62*C12143 )  ) /C12145 ) + (  ( C13453* ( C12559*C12772 )  ) /2.0 ) ;
    double gx020012 =  ( C12598* ( C12159*C12772 )  ) +cnst618;
    double gx002003 =  (  (  ( cnst133*C13453 ) /2.0 ) + (  ( C12254*C12159 ) *C13092 )  ) + (  ( C12187*C12159 ) *C13117 ) ;
    double gx011030 =  ( C12930* ( C12159*C13180 )  ) + ( cnst504+ (  (  ( C12142*C13180 ) *C13453 ) /2.0 )  ) ;
    double gx011012 =  (  (  ( C13453* ( C12774*C13041 )  ) /2.0 ) + (  ( C12159*C12837 ) *C13041 )  ) + ( C13105* ( C12774*C12159 )  ) ;
    double gx020030 =  (  (  ( cnst249*C13453 ) /2.0 ) + ( C12187* ( C12159*C12890 )  )  ) + ( C12259* ( C12865*C12159 )  ) ;
    double gx020021 =  ( C12568* ( C12826*C12159 )  ) + (  (  ( C13453* ( C12826*C12954 )  ) /2.0 ) + (  ( C12159*C12880 ) *C12954 )  ) ;
    double gx002012 =  (  (  ( C13453* ( C12727*C13053 )  ) /2.0 ) + ( C13053* ( C12471*C12159 )  )  ) + ( C13107* ( C12727*C12159 )  ) ;
    double gx011021 =  (  (  ( C13453* ( C13001*C12814 )  ) /2.0 ) + ( C13001* ( C12159*C12878 )  )  ) + ( C13064* ( C12159*C12814 )  ) ;
    double C12678 =  (  (  ( ae*C12239 ) *6. ) /C12161 ) + (  (  ( C12148*C12302 ) *2 ) /C12145 ) ;
    double C13552 =  (  (  (  ( C12679*ae ) *6 ) +C12320 ) /C12161 ) + (  ( C12148*C12678 ) /C12145 ) ;
    double C12352 =  (  ( C12302*C12147 ) *2 ) /C12145;
    double C12363 = C12304-C12352;
    double C12382 =  ( C12363*C12147 ) /C12145;
    double C12390 = C12351-C12382;
    double C13435 = C12382-C12351;
    double C12392 =  (  ( C12148*C12363 ) /C12145 ) + (  ( C12320+ ( 6*C12302 )  ) /C12161 ) ;
    double gx101111 =  (  ( C12727*C12252 ) *C13064 ) + (  (  ( C12471*C12252 ) *C13001 ) - (  (  ( C12727*C13001 ) *C12392 ) /2.0 )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 1] += gx101111*cnst9;
    double C13428 = 2*C12392;
    double gx101102 =  (  ( C12187*C12252 ) *C13105 ) + (  (  ( C12254*C12252 ) *C13041 ) - (  ( cnst128*C12392 ) /2.0 )  ) ;
    double gx101120 =  (  (  ( C12501*C12252 ) *C12142 ) - (  (  ( C12462*C12142 ) *C12392 ) /2.0 )  ) + ( C12930* ( C12462*C12252 )  ) ;
    double gx110111 =  (  (  ( C12252*C12837 ) *C12954 ) - (  (  ( C12774*C12954 ) *C12392 ) /2.0 )  ) + ( C12568* ( C12774*C12252 )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 1] += gx110111*cnst9;
    double gx110120 =  (  ( C12814*C12252 ) *C12259 ) + (  ( C12187* ( C12252*C12878 )  ) - (  ( cnst241*C12392 ) /2.0 )  ) ;
    double gx110102 =  (  (  ( C12252*C12689 ) *C12559 ) - (  (  ( C12140*C12559 ) *C12392 ) /2.0 )  ) + ( C12598* ( C12140*C12252 )  ) ;
    double C13471 = C12352-C12304;
    double gx110012 =  (  ( C12559* ( C12204*C12837 )  ) + (  ( C13471* ( C12774*C12559 )  ) /2.0 )  ) + ( C12598* ( C12204*C12774 )  ) ;
    double gx110030 =  (  (  ( C13471*cnst245 ) /2.0 ) + ( C12187* ( C12204*C13189 )  )  ) + ( C12259* ( C12204*C13180 )  ) ;
    double gx110021 =  ( C12568* ( C12204*C12814 )  ) + (  (  ( C13471* ( C12954*C12814 )  ) /2.0 ) + (  ( C12204*C12878 ) *C12954 )  ) ;
    double gx110003 =  (  ( C12578* ( C12204*C12689 )  ) + (  ( C13471* ( C12140*C12578 )  ) /2.0 )  ) + (  (  ( C12140*C12204 ) *C12607 ) /C12145 ) ;
    double gx101003 =  (  ( C12204*C12187 ) *C13238 ) + (  (  ( C12254*C12204 ) *C13229 ) + (  ( C13471*cnst137 ) /2.0 )  ) ;
    double cnst742 =  (  ( C13471* ( C12142*C12481 )  ) /2.0 ) + (  (  ( C12204*C12142 ) *C12510 ) /C12145 ) ;
    double gx101030 =  ( C12930* ( C12204*C12481 )  ) +cnst742;
    double gx101012 =  (  (  ( C13471* ( C12727*C13041 )  ) /2.0 ) + (  ( C12471*C12204 ) *C13041 )  ) + (  ( C12727*C12204 ) *C13105 ) ;
    double C12338 =  (  ( C12239- ( 4* ( be*C12204 )  )  ) /C12161 ) - (  ( C12287*C12147 ) /C12145 ) ;
    double C12407 =  (  ( C12148*C12390 ) /C12145 ) + (  (  (  ( C12338*ae ) *6 ) + ( C12363*2 )  ) /C12161 ) ;
    double C12341 =  (  (  ( C12223*4 ) +C12239 ) /C12161 ) + (  ( C12287*C12148 ) /C12145 ) ;
    double C13546 =  (  (  ( 6* ( C12341*ae )  ) + ( C12678+C12363 )  ) /C12161 ) + (  ( C12148*C12392 ) /C12145 ) ;
    double C13558 =  (  (  ( C12679+C12287 ) + ( 4* ( ae*C12252 )  )  ) /C12161 ) + (  ( C12148*C12341 ) /C12145 ) ;
    double C13606 =  (  ( C12148*C13546 ) /C12145 ) + (  (  ( C13552+C13428 ) + ( 6* ( C13558*ae )  )  ) /C12161 ) ;
    double gx101021 =  (  (  ( C13471* ( C12462*C13001 )  ) /2.0 ) + (  ( C12204*C12501 ) *C13001 )  ) + (  ( C12462*C12204 ) *C13064 ) ;
    double C12205 = C12544+ (  (  ( C12148*C12143 ) *2 ) /C12145 ) ;
    double C12682 =  (  ( C12159+ (  ( C12215*ae ) *2 )  ) /C12161 ) + (  ( C12205*C12148 ) /C12145 ) ;
    double gx002210 =  (  ( C12925* ( C12471*C12682 )  ) - (  ( C13552* ( C12727*C12925 )  ) /2.0 )  ) + (  ( C12727*C12682 ) *C12938 ) ;
    double gx011210 =  (  (  ( C12682*C12837 ) *C12142 ) - (  ( C13552* ( C12774*C12142 )  ) /2.0 )  ) + ( C12930* ( C12682*C12774 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 2] += - ( cc* (  ( cnst36*gx011030 ) + (  ( gx011012*cnst34 ) + ( cnst36*gx011210 )  )  )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 0] += cc* (  ( gx011210*cnst33 ) - ( cnst24*gx011030 )  ) ;
    double gx011201 =  ( C13064* ( C12140*C12682 )  ) + (  ( C13001* ( C12682*C12689 )  ) - (  ( C13552* ( C12140*C13001 )  ) /2.0 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 3] += cc* (  (  ( cnst37*gx011003 ) - ( cnst5*gx011201 )  ) - ( cnst5*gx011021 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 5] += cc* (  ( cnst0*gx011201 ) - ( gx011021*cnst0 )  ) ;
    double cnst817 = C12682*C12187;
    double gx020210 =  (  (  ( C12824*cnst817 ) /C12145 ) - (  ( C13552*cnst200 ) /2.0 )  ) + ( C12259* ( C12682*C12772 )  ) ;
    double gx002201 =  (  (  ( C12254*C12682 ) *C12999 ) - (  ( C13552*cnst123 ) /2.0 )  ) + (  ( C13051*cnst817 ) /C12145 ) ;
    double gx020201 =  ( C12568* ( C12677*C12682 )  ) + (  (  ( C12682*C12707 ) *C12954 ) - (  ( C13552* ( C12677*C12954 )  ) /2.0 )  ) ;
    double C13553 =  (  (  ( 4* ( C12205*ae )  ) +C12239 ) /C12161 ) + (  ( C12679*C12148 ) /C12145 ) ;
    double C13605 =  (  (  (  ( C13553*ae ) *6 ) + ( C12678*2 )  ) /C12161 ) + (  ( C12148*C13552 ) /C12145 ) ;
    double gx002111 =  (  ( C12999* ( C12471*C12205 )  ) - (  (  ( C12727*C12999 ) *C12678 ) /2.0 )  ) + (  ( C13051* ( C12727*C12205 )  ) /C12145 ) ;
    double gx002120 =  (  ( C12925* ( C12205*C12501 )  ) - (  (  ( C12925*C12462 ) *C12678 ) /2.0 )  ) + (  ( C12205*C12462 ) *C12938 ) ;
    double gx011120 =  (  (  ( C12205*C12878 ) *C12142 ) - (  ( C12678* ( C12142*C12814 )  ) /2.0 )  ) + ( C12930* ( C12205*C12814 )  ) ;
    double gx002102 =  (  ( C13053* ( C12205*C12254 )  ) - (  ( cnst136*C12678 ) /2.0 )  ) + ( C13107* ( C12205*C12187 )  ) ;
    double C12698 =  (  ( C12682*C12148 ) /C12145 ) + (  (  ( C12205*2 ) + (  ( ae*C12681 ) *2 )  ) /C12161 ) ;
    double gx002300 =  (  ( C12925* ( C12254*C12698 )  ) - (  ( C13605*cnst69 ) /2.0 )  ) + (  ( C12187*C12698 ) *C12938 ) ;
    double gx020300 =  (  ( C12677*C12698 ) *C12259 ) + (  ( C12187* ( C12707*C12698 )  ) - (  ( C13605*cnst181 ) /2.0 )  ) ;
    double gx011300 =  ( C12930* ( C12140*C12698 )  ) + (  (  ( C12698*C12689 ) *C12142 ) - (  ( C13605* ( C12140*C12142 )  ) /2.0 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 6] += cc* (  ( gx011120*cnst33 ) + ( cnst24*gx011300 )  ) ;
    double C12301 =  (  (  ( C12205+C12204 ) + (  ( C12247*ae ) *2 )  ) /C12161 ) + (  ( C12148*C12252 ) /C12145 ) ;
    double gx101201 =  ( C13064* ( C12301*C12187 )  ) + (  ( C13001* ( C12254*C12301 )  ) - (  ( C13546*cnst127 ) /2.0 )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 3] += cc* (  (  ( gx101003*cnst37 ) - ( gx101201*cnst5 )  ) - ( cnst5*gx101021 )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 5] += cc* (  ( gx101201*cnst0 ) - ( cnst0*gx101021 )  ) ;
    double gx110210 =  ( C12259* ( C12301*C12774 )  ) + (  (  ( C12301*C12837 ) *C12187 ) - (  ( cnst222*C13546 ) /2.0 )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 0] += cc* (  ( cnst33*gx110210 ) - ( cnst24*gx110030 )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 2] += - ( cc* (  (  ( cnst36*gx110210 ) + ( cnst34*gx110012 )  ) + ( cnst36*gx110030 )  )  ) ;
    double gx110201 =  (  ( C12140*C12301 ) *C12568 ) + (  (  ( C12301*C12689 ) *C12954 ) - (  ( C13546* ( C12140*C12954 )  ) /2.0 )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 5] += cc* (  ( cnst0*gx110201 ) - ( cnst0*gx110021 )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 3] += cc* (  (  ( cnst37*gx110003 ) - ( cnst5*gx110201 )  ) - ( cnst5*gx110021 )  ) ;
    double gx101210 =  (  ( C12142* ( C12471*C12301 )  ) - (  (  ( C12727*C12142 ) *C13546 ) /2.0 )  ) + (  ( C12727*C12301 ) *C12930 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 0] +=  (  ( gx101210*cnst33 ) - ( gx101030*cnst24 )  ) *cc;
    gx[(Ai + 3) * matrix_size + Bi + 2] += - ( cc* (  ( gx101030*cnst36 ) + (  ( gx101210*cnst36 ) + ( gx101012*cnst34 )  )  )  ) ;
    double gx011111 =  (  (  ( C12205*C12837 ) *C13001 ) - (  ( C12678* ( C13001*C12774 )  ) /2.0 )  ) + (  ( C12205*C12774 ) *C13064 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 1] += gx011111*cnst9;
    double gx020102 =  (  (  ( C12205*C12707 ) *C12559 ) - (  ( C12678* ( C12677*C12559 )  ) /2.0 )  ) + (  ( C12205*C12677 ) *C12598 ) ;
    double cnst951 =  (  (  ( C12205*C12954 ) *C12824 ) /C12145 ) - (  ( C12678* ( C12954*C12772 )  ) /2.0 ) ;
    double gx020111 = cnst951+ ( C12568* ( C12205*C12772 )  ) ;
    double gx011102 =  (  ( C12205*C12140 ) *C13105 ) + (  ( C13041* ( C12205*C12689 )  ) - (  (  ( C12140*C13041 ) *C12678 ) /2.0 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 4] += cc* (  ( cnst34*gx011102 ) - (  ( cnst36*gx011300 ) + ( cnst36*gx011120 )  )  ) ;
    double gx020120 =  (  (  ( C12205*C12880 ) *C12187 ) - (  ( C12678*cnst226 ) /2.0 )  ) + (  ( C12205*C12826 ) *C12259 ) ;
    double C12250 =  (  ( C12159- (  ( be*C12132 ) *2 )  ) /C12161 ) - (  ( C12204*C12147 ) /C12145 ) ;
    double gx200012 =  (  ( C12727*C12250 ) *C12598 ) + (  (  ( C12471*C12250 ) *C12559 ) + (  (  ( C12727*C12559 ) *C13435 ) /2.0 )  ) ;
    double gx200021 =  ( C12568* ( C12462*C12250 )  ) + (  (  ( C12250*C12501 ) *C12954 ) + (  ( C13435* ( C12462*C12954 )  ) /2.0 )  ) ;
    double C12375 =  (  ( C12148*C12338 ) /C12145 ) + (  (  ( 4* ( C12250*ae )  ) + ( C12287*2 )  ) /C12161 ) ;
    double C13545 =  (  (  ( 6* ( C12375*ae )  ) + ( C13428+C12390 )  ) /C12161 ) + (  ( C12148*C12407 ) /C12145 ) ;
    double cnst1014 = C12250*C12187;
    double gx200030 =  ( C12259* ( C12250*C12481 )  ) + (  (  ( C13435*cnst57 ) /2.0 ) + (  ( cnst1014*C12510 ) /C12145 )  ) ;
    double gx200003 =  (  ( C12578* ( C12254*C12250 )  ) + (  ( C13435*cnst59 ) /2.0 )  ) + (  ( cnst1014*C12607 ) /C12145 ) ;
    double cnst1072 = C12187*C12132;
    double C12297 =  (  ( C12215-C12216 ) /C12161 ) + (  ( C12148*C12247 ) /C12145 ) ;
    double C13152 =  (  ( C12265+C12681 ) /C12161 ) + (  ( C12297*C12148 ) /C12145 ) ;
    double cnst1091 = C12187*C13152;
    double cnst1116 = C12297*C12187;
    double C13155 =  (  (  ( C12269+C12682 ) + (  ( C12297*ae ) *2 )  ) /C12161 ) + (  ( C12301*C12148 ) /C12145 ) ;
    double gx101300 =  (  ( C12142* ( C12254*C13155 )  ) - (  ( cnst119*C13606 ) /2.0 )  ) + ( C12930* ( C13155*C12187 )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 6] += cc* (  ( cnst24*gx101300 ) + ( gx101120*cnst33 )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 4] += cc* (  ( cnst34*gx101102 ) - (  ( cnst36*gx101300 ) + ( cnst36*gx101120 )  )  ) ;
    double gx110300 =  (  (  ( C13155*C12689 ) *C12187 ) - (  ( cnst427*C13606 ) /2.0 )  ) + ( C12259* ( C12140*C13155 )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 6] += cc* (  ( cnst24*gx110300 ) + ( gx110120*cnst33 )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 4] += cc* (  ( cnst34*gx110102 ) - (  ( gx110120*cnst36 ) + ( cnst36*gx110300 )  )  ) ;
    double C12228 = C12202+ (  ( C12187* ( std::pow(C12147 , 2) )  ) /C12175 ) ;
    double cnst1172 = C12228*C12187;
    double C12262 =  ( C12228*ae ) *2;
    double C12299 =  (  ( C12262+ ( C12204*2 )  ) /C12161 ) + (  ( C12250*C12148 ) /C12145 ) ;
    double cnst1185 =  (  ( C12148*C12375 ) /C12145 ) + (  (  ( cnst12*C12299 ) + ( C12338+ ( C12341*2 )  )  ) /C12161 ) ;
    double cnst1189 =  (  ( C13545*C12148 ) /C12145 ) + (  (  ( cnst40*cnst1185 ) + (  ( C12407*2 ) + ( C13546*2 )  )  ) /C12161 ) ;
    double gx200120 =  (  ( C12462*C12299 ) *C12259 ) + (  ( C12187* ( C12299*C12501 )  ) - (  ( cnst56*C12407 ) /2.0 )  ) ;
    double gx200102 =  (  ( C12187*C12299 ) *C12598 ) + (  (  ( C12254*C12299 ) *C12559 ) - (  ( cnst61*C12407 ) /2.0 )  ) ;
    double gx200111 =  (  (  ( C12471*C12299 ) *C12954 ) - (  (  ( C12727*C12954 ) *C12407 ) /2.0 )  ) + (  ( C12727*C12299 ) *C12568 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 1] += cc* (  ( gx002111*cnst41 ) - (  ( gx200111*cnst1 ) + ( gx020111*cnst1 )  )  ) ;
    double C12279 =  (  ( - ( C12200*2. )  ) /C12191 ) + (  ( C12228*C12148 ) /C12145 ) ;
    double C12349 =  (  (  (  ( C12279*ae ) *2 ) + ( C12269+C12250 )  ) /C12161 ) + (  ( C12148*C12299 ) /C12145 ) ;
    double gx200201 =  (  (  ( C12254*C12349 ) *C12954 ) - (  ( C13545*cnst49 ) /2.0 )  ) + ( C12568* ( C12187*C12349 )  ) ;
    double cnst1227 =  (  (  ( cnst3*gx200003 ) - ( gx200201*cnst2 )  ) - ( gx200021*cnst2 )  ) - ( gx020003*cnst3 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 3] += cc* (  ( gx020021*cnst2 ) + (  ( cnst2*gx020201 ) +cnst1227 )  ) ;
    double cnst1233 =  ( gx020021*cnst31 ) + (  (  ( gx200021*cnst31 ) - ( gx200201*cnst31 )  ) - ( gx020201*cnst31 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 5] += cc* (  (  ( gx002201*cnst6 ) +cnst1233 ) - ( gx002021*cnst6 )  ) ;
    double cnst1239 =  (  (  ( gx200201*cnst11 ) - ( gx200021*cnst11 )  ) - ( gx020201*cnst11 )  ) + ( gx020021*cnst11 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 5] += cnst1239*cc;
    double cnst1243 =  (  (  ( gx200201*0.75 ) + ( - ( 0.5*gx200003 )  )  ) + ( gx200021*0.75 )  ) - ( gx020003*0.5 ) ;
    double cnst1247 =  ( gx002003+ (  ( cnst1243+ ( gx020201*0.75 )  ) + ( gx020021*0.75 )  )  ) - ( gx002201*1.5 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 3] += cc* ( cnst1247- ( 1.5*gx002021 )  ) ;
    double gx200210 =  (  (  ( C12471*C12349 ) *C12187 ) - (  ( C13545*cnst43 ) /2.0 )  ) + ( C12259* ( C12727*C12349 )  ) ;
    double cnst1255 =  (  (  ( gx200210*cnst28 ) - ( gx200030*cnst26 )  ) + ( gx020030*cnst26 )  ) - ( gx020210*cnst28 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 0] += cc*cnst1255;
    double cnst1259 =  ( cnst20*gx020030 ) - (  (  ( gx200012*cnst4 ) + ( cnst20*gx200210 )  ) + ( cnst20*gx200030 )  ) ;
    gx[(Ai + 4) * matrix_size + Bi + 2] += cc* (  ( cnst1259+ ( gx020210*cnst20 )  ) + ( gx020012*cnst4 )  ) ;
    double cnst1265 =  ( gx020030*cnst22 ) + (  ( cnst10*gx200012 ) + (  ( gx200210*cnst22 ) + ( gx200030*cnst22 )  )  ) ;
    double cnst1268 =  (  ( cnst10*gx020012 ) + (  ( gx020210*cnst22 ) +cnst1265 )  ) - ( cnst39*gx002030 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 2] += cc* (  ( cnst1268- ( cnst39*gx002210 )  ) - ( gx002012*cnst7 )  ) ;
    double cnst1278 = C12187*C12279;
    double C12298 = C12279*2;
    double C12330 =  (  ( C12265+C12228 ) /C12161 ) + (  ( C12148*C12279 ) /C12145 ) ;
    double C12381 =  (  (  (  ( ae*C12330 ) *2 ) + (  ( C12301*2 ) + ( C12299*2 )  )  ) /C12161 ) + (  ( C12148*C12349 ) /C12145 ) ;
    double cnst1309 =  ( C12187* ( C12254*C12381 )  ) - (  ( cnst1189* ( std::pow(C12187 , 2) )  ) /2.0 ) ;
    double gx200300 = cnst1309+ ( C12259* ( C12187*C12381 )  ) ;
    double cnst1316 =  ( cnst20*gx020300 ) + (  ( cnst4*gx200102 ) - (  ( cnst20*gx200120 ) + ( cnst20*gx200300 )  )  ) ;
    gx[(Ai + 4) * matrix_size + Bi + 4] +=  (  ( cnst1316+ ( cnst20*gx020120 )  ) - ( gx020102*cnst4 )  ) *cc;
    double cnst1322 =  (  (  ( cnst26*gx200300 ) + ( gx200120*cnst28 )  ) - ( gx020300*cnst26 )  ) - ( gx020120*cnst28 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 6] += cc*cnst1322;
    double cnst1326 =  ( gx020300*cnst22 ) + (  (  ( gx200120*cnst22 ) + ( cnst22*gx200300 )  ) - ( cnst10*gx200102 )  ) ;
    double cnst1329 =  (  ( cnst1326+ ( gx020120*cnst22 )  ) - ( cnst10*gx020102 )  ) - ( cnst39*gx002300 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 4] += cc* (  ( gx002102*cnst7 ) + ( cnst1329- ( cnst39*gx002120 )  )  ) ;
    double C12370 =  (  ( C12148*C12330 ) /C12145 ) + (  ( C12298+ ( C12297*2 )  ) /C12161 ) ;
    double cnst1334 = C12370*C12187;
    double cnst1343 = C12187*C12330;
    double C12260 = C12187* ( ae- (  ( C12154* ( C12186+ ( std::pow( ( C12147/C12145 )  , 2) )  )  ) *2 )  ) ;
    double gz020021 =  (  (  ( C12187*C12880 ) *C12560 ) + ( C12560* ( C12260*C12826 )  )  ) - (  ( C12609*cnst226 ) /2.0 ) ;
    double gz002012 =  (  (  ( C12471*C12187 ) *C13070 ) + ( C13070* ( C12727*C12260 )  )  ) - (  ( cnst43*C13556 ) /2.0 ) ;
    double gz020030 =  (  (  ( C12260*C12865 ) *C12178 ) + ( C12178* ( C12187*C12890 )  )  ) + (  ( C13590*cnst249 ) /2.0 ) ;
    double gy011012 =  (  (  ( C12260*C12777 ) *C13041 ) - (  ( C12847*cnst128 ) /2.0 )  ) + (  ( C12187*C12777 ) *C13105 ) ;
    double gz020003 =  (  (  ( C12677*C12260 ) *C12600 ) + (  ( C12707*C12187 ) *C12600 )  ) - (  ( C13604*cnst181 ) /2.0 ) ;
    double gy002003 =  (  (  ( cnst133*C13433 ) /2.0 ) + (  ( C12177*C12260 ) *C13092 )  ) + ( C13117* ( C12177*C12187 )  ) ;
    double C12276 = C12260/C12161;
    double gz002003 =  (  ( C13101* ( C12254*C12187 )  ) + ( C13101* ( C12260*C12187 )  )  ) - (  ( cnst42*cnst115 ) /2.0 ) ;
    double gy002021 =  (  ( C12999* ( C12260*C12482 )  ) - (  ( cnst123*C13548 ) /2.0 )  ) + (  ( C13051*cnst299 ) /C12145 ) ;
    double gy020030 =  ( C12259* ( C12187*C12874 )  ) + (  (  ( C12260*C12874 ) *C12187 ) - (  ( cnst42*cnst420 ) /2.0 )  ) ;
    double gz011012 =  (  ( C13044* ( C12187*C12837 )  ) + ( C13044* ( C12260*C12774 )  )  ) - (  ( cnst222*C13557 ) /2.0 ) ;
    double gy002012 =  ( C13107* ( C12463*C12187 )  ) + (  (  ( C12463*C12260 ) *C13053 ) - (  ( cnst136*C12512 ) /2.0 )  ) ;
    double gy020003 =  (  ( C12578* ( C12685*C12260 )  ) + (  ( C13452*cnst59 ) /2.0 )  ) + (  ( C12607*cnst362 ) /C12145 ) ;
    double gy011003 =  ( C13238* ( C12187*C12464 )  ) + (  (  ( C12260*C12464 ) *C13229 ) + (  ( cnst137*C13470 ) /2.0 )  ) ;
    double gz002021 =  (  (  ( C12187*C12501 ) *C13033 ) + ( C13033* ( C12462*C12260 )  )  ) - (  ( cnst56*C13102 ) /2.0 ) ;
    double gz011030 =  (  (  ( C12187*C13189 ) *C13434 ) + ( C13434* ( C12260*C13180 )  )  ) + (  ( C13475*cnst245 ) /2.0 ) ;
    double gy011030 =  ( C12930* ( C12187*C13185 )  ) + (  (  ( C12260*C13185 ) *C12142 ) - (  ( cnst119*C13607 ) /2.0 )  ) ;
    double gy020012 =  (  (  ( C12260*C12806 ) *C12559 ) - (  ( cnst61*C12875 ) /2.0 )  ) + (  ( C12187*C12806 ) *C12598 ) ;
    double gy011021 =  (  ( C13001* ( C12260*C12817 )  ) - (  ( C13555*cnst127 ) /2.0 )  ) + ( C13064* ( C12187*C12817 )  ) ;
    double gz020012 =  (  (  ( C12824*cnst80 ) /C12145 ) + ( C12579* ( C12260*C12772 )  )  ) - (  ( cnst200*C13550 ) /2.0 ) ;
    double gz011003 =  (  (  ( C12187*C12689 ) *C13234 ) + (  ( C12140*C12260 ) *C13234 )  ) - (  ( C13608*cnst427 ) /2.0 ) ;
    double gy002030 =  (  ( C12503*C12187 ) *C12938 ) + (  ( C12925* ( C12260*C12503 )  ) - (  ( cnst69*C13603 ) /2.0 )  ) ;
    double gz011021 =  (  (  ( C12260*C12814 ) *C13004 ) + ( C13004* ( C12187*C12878 )  )  ) - (  ( C13074*cnst241 ) /2.0 ) ;
    double gz002030 =  (  (  ( cnst118*C12510 ) /C12145 ) + ( C12929* ( C12260*C12481 )  )  ) + (  ( C13460*cnst57 ) /2.0 ) ;
    double C12313 =  (  ( C12260*C12148 ) /C12145 ) + (  ( ae*C12231 ) /C12175 ) ;
    double gy002120 =  (  ( C12215*C12482 ) *C12938 ) + (  ( C12925* ( C12313*C12482 )  ) - (  (  ( C12925*C12215 ) *C13548 ) /2.0 )  ) ;
    double gz020111 =  (  (  (  ( C12215*C12560 ) *C12824 ) /C12145 ) + ( C12560* ( C12313*C12772 )  )  ) - (  ( C12609* ( C12215*C12772 )  ) /2.0 ) ;
    double gz020102 =  (  (  ( C12677*C12313 ) *C12579 ) + (  ( C12707*C12215 ) *C12579 )  ) - (  (  ( C12677*C12215 ) *C13550 ) /2.0 ) ;
    double gy020111 =  ( C12568* ( C12215*C12806 )  ) + (  (  ( C12313*C12806 ) *C12954 ) - (  (  ( C12215*C12954 ) *C12875 ) /2.0 )  ) ;
    double gz011120 =  (  ( C13434* ( C12313*C12814 )  ) + ( C13434* ( C12215*C12878 )  )  ) + (  (  ( C12215*C12814 ) *C13475 ) /2.0 ) ;
    double gz002120 =  (  (  ( C12462*C12215 ) *C13460 ) /2.0 ) + (  ( C12929* ( C12462*C12313 )  ) + (  ( C12215*C12501 ) *C12929 )  ) ;
    double gy002111 =  (  (  ( C12463*C12313 ) *C12999 ) - (  (  ( C12215*C12999 ) *C12512 ) /2.0 )  ) + (  ( C13051* ( C12463*C12215 )  ) /C12145 ) ;
    double gz002111 =  (  (  ( C12471*C12215 ) *C13033 ) + (  ( C12727*C12313 ) *C13033 )  ) - (  (  ( C12727*C12215 ) *C13102 ) /2.0 ) ;
    double gz002102 =  (  (  ( C12254*C12215 ) *C13070 ) + (  ( C12187*C12313 ) *C13070 )  ) - (  ( cnst46*C13556 ) /2.0 ) ;
    double gy002102 =  (  (  ( C12177*C12313 ) *C13053 ) + (  (  ( C12215*C13053 ) *C13433 ) /2.0 )  ) + ( C13107* ( C12177*C12215 )  ) ;
    double gz020120 =  (  (  ( C12826*C12313 ) *C12178 ) + ( C12178* ( C12215*C12880 )  )  ) + (  ( C13590* ( C12215*C12826 )  ) /2.0 ) ;
    double gy020102 =  (  (  ( C12685*C12313 ) *C12559 ) + (  (  ( C12215*C12559 ) *C13452 ) /2.0 )  ) + ( C12598* ( C12685*C12215 )  ) ;
    double gy011120 =  ( C12930* ( C12215*C12817 )  ) + (  ( C12142* ( C12313*C12817 )  ) - (  ( C13555* ( C12215*C12142 )  ) /2.0 )  ) ;
    double gy020120 =  (  (  ( C12843*C12313 ) *C12187 ) - (  ( cnst46*C13554 ) /2.0 )  ) + (  ( C12215*C12843 ) *C12259 ) ;
    double gz011111 =  (  ( C13004* ( C12215*C12837 )  ) + ( C13004* ( C12313*C12774 )  )  ) - (  ( C13074* ( C12215*C12774 )  ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 1] += gz011111*cnst9;
    double C12708 =  ( C12276+ (  ( C12148*C12313 ) /C12145 )  ) + (  (  (  (  ( be*C12681 ) *2 ) -C12187 ) *ae ) /C12145 ) ;
    double gy002210 =  (  ( C12463*C12681 ) *C12938 ) + (  ( C12925* ( C12463*C12708 )  ) - (  ( C12512* ( C12925*C12681 )  ) /2.0 )  ) ;
    double gy011210 =  (  ( C12142* ( C12777*C12708 )  ) - (  (  ( C12142*C12681 ) *C12847 ) /2.0 )  ) + ( C12930* ( C12777*C12681 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 0] += cc* (  ( gy011210*cnst33 ) - ( gy011030*cnst24 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 2] += - ( cc* (  (  ( gy011210*cnst36 ) + ( cnst34*gy011012 )  ) + ( gy011030*cnst36 )  )  ) ;
    double gz002210 =  (  ( C13460* ( C12727*C12681 )  ) /2.0 ) + (  (  ( C12727*C12708 ) *C12929 ) + ( C12929* ( C12471*C12681 )  )  ) ;
    double gy020201 =  ( C12568* ( C12685*C12681 )  ) + (  (  ( C13452* ( C12954*C12681 )  ) /2.0 ) + (  ( C12685*C12708 ) *C12954 )  ) ;
    double gy020210 =  (  (  ( C12708*C12806 ) *C12187 ) - (  ( cnst52*C12875 ) /2.0 )  ) + (  ( C12806*C12681 ) *C12259 ) ;
    double gz020210 =  (  (  ( C12824* ( C12178*C12681 )  ) /C12145 ) + ( C12178* ( C12708*C12772 )  )  ) + (  (  ( C12772*C12681 ) *C13590 ) /2.0 ) ;
    double gy011201 =  (  (  (  ( C13001*C12681 ) *C13470 ) /2.0 ) + (  ( C12464*C12708 ) *C13001 )  ) + (  ( C12464*C12681 ) *C13064 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 5] += cc* (  ( cnst0*gy011201 ) - ( cnst0*gy011021 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 3] += cc* (  (  ( gy011003*cnst37 ) - ( cnst5*gy011201 )  ) - ( cnst5*gy011021 )  ) ;
    double gz011210 =  (  ( C13434* ( C12837*C12681 )  ) + ( C13434* ( C12774*C12708 )  )  ) + (  (  ( C12774*C12681 ) *C13475 ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 2] += - ( cc* (  ( cnst36*gz011030 ) + (  ( gz011210*cnst36 ) + ( gz011012*cnst34 )  )  )  ) ;
    gz[(Ai + 1) * matrix_size + Bi + 0] += cc* (  ( gz011210*cnst33 ) - ( cnst24*gz011030 )  ) ;
    double C12713 =  ( C12313+ ( C12148*C12708 )  ) + (  (  (  ( be*C12697 ) *2 ) - ( C12646/C12145 )  ) *ae ) ;
    double gz002300 =  (  ( C13460*cnst51 ) /2.0 ) + (  (  ( cnst118*C12713 ) /C12145 ) + (  ( C12254*C12697 ) *C12929 )  ) ;
    double cnst1616 =  (  ( C12713* ( cnst68*C12157 )  ) /C12145 ) + (  ( C13433* ( C12925*C12697 )  ) /2.0 ) ;
    double gy002300 = cnst1616+ ( C12938* ( C12177*C12697 )  ) ;
    double gz011300 =  (  (  ( C12713* ( C12140*C13434 )  ) /C12145 ) + ( C13434* ( C12697*C12689 )  )  ) + (  ( C13475* ( C12140*C12697 )  ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 6] += cc* (  ( gz011300*cnst24 ) + ( gz011120*cnst33 )  ) ;
    double cnst1628 =  (  ( C12713* ( C12464*C12142 )  ) /C12145 ) + (  ( C13470* ( C12697*C12142 )  ) /2.0 ) ;
    double gy011300 =  ( C12930* ( C12464*C12697 )  ) +cnst1628;
    gy[(Ai + 1) * matrix_size + Bi + 6] += cc* (  ( gy011120*cnst33 ) + ( cnst24*gy011300 )  ) ;
    double gz020300 =  (  ( C13590* ( C12677*C12697 )  ) /2.0 ) + (  (  ( C12713* ( C12677*C12178 )  ) /C12145 ) + ( C12178* ( C12707*C12697 )  )  ) ;
    double gy020300 =  (  ( C12685*C12697 ) *C12259 ) + (  (  ( C12713*cnst362 ) /C12145 ) + (  ( cnst51*C13452 ) /2.0 )  ) ;
    double gz011201 =  (  ( C13004* ( C12140*C12708 )  ) + ( C13004* ( C12689*C12681 )  )  ) - (  ( C13074* ( C12140*C12681 )  ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 5] +=  (  ( gz011201*cnst0 ) - ( cnst0*gz011021 )  ) *cc;
    gz[(Ai + 1) * matrix_size + Bi + 3] += cc* (  (  ( gz011003*cnst37 ) - ( cnst5*gz011201 )  ) - ( cnst5*gz011021 )  ) ;
    double gz020201 =  (  (  ( C12707*C12681 ) *C12560 ) + (  ( C12677*C12708 ) *C12560 )  ) - (  ( C12609* ( C12677*C12681 )  ) /2.0 ) ;
    double gz002201 =  (  ( C13033* ( C12187*C12708 )  ) + ( C13033* ( C12254*C12681 )  )  ) - (  ( cnst52*C13102 ) /2.0 ) ;
    double gy002201 =  (  ( C13051* ( C12177*C12681 )  ) /C12145 ) + (  (  ( C13433* ( C12999*C12681 )  ) /2.0 ) + (  ( C12177*C12708 ) *C12999 )  ) ;
    double gy011111 =  ( C13064* ( C12215*C12777 )  ) + (  ( C13001* ( C12313*C12777 )  ) - (  ( C12847* ( C12215*C13001 )  ) /2.0 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 1] += gy011111*cnst9;
    double gz011102 =  (  ( C13044* ( C12140*C12313 )  ) + (  ( C12215*C12689 ) *C13044 )  ) - (  (  ( C12140*C12215 ) *C13557 ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 4] += cc* (  ( cnst34*gz011102 ) - (  ( cnst36*gz011120 ) + ( gz011300*cnst36 )  )  ) ;
    double gy011102 =  ( C13105* ( C12215*C12464 )  ) + (  (  ( C13470* ( C12215*C13041 )  ) /2.0 ) + (  ( C12313*C12464 ) *C13041 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 4] += cc* (  ( cnst34*gy011102 ) - (  ( cnst36*gy011120 ) + ( cnst36*gy011300 )  )  ) ;
    double C12308 =  (  (  ( -C12231 ) *be ) /C12175 ) - (  ( C12260*C12147 ) /C12145 ) ;
    double gy101003 =  (  ( C13229* ( C12177*C12308 )  ) + (  ( C13433* ( C13229*C12132 )  ) /2.0 )  ) +cnst494;
    double C12367 =  (  (  ( C12308*C12148 ) /C12145 ) +C12276 ) + (  (  (  ( be*C12247 ) *ae ) *2 ) /C12145 ) ;
    double gy110102 =  ( C12598* ( C12464*C12247 )  ) + (  (  ( C12367*C12464 ) *C12559 ) + (  ( C13470* ( C12247*C12559 )  ) /2.0 )  ) ;
    double gy101120 =  ( C12930* ( C12247*C12482 )  ) + (  (  ( C12367*C12482 ) *C12142 ) - (  (  ( C12142*C12247 ) *C13548 ) /2.0 )  ) ;
    double C12377 = C12367*2;
    double gz110111 =  (  (  ( C12367*C12774 ) *C12560 ) + (  ( C12247*C12837 ) *C12560 )  ) - (  ( C12609* ( C12774*C12247 )  ) /2.0 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 1] += cnst9*gz110111;
    double gy101111 =  (  (  ( C12463*C12367 ) *C13001 ) - (  (  ( C13001*C12247 ) *C12512 ) /2.0 )  ) + (  ( C12463*C12247 ) *C13064 ) ;
    gy[(Ai + 3) * matrix_size + Bi + 1] += gy101111*cnst9;
    double gz101120 =  (  (  ( C12462*C12247 ) *C13475 ) /2.0 ) + (  ( C13434* ( C12247*C12501 )  ) + ( C13434* ( C12462*C12367 )  )  ) ;
    double gz110120 =  (  ( C12178* ( C12367*C12814 )  ) + (  ( C12247*C12878 ) *C12178 )  ) + (  ( C13590* ( C12247*C12814 )  ) /2.0 ) ;
    double gy110120 =  ( C12259* ( C12247*C12817 )  ) + (  (  ( C12367*C12817 ) *C12187 ) - (  ( cnst476*C13555 ) /2.0 )  ) ;
    double gy101102 =  ( C13105* ( C12177*C12247 )  ) + (  ( C13041* ( C12177*C12367 )  ) + (  ( C13433* ( C13041*C12247 )  ) /2.0 )  ) ;
    double gz101111 =  (  ( C13004* ( C12727*C12367 )  ) + ( C13004* ( C12471*C12247 )  )  ) - (  ( C13074* ( C12727*C12247 )  ) /2.0 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 1] += gz101111*cnst9;
    double gz101102 =  (  ( C13044* ( C12367*C12187 )  ) + ( C13044* ( C12254*C12247 )  )  ) - (  ( cnst476*C13557 ) /2.0 ) ;
    double gz110102 =  (  (  ( C12140*C12367 ) *C12579 ) + (  ( C12247*C12689 ) *C12579 )  ) - (  (  ( C12140*C12247 ) *C13550 ) /2.0 ) ;
    double gy110111 =  (  ( C12954* ( C12367*C12777 )  ) - (  (  ( C12954*C12247 ) *C12847 ) /2.0 )  ) + (  ( C12777*C12247 ) *C12568 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 1] += gy110111*cnst9;
    double gy110030 =  ( C12259* ( C13185*C12132 )  ) + (  ( C12187* ( C12308*C13185 )  ) - (  ( cnst1072*C13607 ) /2.0 )  ) ;
    double gy101012 =  ( C13105* ( C12463*C12132 )  ) + (  (  ( C12463*C12308 ) *C13041 ) - (  (  ( C13041*C12132 ) *C12512 ) /2.0 )  ) ;
    double gz110003 =  (  (  ( C12689*C12132 ) *C12600 ) + (  ( C12140*C12308 ) *C12600 )  ) - (  ( C13604* ( C12140*C12132 )  ) /2.0 ) ;
    double gz101030 =  (  (  ( C12308*C12481 ) *C13434 ) + (  ( C12510* ( C13434*C12132 )  ) /C12145 )  ) + (  (  ( C12481*C12132 ) *C13475 ) /2.0 ) ;
    double gy101021 =  (  ( C13001* ( C12308*C12482 )  ) - (  (  ( C13001*C12132 ) *C13548 ) /2.0 )  ) + (  ( C12482*C12132 ) *C13064 ) ;
    double gz110012 =  (  (  ( C12308*C12774 ) *C12579 ) + ( C12579* ( C12837*C12132 )  )  ) - (  (  ( C12774*C12132 ) *C13550 ) /2.0 ) ;
    double gz101012 =  (  ( C13044* ( C12471*C12132 )  ) + (  ( C12727*C12308 ) *C13044 )  ) - (  (  ( C12727*C12132 ) *C13557 ) /2.0 ) ;
    double C12366 =  (  (  ( C12262-C12187 ) *be ) /C12145 ) + ( C12276- (  ( C12308*C12147 ) /C12145 )  ) ;
    double gy200021 =  ( C12568* ( C12228*C12482 )  ) + (  ( C12954* ( C12366*C12482 )  ) - (  (  ( C12228*C12954 ) *C13548 ) /2.0 )  ) ;
    double gz200003 =  (  ( C12600* ( C12187*C12366 )  ) + (  ( C12254*C12228 ) *C12600 )  ) - (  ( cnst1172*C13604 ) /2.0 ) ;
    double gz200030 =  (  ( C13590* ( C12228*C12481 )  ) /2.0 ) + (  (  ( C12366*C12481 ) *C12178 ) + (  (  ( C12228*C12178 ) *C12510 ) /C12145 )  ) ;
    double gy200030 =  ( C12259* ( C12228*C12503 )  ) + (  (  ( C12503*C12366 ) *C12187 ) - (  ( cnst1172*C13603 ) /2.0 )  ) ;
    double C12393 =  (  (  ( be*C12279 ) *ae ) *2 ) + (  ( C12148*C12366 ) +C12308 ) ;
    double cnst1797 =  (  (  ( C12463*C12954 ) *C12393 ) /C12145 ) - (  ( C12512* ( C12279*C12954 )  ) /2.0 ) ;
    double gy200111 = cnst1797+ ( C12568* ( C12463*C12279 )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 1] += cc* (  ( gy002111*cnst41 ) - (  ( gy200111*cnst1 ) + ( gy020111*cnst1 )  )  ) ;
    double gy200120 =  (  (  ( cnst299*C12393 ) /C12145 ) - (  ( cnst1278*C13548 ) /2.0 )  ) + ( C12259* ( C12279*C12482 )  ) ;
    double gz200120 =  (  ( C13590* ( C12462*C12279 )  ) /2.0 ) + (  (  (  ( C12462*C12178 ) *C12393 ) /C12145 ) + ( C12178* ( C12279*C12501 )  )  ) ;
    double cnst1815 =  (  ( C13433* ( C12279*C12559 )  ) /2.0 ) + (  (  ( cnst62*C12157 ) *C12393 ) /C12145 ) ;
    double gy200102 =  ( C12598* ( C12177*C12279 )  ) +cnst1815;
    double gz200111 =  (  (  (  ( C12727*C12560 ) *C12393 ) /C12145 ) + (  ( C12471*C12279 ) *C12560 )  ) - (  ( C12609* ( C12727*C12279 )  ) /2.0 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 1] += cc* (  ( gz002111*cnst41 ) - (  ( gz200111*cnst1 ) + ( gz020111*cnst1 )  )  ) ;
    double gz200102 =  (  (  ( cnst80*C12393 ) /C12145 ) + ( C12579* ( C12254*C12279 )  )  ) - (  ( cnst1278*C13550 ) /2.0 ) ;
    double gz200012 =  (  ( C12579* ( C12471*C12228 )  ) + ( C12579* ( C12727*C12366 )  )  ) - (  (  ( C12727*C12228 ) *C13550 ) /2.0 ) ;
    double C12410 =  (  (  ( C12377+C12366 ) /C12161 ) + (  ( C12148*C12393 ) /C12175 )  ) + (  ( ae* (  ( 2* ( be*C12330 )  ) -C12228 )  ) /C12145 ) ;
    double gz200210 =  (  ( C13590* ( C12727*C12330 )  ) /2.0 ) + (  (  ( C12471*C12330 ) *C12178 ) + ( C12178* ( C12727*C12410 )  )  ) ;
    double cnst1840 =  (  ( cnst10*gz200012 ) + (  ( gz200030*cnst22 ) + ( cnst22*gz200210 )  )  ) + ( cnst22*gz020030 ) ;
    double cnst1843 =  (  (  ( cnst22*gz020210 ) +cnst1840 ) + ( cnst10*gz020012 )  ) - ( gz002030*cnst39 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 2] += cc* (  ( cnst1843- ( gz002210*cnst39 )  ) - ( cnst7*gz002012 )  ) ;
    double cnst1849 =  (  (  ( cnst28*gz200210 ) - ( gz200030*cnst26 )  ) + ( cnst26*gz020030 )  ) - ( gz020210*cnst28 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 0] += cc*cnst1849;
    double cnst1853 =  ( cnst20*gz020030 ) - (  ( cnst20*gz200030 ) + (  ( cnst20*gz200210 ) + ( gz200012*cnst4 )  )  ) ;
    gz[(Ai + 4) * matrix_size + Bi + 2] += cc* (  ( cnst4*gz020012 ) + (  ( cnst20*gz020210 ) +cnst1853 )  ) ;
    double gy200201 =  ( C12568* ( C12177*C12330 )  ) + (  ( C12954* ( C12177*C12410 )  ) + (  ( C13433* ( C12954*C12330 )  ) /2.0 )  ) ;
    double gy200210 =  (  (  ( C12463*C12410 ) *C12187 ) - (  ( cnst1343*C12512 ) /2.0 )  ) + (  ( C12463*C12330 ) *C12259 ) ;
    double cnst1874 =  (  (  ( gy200210*cnst28 ) - ( gy200030*cnst26 )  ) + ( cnst26*gy020030 )  ) - ( gy020210*cnst28 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 0] += cc*cnst1874;
    double gz200201 =  (  (  ( C12254*C12330 ) *C12560 ) + (  ( C12410*C12187 ) *C12560 )  ) - (  ( C12609*cnst1343 ) /2.0 ) ;
    double gz200021 =  (  (  ( C12462*C12366 ) *C12560 ) + (  ( C12228*C12501 ) *C12560 )  ) - (  ( C12609* ( C12462*C12228 )  ) /2.0 ) ;
    double cnst1891 =  (  (  ( - ( 0.5*gz200003 )  ) + ( gz200201*0.75 )  ) + ( gz200021*0.75 )  ) - ( 0.5*gz020003 ) ;
    double cnst1895 =  (  (  (  ( gz020201*0.75 ) +cnst1891 ) + ( gz020021*0.75 )  ) +gz002003 ) - ( gz002201*1.5 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 3] += cc* ( cnst1895- ( gz002021*1.5 )  ) ;
    double cnst1899 =  (  (  ( cnst3*gz200003 ) - ( cnst2*gz200201 )  ) - ( gz200021*cnst2 )  ) - ( cnst3*gz020003 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 3] += cc* (  (  ( gz020201*cnst2 ) +cnst1899 ) + ( gz020021*cnst2 )  ) ;
    double cnst1905 =  ( gz020021*cnst11 ) + (  (  ( cnst11*gz200201 ) - ( gz200021*cnst11 )  ) - ( gz020201*cnst11 )  ) ;
    gz[(Ai + 4) * matrix_size + Bi + 5] += cc*cnst1905;
    double cnst1909 =  (  (  ( gz200021*cnst31 ) - ( gz200201*cnst31 )  ) - ( gz020201*cnst31 )  ) + ( gz020021*cnst31 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 5] += cc* (  ( cnst1909+ ( gz002201*cnst6 )  ) - ( gz002021*cnst6 )  ) ;
    double gy200003 =  (  (  ( C13433* ( C12578*C12228 )  ) /2.0 ) + ( C12578* ( C12177*C12366 )  )  ) + (  (  ( C12177*C12228 ) *C12607 ) /C12145 ) ;
    double cnst1919 =  (  ( gy200021*0.75 ) + (  ( - ( 0.5*gy200003 )  ) + ( gy200201*0.75 )  )  ) - ( 0.5*gy020003 ) ;
    double cnst1924 =  (  (  ( cnst3*gy200003 ) - ( cnst2*gy200201 )  ) - ( gy200021*cnst2 )  ) - ( cnst3*gy020003 ) ;
    double gy200012 =  (  (  ( C12463*C12366 ) *C12559 ) - (  (  ( C12228*C12559 ) *C12512 ) /2.0 )  ) + ( C12598* ( C12463*C12228 )  ) ;
    double cnst1932 =  ( cnst20*gy020030 ) - (  (  ( gy200012*cnst4 ) + ( cnst20*gy200210 )  ) + ( cnst20*gy200030 )  ) ;
    gy[(Ai + 4) * matrix_size + Bi + 2] += cc* (  ( cnst1932+ ( gy020210*cnst20 )  ) + ( cnst4*gy020012 )  ) ;
    double cnst1937 =  (  ( gy200012*cnst10 ) + (  ( gy200030*cnst22 ) + ( gy200210*cnst22 )  )  ) + ( cnst22*gy020030 ) ;
    double cnst1940 =  (  ( cnst10*gy020012 ) + (  ( gy020210*cnst22 ) +cnst1937 )  ) - ( gy002030*cnst39 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 2] +=  (  ( cnst1940- ( gy002210*cnst39 )  ) - ( cnst7*gy002012 )  ) *cc;
    double gy101030 =  ( C12930* ( C12503*C12132 )  ) + (  ( C12142* ( C12308*C12503 )  ) - (  (  ( C12142*C12132 ) *C13603 ) /2.0 )  ) ;
    double C12399 =  (  (  ( C12308+C12313 ) /C12161 ) + (  ( C12367*C12148 ) /C12145 )  ) + (  (  ( C12216+ (  ( C12297*be ) *2 )  ) *ae ) /C12145 ) ;
    double gz101210 =  (  ( C13475* ( C12727*C12297 )  ) /2.0 ) + (  ( C13434* ( C12727*C12399 )  ) + ( C13434* ( C12471*C12297 )  )  ) ;
    gz[(Ai + 3) * matrix_size + Bi + 2] += - ( cc* (  (  ( cnst34*gz101012 ) + ( gz101210*cnst36 )  ) + ( cnst36*gz101030 )  )  ) ;
    gz[(Ai + 3) * matrix_size + Bi + 0] += cc* (  ( gz101210*cnst33 ) - ( cnst24*gz101030 )  ) ;
    double gy101201 =  ( C13064* ( C12297*C12177 )  ) + (  (  ( C13433* ( C12297*C13001 )  ) /2.0 ) + ( C13001* ( C12177*C12399 )  )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 3] += cc* (  (  ( cnst37*gy101003 ) - ( cnst5*gy101201 )  ) - ( cnst5*gy101021 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 5] += cc* (  ( cnst0*gy101201 ) - ( cnst0*gy101021 )  ) ;
    double C13160 =  (  (  (  (  ( be*C13152 ) *2 ) -C12265 ) *ae ) /C12145 ) + (  (  ( C12377+C12708 ) /C12161 ) + (  ( C12399*C12148 ) /C12145 )  ) ;
    double cnst1966 = C12142* ( C12177*C13160 ) ;
    double gz110300 =  (  ( C13590* ( C12140*C13152 )  ) /2.0 ) + ( cnst1966+ (  ( C12689*C13152 ) *C12178 )  ) ;
    gz[(Ai + 0) * matrix_size + Bi + 4] += cc* (  ( cnst34*gz110102 ) - (  ( cnst36*gz110300 ) + ( gz110120*cnst36 )  )  ) ;
    gz[(Ai + 0) * matrix_size + Bi + 6] += cc* (  ( cnst24*gz110300 ) + ( gz110120*cnst33 )  ) ;
    double gy101300 =  (  ( C12177*C13152 ) *C12930 ) + ( cnst1966+ (  ( C13433* ( C12142*C13152 )  ) /2.0 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 4] += cc* (  ( cnst34*gy101102 ) - (  ( cnst36*gy101120 ) + ( cnst36*gy101300 )  )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 6] += cc* (  ( gy101120*cnst33 ) + ( cnst24*gy101300 )  ) ;
    double gy110300 =  (  (  ( C13470*cnst1091 ) /2.0 ) + (  ( C12464*C13160 ) *C12187 )  ) + ( C12259* ( C12464*C13152 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 6] += cc* (  ( gy110120*cnst33 ) + ( cnst24*gy110300 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 4] += cc* (  ( gy110102*cnst34 ) - (  ( gy110300*cnst36 ) + ( cnst36*gy110120 )  )  ) ;
    double gz101300 =  (  ( C13434* ( C12187*C13160 )  ) + ( C13434* ( C12254*C13152 )  )  ) + (  ( cnst1091*C13475 ) /2.0 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 6] += cc* (  ( cnst24*gz101300 ) + ( cnst33*gz101120 )  ) ;
    gz[(Ai + 3) * matrix_size + Bi + 4] += cc* (  ( gz101102*cnst34 ) - (  ( gz101300*cnst36 ) + ( cnst36*gz101120 )  )  ) ;
    double gy110210 =  (  ( C12297*C12777 ) *C12259 ) + (  (  ( C12399*C12777 ) *C12187 ) - (  ( cnst1116*C12847 ) /2.0 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 0] += cc* (  ( gy110210*cnst33 ) - ( gy110030*cnst24 )  ) ;
    double C12414 =  (  (  (  ( 2*C12393 ) /C12145 ) + ( C12399*2 )  ) /C12161 ) + (  ( C12410*C12148 ) /C12145 ) ;
    double C12415 =  (  (  (  (  ( C12370*be ) *2 ) -C12298 ) *ae ) /C12145 ) +C12414;
    double gz200300 =  (  ( C12178* ( C12187*C12415 )  ) + (  ( C12370*C12254 ) *C12178 )  ) + (  ( C13590*cnst1334 ) /2.0 ) ;
    double cnst2007 =  ( cnst22*gz020300 ) + (  (  ( cnst22*gz200120 ) + ( gz200300*cnst22 )  ) - ( gz200102*cnst10 )  ) ;
    double cnst2010 =  (  (  ( gz020120*cnst22 ) +cnst2007 ) - ( cnst10*gz020102 )  ) - ( gz002300*cnst39 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 4] += cc* (  ( cnst7*gz002102 ) + ( cnst2010- ( cnst39*gz002120 )  )  ) ;
    double cnst2016 =  ( cnst20*gz020300 ) + (  ( gz200102*cnst4 ) - (  ( cnst20*gz200300 ) + ( cnst20*gz200120 )  )  ) ;
    gz[(Ai + 4) * matrix_size + Bi + 4] += cc* (  ( cnst2016+ ( cnst20*gz020120 )  ) - ( cnst4*gz020102 )  ) ;
    double cnst2022 =  (  (  ( gz200300*cnst26 ) + ( cnst28*gz200120 )  ) - ( cnst26*gz020300 )  ) - ( gz020120*cnst28 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 6] += cc*cnst2022;
    double gy200300 =  ( C12259* ( C12370*C12177 )  ) + (  (  ( cnst1334*C13433 ) /2.0 ) + (  ( C12177*C12415 ) *C12187 )  ) ;
    double cnst2030 =  (  (  ( cnst22*gy200120 ) + ( cnst22*gy200300 )  ) - ( cnst10*gy200102 )  ) + ( gy020300*cnst22 ) ;
    double cnst2033 =  (  (  ( gy020120*cnst22 ) +cnst2030 ) - ( cnst10*gy020102 )  ) - ( gy002300*cnst39 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 4] += cc* (  ( cnst2033- ( gy002120*cnst39 )  ) + ( cnst7*gy002102 )  ) ;
    double cnst2040 =  (  (  ( cnst26*gy200300 ) + ( cnst28*gy200120 )  ) - ( gy020300*cnst26 )  ) - ( gy020120*cnst28 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 6] += cc*cnst2040;
    double cnst2044 =  (  ( gy200102*cnst4 ) - (  ( cnst20*gy200300 ) + ( cnst20*gy200120 )  )  ) + ( cnst20*gy020300 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 4] += cc* (  (  ( cnst20*gy020120 ) +cnst2044 ) - ( cnst4*gy020102 )  ) ;
    double gz101201 =  (  ( C13004* ( C12297*C12254 )  ) + (  ( C12399*C12187 ) *C13004 )  ) - (  ( C13074*cnst1116 ) /2.0 ) ;
    double gy101210 =  ( C12930* ( C12297*C12463 )  ) + (  ( C12142* ( C12463*C12399 )  ) - (  ( C12512* ( C12297*C12142 )  ) /2.0 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 0] +=  (  ( gy101210*cnst33 ) - ( cnst24*gy101030 )  ) *cc;
    gy[(Ai + 3) * matrix_size + Bi + 2] += - (  (  (  ( cnst34*gy101012 ) + ( cnst36*gy101210 )  ) + ( cnst36*gy101030 )  ) *cc ) ;
    double gz110201 =  (  ( C12560* ( C12297*C12689 )  ) + (  ( C12140*C12399 ) *C12560 )  ) - (  (  ( C12297*C12140 ) *C12609 ) /2.0 ) ;
    double gz110210 =  (  (  ( C12399*C12774 ) *C12178 ) + ( C12178* ( C12297*C12837 )  )  ) + (  ( C13590* ( C12297*C12774 )  ) /2.0 ) ;
    double gy110201 =  ( C12568* ( C12297*C12464 )  ) + (  (  ( C12399*C12464 ) *C12954 ) + (  ( C13470* ( C12297*C12954 )  ) /2.0 )  ) ;
    double gz110021 =  (  (  ( C12308*C12814 ) *C12560 ) + (  ( C12878*C12132 ) *C12560 )  ) - (  (  ( C12814*C12132 ) *C12609 ) /2.0 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 5] += cc* (  ( cnst0*gz110201 ) - ( cnst0*gz110021 )  ) ;
    gz[(Ai + 0) * matrix_size + Bi + 3] += cc* (  (  ( gz110003*cnst37 ) - ( cnst5*gz110201 )  ) - ( cnst5*gz110021 )  ) ;
    double gz110030 =  (  (  ( C12308*C13180 ) *C12178 ) +cnst504 ) + (  ( C13590* ( C13180*C12132 )  ) /2.0 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 2] += - ( cc* (  ( cnst36*gz110030 ) + (  ( cnst34*gz110012 ) + ( cnst36*gz110210 )  )  )  ) ;
    gz[(Ai + 0) * matrix_size + Bi + 0] += cc* (  ( cnst33*gz110210 ) - ( cnst24*gz110030 )  ) ;
    double gy110021 =  (  (  ( C12308*C12817 ) *C12954 ) - (  (  ( C12954*C12132 ) *C13555 ) /2.0 )  ) + (  ( C12817*C12132 ) *C12568 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 5] += cc* (  ( gy110201*cnst0 ) - ( cnst0*gy110021 )  ) ;
    double gy110003 =  (  ( C12578* ( C12308*C12464 )  ) + (  ( C13470* ( C12578*C12132 )  ) /2.0 )  ) + (  (  ( C12464*C12132 ) *C12607 ) /C12145 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 3] += cc* (  (  ( cnst37*gy110003 ) - ( cnst5*gy110201 )  ) - ( cnst5*gy110021 )  ) ;
    double gy110012 =  (  (  ( C12308*C12777 ) *C12559 ) - (  ( C12847* ( C12559*C12132 )  ) /2.0 )  ) + ( C12598* ( C12777*C12132 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 2] += - ( cc* (  ( gy110030*cnst36 ) + (  ( cnst36*gy110210 ) + ( cnst34*gy110012 )  )  )  ) ;
    double gz101021 =  (  ( C13004* ( C12501*C12132 )  ) + ( C13004* ( C12462*C12308 )  )  ) - (  ( C13074* ( C12462*C12132 )  ) /2.0 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 5] += cc* (  ( gz101201*cnst0 ) - ( gz101021*cnst0 )  ) ;
    double gz101003 =  (  (  ( C12308*C12187 ) *C13234 ) + ( C13234* ( C12254*C12132 )  )  ) - (  ( cnst1072*C13608 ) /2.0 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 3] += cc* (  (  ( gz101003*cnst37 ) - ( cnst5*gz101201 )  ) - ( cnst5*gz101021 )  ) ;
    double gy020021 =  (  ( C12843*C12187 ) *C12568 ) + (  (  ( C12260*C12843 ) *C12954 ) - (  ( cnst49*C13554 ) /2.0 )  ) ;
    gy[(Ai + 4) * matrix_size + Bi + 3] += cc* (  (  ( cnst2*gy020201 ) +cnst1924 ) + ( cnst2*gy020021 )  ) ;
    double cnst2130 =  ( cnst11*gy020021 ) + (  (  ( cnst11*gy200201 ) - ( gy200021*cnst11 )  ) - ( cnst11*gy020201 )  ) ;
    gy[(Ai + 4) * matrix_size + Bi + 5] += cc*cnst2130;
    double cnst2132 =  ( cnst31*gy020021 ) + (  (  ( gy200021*cnst31 ) - ( gy200201*cnst31 )  ) - ( cnst31*gy020201 )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 5] += cc* (  (  ( cnst6*gy002201 ) +cnst2132 ) - ( gy002021*cnst6 )  ) ;
    double cnst2138 =  ( gy002003+ (  ( gy020021*0.75 ) + ( cnst1919+ ( gy020201*0.75 )  )  )  ) - ( 1.5*gy002201 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 3] +=  ( cnst2138- ( gy002021*1.5 )  ) *cc;
    double cnst2140 = std::sqrt(11.25);
    gx[(Ai + 4) * matrix_size + Bi + 1] += cc* (  ( cnst2140*gx200111 ) - ( cnst2140*gx020111 )  ) ;
    gy[(Ai + 4) * matrix_size + Bi + 1] += cc* (  ( gy200111*cnst2140 ) - ( gy020111*cnst2140 )  ) ;
    gz[(Ai + 4) * matrix_size + Bi + 1] += cc* (  ( gz200111*cnst2140 ) - ( cnst2140*gz020111 )  ) ;
    double cnst2151 = std::sqrt( ( 11.25/8.0 ) );
    double cnst2161 =  (  (  ( gy020120*cnst2151 ) + ( gy020300*cnst30 )  ) + ( cnst2151*gy200120 )  ) + ( gy200300*cnst30 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 6] += cc* (  (  ( gy002300*cnst14 ) -cnst2161 ) + ( gy002120*cnst18 )  ) ;
    double cnst2169 =  ( gz200300*cnst30 ) + (  ( cnst2151*gz200120 ) + (  ( gz020300*cnst30 ) + ( cnst2151*gz020120 )  )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 6] += cc* (  (  ( cnst14*gz002300 ) -cnst2169 ) + ( cnst18*gz002120 )  ) ;
    double cnst2176 =  (  ( gy020030*cnst30 ) + (  ( gy200030*cnst30 ) - ( cnst2151*gy200210 )  )  ) - ( gy020210*cnst2151 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 0] += cc* (  ( cnst2176- ( gy002030*cnst14 )  ) + ( gy002210*cnst16 )  ) ;
    double cnst2182 =  (  (  ( gz200030*cnst30 ) - ( cnst2151*gz200210 )  ) + ( gz020030*cnst30 )  ) - ( cnst2151*gz020210 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 0] +=  (  ( gz002210*cnst16 ) + ( cnst2182- ( cnst14*gz002030 )  )  ) *cc;
    double cnst2186 =  (  (  ( gx200030*cnst30 ) - ( gx200210*cnst2151 )  ) + ( gx020030*cnst30 )  ) - ( gx020210*cnst2151 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 0] += cc* (  ( cnst2186- ( cnst14*gx002030 )  ) + ( cnst16*gx002210 )  ) ;
    double cnst2191 =  ( gx200300*cnst30 ) + (  ( cnst2151*gx200120 ) + (  ( gx020120*cnst2151 ) + ( gx020300*cnst30 )  )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 6] += cc* (  (  ( cnst14*gx002300 ) -cnst2191 ) + ( cnst18*gx002120 )  ) ;
}
