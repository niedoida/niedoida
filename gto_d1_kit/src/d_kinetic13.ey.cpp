/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d1_kit/gto_d1.hpp"
#include <cmath>

namespace {
    static const double Pi = M_PI;
}

void kinetic_gradient_31(
double ae , 
double be , 
double cc , 
double xAB , 
double yAB , 
double zAB , 
double* const gx , 
double* const gy , 
double* const gz , 
std::size_t matrix_size , 
std::size_t Ai , 
std::size_t Bi ) 
{
    double C20929 = ae*zAB;
    double C20900 = yAB*ae;
    double C20746 = std::pow(ae , 2);
    double C20744 = xAB*ae;
    double cnst1 = std::sqrt( ( 45.0/8.0 ) );
    double cnst3 = std::sqrt( ( 5.0/8.0 ) );
    double cnst5 = std::sqrt( ( 3.0/8.0 ) );
    double cnst6 = std::sqrt(7.5);
    double cnst7 = std::sqrt(6.0);
    double cnst8 = 6*ae;
    double cnst10 =  ( std::sqrt(15.0) ) *cc;
    double cnst12 = std::sqrt( ( 45./8.0 ) );
    double C20741 = xAB*be;
    double cnst13 = be*4;
    double C20739 = be+ae;
    double C20761 = std::pow(C20739 , 2);
    double C20775 = C20761*2.;
    double C20752 = 2.*C20739;
    double C20770 = 1/C20752;
    double C20771 = std::sqrt( ( Pi/C20739 ) );
    double C20934 = C20771*C20929;
    double C20945 =  ( be*C20934 ) *2;
    double C20928 = C20934/C20739;
    double cnst14 = C20928*C20771;
    double cnst15 = C20771*C20771;
    double C20990 =  (  ( C20771*ae ) *2. ) /C20752;
    double C20947 =  ( - (  ( be*C20771 ) *2 )  ) /C20752;
    double C20905 = C20900*C20771;
    double C20899 = C20905/C20739;
    double cnst16 = C20771*C20899;
    double C20916 =  ( be*C20905 ) *2;
    double C20785 = C20771/C20752;
    double C20803 =  (  ( C20771* ( std::pow(C20741 , 2) )  ) /C20761 ) +C20785;
    double C21219 =  ( ae*C20803 ) *2;
    double cnst20 = C20771*C20803;
    double C20959 =  ( C20771*C20744 ) /C20739;
    double cnst21 = C20771*C20959;
    double C20782 = C20771*C20741;
    double C20995 =  ( ae*C20782 ) *2;
    double C20730 = - ( C20782/C20739 ) ;
    double cnst23 = C20771*C20730;
    double C20740 = C20730*ae;
    double C20755 = 2*C20740;
    double C21001 = C20990+ (  (  ( C20744*C20740 ) *2 ) /C20739 ) ;
    double C20786 = C20947- (  (  ( C20741*C20740 ) *2 ) /C20739 ) ;
    double C20794 = C20786*2;
    double C21312 =  (  ( C20744*C20786 ) /C20739 ) + (  ( 4.*C20740 ) /C20752 ) ;
    double cnst30 = C20771*C20786;
    double C20797 = C20786*ae;
    double C20809 = C20797*2;
    double C20849 =  ( - (  ( be*C20809 ) *6 )  ) /C20752;
    double C20842 =  (  ( - ( 4* ( be*C20755 )  )  ) /C20752 ) - (  (  ( C20741*C20797 ) *2 ) /C20739 ) ;
    double C20868 =  (  ( C20809- ( 4* ( be*C20786 )  )  ) /C20752 ) - (  ( C20842*C20741 ) /C20739 ) ;
    double C20850 = C20842*ae;
    double C21519 =  (  ( 6.* ( ae*C20809 )  ) /C20752 ) + (  ( 2* ( C20850*C20744 )  ) /C20739 ) ;
    double C20874 =  (  ( C20850*C20741 ) *2 ) /C20739;
    double C21470 = C20874-C20849;
    double C20879 = C20849-C20874;
    double C20886 =  ( C20879*C20741 ) /C20739;
    double C21437 = C20879*2;
    double C21515 =  ( C21437- ( 6* ( be*C20868 )  )  ) /C20752;
    double C20860 = C20850*2;
    double C20875 =  ( C20860- ( 6* ( be*C20842 )  )  ) /C20752;
    double C21459 = C20886-C20875;
    double C20889 = C20875-C20886;
    double C21532 =  (  ( C20889*C20744 ) /C20739 ) + (  (  ( 6* ( C20868*ae )  ) +C21437 ) /C20752 ) ;
    double C21475 =  ( C20889*C20741 ) /C20739;
    double C21529 = C21475-C21515;
    double C21452 = -C20860;
    double C21526 =  (  (  ( C20850*6 ) +C20860 ) /C20752 ) + (  ( C20879*C20744 ) /C20739 ) ;
    double C20819 =  (  ( C20755- (  ( be*C20730 ) *2 )  ) /C20752 ) - (  ( C20786*C20741 ) /C20739 ) ;
    double C20847 =  (  ( C20794- ( 2* ( be*C20803 )  )  ) /C20752 ) - (  ( C20819*C20741 ) /C20739 ) ;
    double cnst48 =  (  (  ( C20842*2 ) - ( cnst13*C20819 )  ) /C20752 ) - (  ( C20741*C20868 ) /C20739 ) ;
    double cnst52 =  (  ( C20744* ( C21515-C21475 )  ) /C20739 ) + (  (  ( C20889*3 ) + ( cnst48*cnst8 )  ) /C20752 ) ;
    double C21226 =  (  ( C20819*C20744 ) /C20739 ) + (  ( C20794+C21219 ) /C20752 ) ;
    double C20793 = - ( 2.*C20782 ) ;
    double C20804 = C20793/C20775;
    double C20838 = C20804- (  ( C20741*C20803 ) /C20739 ) ;
    double C20855 = 2* ( ae*C20838 ) ;
    double C20873 =  (  (  ( C20819*3 ) +C20855 ) /C20752 ) + (  ( C20847*C20744 ) /C20739 ) ;
    double cnst60 = C20771*C20838;
    double C20865 =  (  ( 3.*C20803 ) /C20752 ) + (  ( C20744*C20838 ) /C20739 ) ;
    double cnst62 = C20771*C20865;
    double C21223 =  (  ( C20744*C20803 ) /C20739 ) +C20804;
    double cnst64 = C20771*C21223;
    double C21314 = C20785- (  ( C20744*C20782 ) /C20761 ) ;
    double cnst65 = C20771*C21314;
    double C20826 = C20771* ( ae- (  ( C20746* ( C20770+ ( std::pow( ( C20741/C20739 )  , 2) )  )  ) *2 )  ) ;
    double C20836 = C20826/C20752;
    double C21019 =  (  ( C20995*ae ) /C20761 ) + (  ( C20744*C20826 ) /C20739 ) ;
    double C20853 =  (  (  ( -C20995 ) *be ) /C20761 ) - (  ( C20741*C20826 ) /C20739 ) ;
    double C20880 =  ( C20836- (  ( C20741*C20853 ) /C20739 )  ) + (  ( be* ( C21219-C20771 )  ) /C20739 ) ;
    double C21229 =  (  ( C20880*C20744 ) +C20853 ) + (  (  ( be*C21223 ) *ae ) *2 ) ;
    double C20891 =  (  ( C20853/C20739 ) - (  ( C20880*C20741 ) /C20739 )  ) + (  ( be* ( C20855- ( C20793/C20739 )  )  ) /C20739 ) ;
    double C20895 =  (  (  ( C20891*C20744 ) /C20739 ) + (  ( C20880*3 ) /C20752 )  ) + (  (  (  ( be*C20865 ) *ae ) *2 ) /C20739 ) ;
    double C21319 =  ( C20836+ (  ( C20744*C20853 ) /C20739 )  ) + (  (  ( ae* ( be*C21314 )  ) *2 ) /C20739 ) ;
    double C20747 = be*yAB;
    double C21003 = C20785+ (  ( C20771* ( std::pow(C20747 , 2) )  ) /C20761 ) ;
    double C21289 =  ( C21003*ae ) *2;
    double cnst90 = C20771*C21003;
    double C20820 =  ( ae- (  (  ( C20770+ ( std::pow( ( C20747/C20739 )  , 2) )  ) *C20746 ) *2 )  ) *C20771;
    double C21016 =  (  (  ( -C20916 ) *be ) /C20761 ) - (  ( C20747*C20820 ) /C20739 ) ;
    double C20964 = C20820/C20752;
    double C21037 =  (  ( be* ( C21289-C20771 )  ) /C20739 ) + ( C20964- (  ( C20747*C21016 ) /C20739 )  ) ;
    double C20924 =  (  ( C20916*ae ) /C20761 ) + (  ( C20900*C20820 ) /C20739 ) ;
    double cnst140 =  ( C20771* ( C20873*C20820 )  ) - (  (  ( std::pow(C20771 , 2) ) *cnst52 ) /2.0 ) ;
    double C20962 = C20747*C20771;
    double C20735 = - ( C20962/C20739 ) ;
    double cnst155 = C20771*C20735;
    double C20749 = C20735*ae;
    double C20764 = C20749*2;
    double C20921 = C20947- (  (  ( C20747*C20749 ) *2 ) /C20739 ) ;
    double cnst178 = C20771*C20921;
    double C21244 =  (  ( C20900*C20921 ) /C20739 ) + (  ( C20749*4. ) /C20752 ) ;
    double C20923 = C20921*ae;
    double C21014 =  (  ( - (  ( be*C20764 ) *4 )  ) /C20752 ) - (  (  ( C20747*C20923 ) *2 ) /C20739 ) ;
    double C21021 = C21014*ae;
    double C21059 = C21021*2;
    double C21440 = -C21059;
    double C21036 =  (  ( C21021*C20747 ) *2 ) /C20739;
    double C21080 =  ( C21059- ( 6* ( C21014*be )  )  ) /C20752;
    double C20974 = C20923*2;
    double C21517 =  (  (  ( C20974*ae ) *6. ) /C20752 ) + (  (  ( C21021*C20900 ) *2 ) /C20739 ) ;
    double C21015 =  ( - ( 6* ( C20974*be )  )  ) /C20752;
    double C21458 = C21036-C21015;
    double C21039 = C21015-C21036;
    double C21449 = C21039*2;
    double C21071 =  ( C20747*C21039 ) /C20739;
    double C21084 = C21080-C21071;
    double C21483 =  ( C21084*C20747 ) /C20739;
    double C21465 = C21071-C21080;
    double C21523 =  (  ( C20900*C21039 ) /C20739 ) + (  (  ( C21021*6 ) +C21059 ) /C20752 ) ;
    double C21083 =  (  ( C20974- ( 4* ( be*C20921 )  )  ) /C20752 ) - (  ( C20747*C21014 ) /C20739 ) ;
    double C21533 =  (  ( C20900*C21084 ) /C20739 ) + (  (  ( 6* ( C21083*ae )  ) +C21449 ) /C20752 ) ;
    double C21520 =  ( C21449- (  ( be*C21083 ) *6 )  ) /C20752;
    double C21530 = C21483-C21520;
    double C20968 = C20921*2;
    double C20920 = C20990+ (  (  ( C20900*C20749 ) *2 ) /C20739 ) ;
    double C21013 =  (  ( C20764- (  ( be*C20735 ) *2 )  ) /C20752 ) - (  ( C20747*C20921 ) /C20739 ) ;
    double C21031 =  (  ( C20968- ( 2* ( be*C21003 )  )  ) /C20752 ) - (  ( C20747*C21013 ) /C20739 ) ;
    double C21295 =  (  ( C20900*C21013 ) /C20739 ) + (  ( C21289+C20968 ) /C20752 ) ;
    double cnst274 =  (  (  ( C21014*2 ) - ( cnst13*C21013 )  ) /C20752 ) - (  ( C20747*C21083 ) /C20739 ) ;
    double cnst278 =  (  ( C20900* ( C21520-C21483 )  ) /C20739 ) + (  (  ( C21084*3 ) + ( cnst8*cnst274 )  ) /C20752 ) ;
    double C21243 = C20785- (  ( C20900*C20962 ) /C20761 ) ;
    double C21249 =  (  (  (  ( be*C21243 ) *ae ) *2 ) /C20739 ) + ( C20964+ (  ( C20900*C21016 ) /C20739 )  ) ;
    double cnst307 = C20771*C21243;
    double C20980 = - ( C20962*2. ) ;
    double C20993 = C20980/C20775;
    double C21025 = C20993- (  ( C20747*C21003 ) /C20739 ) ;
    double C21073 =  (  ( C21003*3. ) /C20752 ) + (  ( C20900*C21025 ) /C20739 ) ;
    double cnst314 = C20771*C21073;
    double cnst319 = C20771*C21025;
    double C21067 =  ( ae*C21025 ) *2;
    double C21082 =  (  ( C20900*C21031 ) /C20739 ) + (  (  ( 3*C21013 ) +C21067 ) /C20752 ) ;
    double C21290 = C20993+ (  ( C20900*C21003 ) /C20739 ) ;
    double C21297 =  (  ( ae* ( be*C21290 )  ) *2 ) + ( C21016+ ( C20900*C21037 )  ) ;
    double cnst339 = C20771*C21290;
    double C21045 =  (  ( C21016/C20739 ) - (  ( C20747*C21037 ) /C20739 )  ) + (  ( be* ( C21067- ( C20980/C20739 )  )  ) /C20739 ) ;
    double C21087 =  (  (  ( 3*C21037 ) /C20752 ) + (  ( C20900*C21045 ) /C20739 )  ) + (  (  (  ( be*C21073 ) *ae ) *2 ) /C20739 ) ;
    double C20748 = be*zAB;
    double C20824 = C20771* ( ae- (  (  ( C20770+ ( std::pow( ( C20748/C20739 )  , 2) )  ) *C20746 ) *2 )  ) ;
    double gy120010 =  (  (  ( C21295*C20853 ) *C20771 ) - (  ( cnst23*C21533 ) /2.0 )  ) + ( C20824* ( C21295*C20730 )  ) ;
    double gx300100 =  ( C20824* ( C20873*C20771 )  ) +cnst140;
    double gx030100 =  ( C20824* ( C21025*C21001 )  ) + (  ( C20771* ( C21045*C21001 )  ) - (  ( C21519*cnst319 ) /2.0 )  ) ;
    double gy300100 =  (  (  ( cnst62*C21440 ) /2.0 ) + (  ( C20895*C20764 ) *C20771 )  ) + ( C20824* ( C20865*C20764 )  ) ;
    double C21097 = C20824/C20752;
    double gx300010 =  (  ( C20771* ( C20847*C20924 )  ) + (  ( C21529*cnst16 ) /2.0 )  ) + ( C20824* ( C20847*C20899 )  ) ;
    double C20953 =  (  ( ae*C20945 ) /C20761 ) + (  ( C20824*C20929 ) /C20739 ) ;
    double gx120001 =  (  (  ( C20786*C21037 ) *C20928 ) + (  ( C21470* ( C20928*C21003 )  ) /2.0 )  ) + (  ( C20786*C21003 ) *C20953 ) ;
    double gx210001 =  (  ( C20819*C20735 ) *C20953 ) + (  ( C20928* ( C21016*C20819 )  ) + (  (  ( C20928*C20735 ) *C21459 ) /2.0 )  ) ;
    double gy300001 =  (  ( C20764*C20838 ) *C20953 ) + (  (  (  ( C20928*C20838 ) *C21440 ) /2.0 ) + ( C20928* ( C20891*C20764 )  )  ) ;
    double gy030001 =  (  ( C20771*C21031 ) *C20953 ) + (  (  ( cnst14*C21530 ) /2.0 ) + ( C20928* ( C21031*C20826 )  )  ) ;
    double gx030001 =  (  ( C20755*C21025 ) *C20953 ) + (  (  ( C21452* ( C20928*C21025 )  ) /2.0 ) + (  ( C20755*C21045 ) *C20928 )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 2] += cc* (  ( gx210001*cnst12 ) - ( cnst3*gx030001 )  ) ;
    double gx300001 =  (  (  ( cnst14*C21529 ) /2.0 ) + ( C20928* ( C20847*C20820 )  )  ) + (  ( C20847*C20771 ) *C20953 ) ;
    gx[(Ai + 6) * matrix_size + Bi + 2] += cc* (  ( cnst1*gx120001 ) + ( cnst3*gx300001 )  ) ;
    double gy210001 =  (  ( C20928* ( C20880*C20921 )  ) + (  (  ( C20928*C20803 ) *C21458 ) /2.0 )  ) + (  ( C20921*C20803 ) *C20953 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 2] += cc* (  ( gy210001*cnst12 ) - ( gy030001*cnst3 )  ) ;
    double gy120001 =  (  (  ( C21465* ( C20928*C20730 )  ) /2.0 ) + ( C20928* ( C20853*C21013 )  )  ) + (  ( C20730*C21013 ) *C20953 ) ;
    gy[(Ai + 6) * matrix_size + Bi + 2] += cc* (  ( gy300001*cnst3 ) + ( gy120001*cnst1 )  ) ;
    double gy300010 =  ( C20824* ( C20920*C20838 )  ) + (  (  ( C20891*C20920 ) *C20771 ) - (  ( C21517*cnst60 ) /2.0 )  ) ;
    gy[(Ai + 6) * matrix_size + Bi + 1] += cc* (  ( cnst1*gy120010 ) + ( gy300010*cnst3 )  ) ;
    double gx210010 =  ( C20824* ( C20819*C21243 )  ) + (  (  ( C20819*C21249 ) *C20771 ) + (  ( cnst307*C21459 ) /2.0 )  ) ;
    double gy120100 =  ( C20824* ( C21314*C21013 )  ) + (  (  ( C21319*C21013 ) *C20771 ) + (  ( C21465*cnst65 ) /2.0 )  ) ;
    gy[(Ai + 6) * matrix_size + Bi + 0] += cc* (  ( gy300100*cnst3 ) + ( gy120100*cnst1 )  ) ;
    double gx210100 =  (  ( C20771* ( C21016*C21226 )  ) - (  ( C21532*cnst155 ) /2.0 )  ) + ( C20824* ( C20735*C21226 )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 0] += cc* (  ( gx210100*cnst12 ) - ( gx030100*cnst3 )  ) ;
    double gx120100 =  ( C20824* ( C21312*C21003 )  ) + (  ( C20771* ( C21312*C21037 )  ) - (  ( cnst90*C21526 ) /2.0 )  ) ;
    gx[(Ai + 6) * matrix_size + Bi + 0] += cc* (  ( cnst1*gx120100 ) + ( gx300100*cnst3 )  ) ;
    double gy030100 =  ( C20824* ( C21031*C20959 )  ) + (  (  ( cnst21*C21530 ) /2.0 ) + (  ( C21031*C21019 ) *C20771 )  ) ;
    double gy210010 =  (  ( C20771* ( C20880*C21244 )  ) - (  ( cnst20*C21523 ) /2.0 )  ) + ( C20824* ( C20803*C21244 )  ) ;
    double C21137 =  (  (  ( -C20945 ) *be ) /C20761 ) - (  ( C20824*C20748 ) /C20739 ) ;
    double gx030010 =  (  (  ( C20755*C21087 ) *C20771 ) + (  ( C21452*cnst314 ) /2.0 )  ) + (  ( C20755*C21073 ) *C20824 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 1] += cc* (  ( gx210010*cnst12 ) - ( gx030010*cnst3 )  ) ;
    double gy210100 =  ( C20824* ( C20921*C21223 )  ) + (  (  ( C21229*cnst178 ) /C20739 ) + (  ( cnst64*C21458 ) /2.0 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 0] += cc* (  ( gy210100*cnst12 ) - ( cnst3*gy030100 )  ) ;
    double gy030010 =  ( C20824* ( C20771*C21082 )  ) + (  (  ( C21082*C20826 ) *C20771 ) - (  ( cnst278*cnst15 ) /2.0 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 1] += cc* (  ( cnst12*gy210010 ) - ( gy030010*cnst3 )  ) ;
    double gx120010 =  ( C20824* ( C20786*C21290 )  ) + (  (  ( C21297*cnst30 ) /C20739 ) + (  ( cnst339*C21470 ) /2.0 )  ) ;
    gx[(Ai + 6) * matrix_size + Bi + 1] += cc* (  ( gx300010*cnst3 ) + ( gx120010*cnst1 )  ) ;
    double C21095 = C20771*C20748;
    double C21109 = - ( C21095*2. ) ;
    double C21118 = C21109/C20775;
    double C20737 = - ( C21095/C20739 ) ;
    double cnst464 = C20771*C20737;
    double cnst469 = C20737*2;
    double cnst472 =  ( C21229* ( cnst469*C20749 )  ) /C20739;
    double cnst475 =  (  ( cnst469*C20740 ) *C21297 ) /C20739;
    double gy201100 =  (  ( C20764*C21223 ) *C21137 ) + (  (  (  ( C20737*C21223 ) *C21440 ) /2.0 ) +cnst472 ) ;
    double C20750 = C20737*ae;
    double C20765 = C20750*2;
    double C20949 = C20990+ (  (  ( C20750*C20929 ) *2 ) /C20739 ) ;
    double C21441 = C20947- (  (  ( C20750*C20748 ) *2 ) /C20739 ) ;
    double C21270 =  (  ( C20750*4. ) /C20752 ) + (  ( C20929*C21441 ) /C20739 ) ;
    double C21099 = 2*C21441;
    double C21476 = ae*C21441;
    double C21535 =  (  ( - ( 4* ( be*C20765 )  )  ) /C20752 ) - (  (  ( C20748*C21476 ) *2 ) /C20739 ) ;
    double C21536 = C21535*ae;
    double C21156 =  (  ( C21536*C20748 ) *2 ) /C20739;
    double C21181 = C21536*2;
    double C21537 = -C21181;
    double gz300010 =  (  (  ( C20899*C20838 ) *C21537 ) /2.0 ) + (  ( C20765* ( C20891*C20899 )  ) + ( C20765* ( C20924*C20838 )  )  ) ;
    double gz120010 =  (  ( C21537* ( C20730*C21290 )  ) /2.0 ) + (  (  ( C21290*C20853 ) *C20765 ) +cnst475 ) ;
    gz[(Ai + 6) * matrix_size + Bi + 1] +=  (  ( gz300010*cnst3 ) + ( cnst1*gz120010 )  ) *cc;
    double gz210010 =  (  ( C21537* ( C21243*C20803 )  ) /2.0 ) + (  (  ( C21249*C20803 ) *C20765 ) + ( C20765* ( C20880*C21243 )  )  ) ;
    double gz030100 =  (  ( C21537* ( C21025*C20959 )  ) /2.0 ) + (  ( C20765* ( C21019*C21025 )  ) + ( C20765* ( C21045*C20959 )  )  ) ;
    double gz210100 =  ( cnst472+ (  ( C21016*C21223 ) *C20765 )  ) + (  ( C21537* ( C20735*C21223 )  ) /2.0 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 0] += cc* (  ( gz210100*cnst12 ) - ( gz030100*cnst3 )  ) ;
    double gz120100 =  (  ( C21537* ( C21314*C21003 )  ) /2.0 ) + (  ( C20765* ( C21003*C21319 )  ) + (  ( C21314*C21037 ) *C20765 )  ) ;
    double gz300100 =  (  ( C21537*cnst62 ) /2.0 ) + (  (  ( C20820*C20865 ) *C20765 ) + (  ( C20895*C20771 ) *C20765 )  ) ;
    gz[(Ai + 6) * matrix_size + Bi + 0] += cc* (  ( gz120100*cnst1 ) + ( cnst3*gz300100 )  ) ;
    double gz030010 =  (  ( C21537*cnst314 ) /2.0 ) + (  (  ( C21073*C20826 ) *C20765 ) + (  ( C20771*C21087 ) *C20765 )  ) ;
    gz[(Ai + 0) * matrix_size + Bi + 1] += cc* (  ( gz210010*cnst12 ) - ( gz030010*cnst3 )  ) ;
    double C21202 =  ( C21181- ( 6* ( be*C21535 )  )  ) /C20752;
    double C21105 = C21476*2;
    double C21518 =  (  ( 6.* ( C21105*ae )  ) /C20752 ) + (  (  ( C21536*C20929 ) *2 ) /C20739 ) ;
    double gz030001 =  (  (  ( C20771*C21045 ) *C20949 ) + ( C20949* ( C21025*C20826 )  )  ) - (  ( C21518*cnst319 ) /2.0 ) ;
    double gz210001 =  (  ( C20949* ( C20880*C20735 )  ) + ( C20949* ( C21016*C20803 )  )  ) - (  ( C21518* ( C20735*C20803 )  ) /2.0 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 2] += cc* (  ( gz210001*cnst12 ) - ( gz030001*cnst3 )  ) ;
    double gz300001 =  (  ( C20949* ( C20891*C20771 )  ) + (  ( C20820*C20838 ) *C20949 )  ) - (  ( C21518*cnst60 ) /2.0 ) ;
    double gz120001 =  (  (  ( C20730*C21037 ) *C20949 ) + ( C20949* ( C21003*C20853 )  )  ) - (  ( C21518* ( C21003*C20730 )  ) /2.0 ) ;
    gz[(Ai + 6) * matrix_size + Bi + 2] += cc* (  ( gz300001*cnst3 ) + ( gz120001*cnst1 )  ) ;
    double C21205 =  (  ( C21105- ( 4* ( be*C21441 )  )  ) /C20752 ) - (  ( C20748*C21535 ) /C20739 ) ;
    double C21136 =  ( - (  ( C21105*be ) *6 )  ) /C20752;
    double C21462 = C21156-C21136;
    double C21159 = C21136-C21156;
    double C21524 =  (  ( C21159*C20929 ) /C20739 ) + (  (  ( 6*C21536 ) +C21181 ) /C20752 ) ;
    double gz021001 =  (  (  ( C20771*C21037 ) *C21270 ) + (  ( C21003*C20826 ) *C21270 )  ) - (  ( C21524*cnst90 ) /2.0 ) ;
    double gz201001 =  (  (  ( C20820*C20803 ) *C21270 ) + ( C21270* ( C20880*C20771 )  )  ) - (  ( C21524*cnst20 ) /2.0 ) ;
    gz[(Ai + 5) * matrix_size + Bi + 2] += cc* (  ( cnst6*gz201001 ) - ( cnst6*gz021001 )  ) ;
    double gz111001 =  (  ( C21270* ( C21016*C20730 )  ) + (  ( C20735*C20853 ) *C21270 )  ) - (  ( C21524* ( C20730*C20735 )  ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 2] += cnst10*gz111001;
    double C21454 = C21159*2;
    double C21521 =  ( C21454- ( 6* ( be*C21205 )  )  ) /C20752;
    double C21193 =  ( C21159*C20748 ) /C20739;
    double C21206 = C21202-C21193;
    double C21485 =  ( C21206*C20748 ) /C20739;
    double C21531 = C21485-C21521;
    double C21534 =  (  ( C21206*C20929 ) /C20739 ) + (  ( C21454+ ( 6* ( C21205*ae )  )  ) /C20752 ) ;
    double C21471 = C21193-C21202;
    double gz021100 =  (  (  ( C21003*C21019 ) *C21441 ) + (  ( C21037*C20959 ) *C21441 )  ) + (  ( C21462* ( C21003*C20959 )  ) /2.0 ) ;
    double gz111100 =  (  (  ( C21016*C21314 ) *C21441 ) + (  ( C20735*C21319 ) *C21441 )  ) + (  (  ( C21314*C20735 ) *C21462 ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 0] += gz111100*cnst10;
    double gz201010 =  (  (  ( C20880*C20899 ) *C21441 ) + ( C21441* ( C20924*C20803 )  )  ) + (  (  ( C20899*C20803 ) *C21462 ) /2.0 ) ;
    double gz111010 =  (  (  ( C20730*C21243 ) *C21462 ) /2.0 ) + (  (  ( C20730*C21249 ) *C21441 ) + ( C21441* ( C21243*C20853 )  )  ) ;
    gz[(Ai + 1) * matrix_size + Bi + 1] += gz111010*cnst10;
    double cnst641 = C20771*C21441;
    double gz021010 =  (  (  ( cnst641*C21297 ) /C20739 ) + (  ( C21290*C20826 ) *C21441 )  ) + (  ( cnst339*C21462 ) /2.0 ) ;
    gz[(Ai + 5) * matrix_size + Bi + 1] +=  (  ( cnst6*gz201010 ) - ( cnst6*gz021010 )  ) *cc;
    double gz201100 =  (  ( cnst64*C21462 ) /2.0 ) + (  (  ( cnst641*C21229 ) /C20739 ) + (  ( C20820*C21223 ) *C21441 )  ) ;
    gz[(Ai + 5) * matrix_size + Bi + 0] += cc* (  ( cnst6*gz201100 ) - ( cnst6*gz021100 )  ) ;
    double gx021010 =  (  ( C20755*C21290 ) *C21137 ) + (  (  (  ( C20737*C21290 ) *C21452 ) /2.0 ) +cnst475 ) ;
    double gy111010 =  (  ( C20737* ( C20853*C21244 )  ) - (  (  ( C20737*C20730 ) *C21523 ) /2.0 )  ) + ( C21137* ( C20730*C21244 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 1] += cnst10*gy111010;
    double gx201100 =  ( C21137* ( C20771*C21226 )  ) + (  (  ( C20820*C21226 ) *C20737 ) - (  ( C21532*cnst464 ) /2.0 )  ) ;
    double gy111100 =  (  ( C21314*C20921 ) *C21137 ) + (  (  (  ( C21314*C20737 ) *C21458 ) /2.0 ) + ( C20737* ( C21319*C20921 )  )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 0] += cnst10*gy111100;
    double gx021100 =  ( C21137* ( C21003*C21001 )  ) + (  ( C20737* ( C21037*C21001 )  ) - (  (  ( C20737*C21003 ) *C21519 ) /2.0 )  ) ;
    gx[(Ai + 5) * matrix_size + Bi + 0] += cc* (  ( gx201100*cnst6 ) - ( cnst6*gx021100 )  ) ;
    double gy021100 =  ( C21137* ( C21013*C20959 )  ) + (  ( C20737* ( C21019*C21013 )  ) + (  ( C21465* ( C20737*C20959 )  ) /2.0 )  ) ;
    gy[(Ai + 5) * matrix_size + Bi + 0] += cc* (  ( cnst6*gy201100 ) - ( cnst6*gy021100 )  ) ;
    double gy021010 =  (  ( C20771*C21295 ) *C21137 ) + (  ( C20737* ( C21295*C20826 )  ) - (  ( cnst464*C21533 ) /2.0 )  ) ;
    double gx201010 =  (  ( C20819*C20899 ) *C21137 ) + (  (  ( C20819*C20924 ) *C20737 ) + (  (  ( C20899*C20737 ) *C21459 ) /2.0 )  ) ;
    gx[(Ai + 5) * matrix_size + Bi + 1] +=  (  ( cnst6*gx201010 ) - ( cnst6*gx021010 )  ) *cc;
    double gy201010 =  (  (  ( C20880*C20920 ) *C20737 ) - (  ( C21517* ( C20737*C20803 )  ) /2.0 )  ) + (  ( C20920*C20803 ) *C21137 ) ;
    gy[(Ai + 5) * matrix_size + Bi + 1] += cc* (  ( cnst6*gy201010 ) - ( cnst6*gy021010 )  ) ;
    double C21134 =  (  ( C20765- (  ( be*C20737 ) *2 )  ) /C20752 ) - (  ( C20748*C21441 ) /C20739 ) ;
    double gz012100 =  (  ( C21134* ( C21016*C20959 )  ) + ( C21134* ( C20735*C21019 )  )  ) + (  (  ( C20735*C20959 ) *C21471 ) /2.0 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 0] += - ( cc* (  ( gz030100*cnst5 ) + (  ( gz210100*cnst5 ) + ( cnst7*gz012100 )  )  )  ) ;
    double gz102010 =  (  ( C21471* ( C20899*C20730 )  ) /2.0 ) + (  ( C21134* ( C20899*C20853 )  ) + ( C21134* ( C20924*C20730 )  )  ) ;
    gz[(Ai + 4) * matrix_size + Bi + 1] += cc* (  ( gz102010*cnst7 ) - (  ( gz300010*cnst5 ) + ( cnst5*gz120010 )  )  ) ;
    double cnst716 =  (  (  ( C21535*2 ) - ( C21134*cnst13 )  ) /C20752 ) - (  ( C20748*C21205 ) /C20739 ) ;
    double cnst720 =  (  (  ( cnst8*cnst716 ) + ( C21206*3 )  ) /C20752 ) + (  (  ( C21521-C21485 ) *C20929 ) /C20739 ) ;
    double gz102100 =  (  ( C21471*cnst65 ) /2.0 ) + (  ( C21134* ( C20771*C21319 )  ) + ( C21134* ( C21314*C20820 )  )  ) ;
    gz[(Ai + 4) * matrix_size + Bi + 0] += cc* (  ( cnst7*gz102100 ) - (  ( gz120100*cnst5 ) + ( cnst5*gz300100 )  )  ) ;
    double gz012010 =  (  ( C21471*cnst307 ) /2.0 ) + (  ( C21134* ( C21243*C20826 )  ) + ( C21134* ( C20771*C21249 )  )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 1] += - ( cc* (  (  ( gz012010*cnst7 ) + ( cnst5*gz210010 )  ) + ( gz030010*cnst5 )  )  ) ;
    double gx111010 =  (  ( C20786*C21243 ) *C21137 ) + (  (  ( C20786*C21249 ) *C20737 ) + (  ( C21470* ( C20737*C21243 )  ) /2.0 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 1] += gx111010*cnst10;
    double gx111100 =  (  ( C20737* ( C21016*C21312 )  ) - (  (  ( C20737*C20735 ) *C21526 ) /2.0 )  ) + (  ( C21312*C20735 ) *C21137 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 0] += gx111100*cnst10;
    double C21269 = C20785- (  ( C21095*C20929 ) /C20761 ) ;
    double cnst744 = C20771*C21269;
    double C21275 =  (  (  (  ( be*C21269 ) *ae ) *2 ) /C20739 ) + ( C21097+ (  ( C21137*C20929 ) /C20739 )  ) ;
    double gx021001 =  (  ( C20755*C21003 ) *C21275 ) + (  (  ( C20755*C21037 ) *C21269 ) + (  (  ( C21003*C21269 ) *C21452 ) /2.0 )  ) ;
    double gx111001 =  (  ( C20786*C20735 ) *C21275 ) + (  (  (  ( C20735*C21269 ) *C21470 ) /2.0 ) + (  ( C21016*C20786 ) *C21269 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 2] += cnst10*gx111001;
    double gy021001 =  (  ( C20771*C21013 ) *C21275 ) + (  (  ( C21465*cnst744 ) /2.0 ) + ( C21269* ( C21013*C20826 )  )  ) ;
    double gy201001 =  (  ( C20764*C20803 ) *C21275 ) + (  (  (  ( C21269*C20803 ) *C21440 ) /2.0 ) + ( C21269* ( C20880*C20764 )  )  ) ;
    gy[(Ai + 5) * matrix_size + Bi + 2] += cc* (  ( cnst6*gy201001 ) - ( cnst6*gy021001 )  ) ;
    double gx201001 =  (  ( C20819*C20771 ) *C21275 ) + (  ( C21269* ( C20819*C20820 )  ) + (  ( cnst744*C21459 ) /2.0 )  ) ;
    gx[(Ai + 5) * matrix_size + Bi + 2] += cc* (  ( cnst6*gx201001 ) - ( cnst6*gx021001 )  ) ;
    double gy111001 =  (  ( C20730*C20921 ) *C21275 ) + (  (  (  ( C20730*C21269 ) *C21458 ) /2.0 ) + (  ( C20921*C20853 ) *C21269 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 2] += gy111001*cnst10;
    double C21126 =  (  ( C20771* ( std::pow(C20748 , 2) )  ) /C20761 ) +C20785;
    double cnst791 = C21126*C20771;
    double C21145 = C21118- (  ( C21126*C20748 ) /C20739 ) ;
    double C21189 =  ( C21145*ae ) *2;
    double cnst807 = C21145*C20771;
    double C21340 =  (  ( C21126*C20929 ) /C20739 ) +C21118;
    double cnst824 = C20771*C21340;
    double C21339 =  ( C21126*ae ) *2;
    double C21157 =  (  ( be* ( C21339-C20771 )  ) /C20739 ) + ( C21097- (  ( C20748*C21137 ) /C20739 )  ) ;
    double gy012100 =  (  ( C20921*C20959 ) *C21157 ) + (  ( C21126* ( C20921*C21019 )  ) + (  ( C21458* ( C21126*C20959 )  ) /2.0 )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 0] += - ( cc* (  ( cnst5*gy030100 ) + (  ( cnst7*gy012100 ) + ( gy210100*cnst5 )  )  )  ) ;
    double C21347 =  (  (  ( be*C21340 ) *ae ) *2 ) + (  ( C21157*C20929 ) +C21137 ) ;
    double gx102001 =  (  ( C21347*cnst30 ) /C20739 ) + (  (  ( cnst824*C21470 ) /2.0 ) + ( C21340* ( C20786*C20820 )  )  ) ;
    gx[(Ai + 4) * matrix_size + Bi + 2] += cc* (  ( cnst7*gx102001 ) - (  ( cnst5*gx300001 ) + ( cnst5*gx120001 )  )  ) ;
    double cnst855 =  ( C21347* ( C20755*C20735 )  ) /C20739;
    double gx012001 = cnst855+ (  (  ( C21016*C20755 ) *C21340 ) + (  (  ( C20735*C21340 ) *C21452 ) /2.0 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 2] += - ( cc* (  ( cnst5*gx030001 ) + (  ( cnst7*gx012001 ) + ( gx210001*cnst5 )  )  )  ) ;
    double gy102001 = cnst855+ (  ( C21340* ( C20764*C20853 )  ) + (  (  ( C20730*C21340 ) *C21440 ) /2.0 )  ) ;
    gy[(Ai + 4) * matrix_size + Bi + 2] += cc* (  ( gy102001*cnst7 ) - (  ( cnst5*gy300001 ) + ( gy120001*cnst5 )  )  ) ;
    double gy012001 =  (  ( C21347*cnst178 ) /C20739 ) + (  (  ( cnst824*C21458 ) /2.0 ) + (  ( C20921*C20826 ) *C21340 )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 2] += - ( cc* (  (  ( cnst7*gy012001 ) + ( gy210001*cnst5 )  ) + ( gy030001*cnst5 )  )  ) ;
    double gy012010 =  (  ( C21126* ( C21244*C20826 )  ) - (  ( cnst791*C21523 ) /2.0 )  ) + ( C21157* ( C20771*C21244 )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 1] += - ( cc* (  ( gy030010*cnst5 ) + (  ( gy012010*cnst7 ) + ( cnst5*gy210010 )  )  )  ) ;
    double gx102100 =  (  ( C21312*C20771 ) *C21157 ) + (  (  ( C21312*C20820 ) *C21126 ) - (  ( C21526*cnst791 ) /2.0 )  ) ;
    gx[(Ai + 4) * matrix_size + Bi + 0] +=  (  ( cnst7*gx102100 ) - (  ( gx120100*cnst5 ) + ( gx300100*cnst5 )  )  ) *cc;
    double C21165 =  (  ( be* ( C21189- ( C21109/C20739 )  )  ) /C20739 ) + (  ( C21137/C20739 ) - (  ( C20748*C21157 ) /C20739 )  ) ;
    double gy003100 =  (  ( C21145* ( C20764*C21019 )  ) + (  (  ( C21145*C20959 ) *C21440 ) /2.0 )  ) + ( C21165* ( C20764*C20959 )  ) ;
    double gy003010 =  ( C21165* ( C20771*C20920 )  ) + (  (  ( C20920*C20826 ) *C21145 ) - (  ( C21517*cnst807 ) /2.0 )  ) ;
    double gx003010 =  ( C21165* ( C20755*C20899 )  ) + (  (  ( C20755*C20924 ) *C21145 ) + (  (  ( C21145*C20899 ) *C21452 ) /2.0 )  ) ;
    double gx003100 =  ( C21165* ( C20771*C21001 )  ) + (  ( C21145* ( C20820*C21001 )  ) - (  ( C21519*cnst807 ) /2.0 )  ) ;
    double C21345 =  (  ( C21099+C21339 ) /C20752 ) + (  ( C21134*C20929 ) /C20739 ) ;
    double gz012001 =  (  (  ( C21016*C20771 ) *C21345 ) + (  ( C20735*C20826 ) *C21345 )  ) - (  ( cnst155*C21534 ) /2.0 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 2] += - ( cc* (  ( gz030001*cnst5 ) + (  ( gz012001*cnst7 ) + ( gz210001*cnst5 )  )  )  ) ;
    double gz102001 =  (  (  ( C20771*C20853 ) *C21345 ) + (  ( C20820*C20730 ) *C21345 )  ) - (  ( cnst23*C21534 ) /2.0 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 2] += cc* (  ( gz102001*cnst7 ) - (  ( cnst5*gz300001 ) + ( gz120001*cnst5 )  )  ) ;
    double C21151 =  (  ( C21099- (  ( C21126*be ) *2 )  ) /C20752 ) - (  ( C21134*C20748 ) /C20739 ) ;
    double gz003010 =  (  ( cnst16*C21531 ) /2.0 ) + (  ( C21151* ( C20771*C20924 )  ) + ( C21151* ( C20899*C20826 )  )  ) ;
    double gz003100 =  (  ( C21531*cnst21 ) /2.0 ) + (  (  ( C20820*C20959 ) *C21151 ) + (  ( C20771*C21019 ) *C21151 )  ) ;
    double C21204 =  (  ( C21151*C20929 ) /C20739 ) + (  (  ( C21134*3 ) +C21189 ) /C20752 ) ;
    double gz003001 =  (  ( C21204* ( C20771*C20820 )  ) + (  ( C20771*C20826 ) *C21204 )  ) - (  ( cnst15*cnst720 ) /2.0 ) ;
    double gx012010 =  (  ( C21126* ( C20755*C21249 )  ) + (  (  ( C21126*C21243 ) *C21452 ) /2.0 )  ) + ( C21157* ( C20755*C21243 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 1] += - ( cc* (  ( cnst5*gx030010 ) + (  ( gx012010*cnst7 ) + ( cnst5*gx210010 )  )  )  ) ;
    double C21195 =  (  ( C21126*3. ) /C20752 ) + (  ( C21145*C20929 ) /C20739 ) ;
    double cnst912 = C20771*C21195;
    double C21209 =  (  (  ( ae* ( be*C21195 )  ) *2 ) /C20739 ) + (  (  ( C21165*C20929 ) /C20739 ) + (  ( C21157*3 ) /C20752 )  ) ;
    double gy003001 =  (  ( C21195* ( C20764*C20826 )  ) + (  ( cnst912*C21440 ) /2.0 )  ) + (  ( C20771*C20764 ) *C21209 ) ;
    double gx003001 =  (  (  ( C21452*cnst912 ) /2.0 ) + ( C21195* ( C20755*C20820 )  )  ) + ( C21209* ( C20755*C20771 )  ) ;
    double gy102100 =  (  (  (  ( C21126*C21314 ) *C21440 ) /2.0 ) + ( C21126* ( C21319*C20764 )  )  ) + ( C21157* ( C21314*C20764 )  ) ;
    gy[(Ai + 4) * matrix_size + Bi + 0] += cc* (  ( cnst7*gy102100 ) - (  ( gy120100*cnst5 ) + ( gy300100*cnst5 )  )  ) ;
    double gy102010 =  ( C21157* ( C20730*C20920 )  ) + (  ( C21126* ( C20920*C20853 )  ) - (  ( C21517* ( C21126*C20730 )  ) /2.0 )  ) ;
    gy[(Ai + 4) * matrix_size + Bi + 1] +=  (  ( cnst7*gy102010 ) - (  ( cnst5*gy120010 ) + ( gy300010*cnst5 )  )  ) *cc;
    double gx102010 =  (  (  ( C21470* ( C21126*C20899 )  ) /2.0 ) + ( C21126* ( C20924*C20786 )  )  ) + (  ( C20899*C20786 ) *C21157 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 1] += cc* (  ( gx102010*cnst7 ) - (  ( gx300010*cnst5 ) + ( gx120010*cnst5 )  )  ) ;
    double gx012100 =  ( C21157* ( C20735*C21001 )  ) + (  ( C21126* ( C21016*C21001 )  ) - (  (  ( C21126*C20735 ) *C21519 ) /2.0 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 0] += - ( cc* (  (  ( gx012100*cnst7 ) + ( gx210100*cnst5 )  ) + ( cnst5*gx030100 )  )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 2] += cc* (  ( gx003001- ( gx201001*1.5 )  ) - ( 1.5*gx021001 )  ) ;
    gz[(Ai + 3) * matrix_size + Bi + 1] += cc* (  ( gz003010- ( 1.5*gz201010 )  ) - ( gz021010*1.5 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 2] += cc* (  ( gy003001- ( gy201001*1.5 )  ) - ( 1.5*gy021001 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 0] += cc* (  ( gy003100- ( 1.5*gy201100 )  ) - ( gy021100*1.5 )  ) ;
    gz[(Ai + 3) * matrix_size + Bi + 0] += cc* (  ( gz003100- ( gz201100*1.5 )  ) - ( 1.5*gz021100 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 1] +=  (  ( gy003010- ( 1.5*gy201010 )  ) - ( 1.5*gy021010 )  ) *cc;
    gx[(Ai + 3) * matrix_size + Bi + 0] += cc* (  ( gx003100- ( gx201100*1.5 )  ) - ( 1.5*gx021100 )  ) ;
    gz[(Ai + 3) * matrix_size + Bi + 2] += cc* (  ( gz003001- ( 1.5*gz201001 )  ) - ( gz021001*1.5 )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 1] += cc* (  ( gx003010- ( gx201010*1.5 )  ) - ( 1.5*gx021010 )  ) ;
}
