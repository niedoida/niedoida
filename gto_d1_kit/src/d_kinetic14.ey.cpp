/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d1_kit/gto_d1.hpp"
#include <cmath>

namespace {
    static const double Pi = M_PI;
}

void kinetic_gradient_32(
double ae , 
double be , 
double cc , 
double xAB , 
double yAB , 
double zAB , 
double* const gx , 
double* const gy , 
double* const gz , 
std::size_t matrix_size , 
std::size_t Ai , 
std::size_t Bi ) 
{
    double cnst0 = std::sqrt(22.5);
    double cnst1 = std::sqrt(3.75);
    double cnst2 = std::sqrt(1.6875);
    double cnst3 = std::sqrt(0.75);
    double cnst4 = std::sqrt(4.5);
    double cnst5 = std::sqrt(6.75);
    double cnst6 = std::sqrt(7.5);
    double cnst7 = std::sqrt(6.0);
    double cnst9 = cc* ( std::sqrt(45.) ) ;
    double cnst10 = std::sqrt(1.5);
    double cnst11 = std::sqrt(5.625);
    double C23815 = ae*zAB;
    double cnst12 = 4*ae;
    double C23755 = yAB*ae;
    double C23542 = std::pow(ae , 2);
    double cnst14 = std::sqrt( ( 0.75/8.0 ) );
    double cnst16 = std::sqrt( ( 3.75/8.0 ) );
    double cnst18 = std::sqrt( ( 15./8.0 ) );
    double cnst20 = std::sqrt( ( 45./8.0 ) );
    double cnst22 = std::sqrt( ( 45.0/8.0 ) );
    double cnst24 = std::sqrt( ( 5.0/8.0 ) );
    double cnst26 = std::sqrt( ( 33.75/8.0 ) );
    double cnst28 = std::sqrt( ( 2.25/8.0 ) );
    double cnst30 = std::sqrt( ( 1.25/8.0 ) );
    double cnst31 = std::sqrt(1.875);
    double C23538 = xAB*ae;
    double cnst33 = std::sqrt( ( 135./8.0 ) );
    double cnst34 = std::sqrt(18.);
    double cnst36 = std::sqrt( ( 9./8.0 ) );
    double cnst38 = std::sqrt( ( 3.0/8.0 ) );
    double cnst39 = std::sqrt(3.0);
    double cnst40 = 6*ae;
    double cnst41 = std::sqrt(15.0);
    double C23533 = be+ae;
    double C23569 = std::sqrt( ( Pi/C23533 ) );
    double C23823 = C23815*C23569;
    double C23840 =  ( be*C23823 ) *2;
    double C24382 = C23823/C23533;
    double cnst42 = C24382*C23569;
    double C23763 = C23569*C23755;
    double C24323 = C23763/C23533;
    double cnst44 = C23569*C24323;
    double C23780 =  ( C23763*be ) *2;
    double cnst45 = C23569*C23569;
    double C24480 =  ( C23538*C23569 ) /C23533;
    double cnst46 = C24480*C23569;
    double C23559 = std::pow(C23533 , 2);
    double C23573 = C23559*2.;
    double C23548 = 2.*C23533;
    double C23568 = 1/C23548;
    double C23583 = C23569/C23548;
    double C23931 =  (  (  ( std::pow(C23538 , 2) ) *C23569 ) /C23559 ) +C23583;
    double cnst50 = C23569*C23931;
    double C23787 = C23583+ (  ( C23569* ( std::pow(C23755 , 2) )  ) /C23559 ) ;
    double cnst51 = C23787*C23569;
    double C23847 =  (  ( C23569* ( std::pow(C23815 , 2) )  ) /C23559 ) +C23583;
    double cnst52 = C23569*C23847;
    double C23845 =  ( - (  ( be*C23569 ) *2 )  ) /C23548;
    double C23914 =  (  ( C23569*ae ) *2. ) /C23548;
    double C23543 = be*yAB;
    double C23886 = C23569*C23543;
    double C23904 = - ( C23886*2. ) ;
    double C23918 = C23904/C23573;
    double C24337 = C23583- (  ( C23886*C23755 ) /C23559 ) ;
    double cnst55 = C24337*C23569;
    double C24324 = C23886/C23533;
    double C24349 =  (  ( C24323-C24324 ) /C23548 ) + (  ( C24337*C23755 ) /C23533 ) ;
    double cnst57 = C23569*C24349;
    double C23529 = -C24324;
    double cnst58 = C23569*C23529;
    double C23545 = C23529*ae;
    double C23788 = C23914+ (  (  ( C23545*C23755 ) *2 ) /C23533 ) ;
    double C23562 = C23545*2;
    double C23800 =  (  ( C23788*C23755 ) /C23533 ) + (  ( C23562+ (  ( ae*C24323 ) *2 )  ) /C23548 ) ;
    double C23789 = C23845- (  (  ( C23545*C23543 ) *2 ) /C23533 ) ;
    double C23941 =  (  ( C23562- ( 2* ( be*C23529 )  )  ) /C23548 ) - (  ( C23789*C23543 ) /C23533 ) ;
    double C23793 = C23789*ae;
    double C23896 = C23793*2;
    double C23942 =  ( - ( 6* ( be*C23896 )  )  ) /C23548;
    double C23807 =  (  ( - ( 4* ( be*C23562 )  )  ) /C23548 ) - (  (  ( C23793*C23543 ) *2 ) /C23533 ) ;
    double C23809 = C23807*ae;
    double C23999 = 2*C23809;
    double C24716 = -C23999;
    double C24843 =  (  (  ( C23755*C23809 ) *2 ) /C23533 ) + (  ( 6.* ( C23896*ae )  ) /C23548 ) ;
    double C23925 =  (  ( C23543*C23809 ) *2 ) /C23533;
    double C23950 = C23942-C23925;
    double C23996 = C23950*2;
    double C24018 =  ( C23543*C23950 ) /C23533;
    double C24855 =  (  (  ( 6*C23809 ) +C23999 ) /C23548 ) + (  ( C23755*C23950 ) /C23533 ) ;
    double C24749 = C23925-C23942;
    double C24879 =  (  (  ( C23807*C23755 ) /C23533 ) + (  (  ( 4*C23793 ) +C23896 ) /C23548 )  ) *ae;
    double C24939 =  (  (  ( C24843+C23950 ) + ( 6*C24879 )  ) /C23548 ) + (  ( C24855*C23755 ) /C23533 ) ;
    double C24043 =  (  ( C23896- (  ( C23789*be ) *4 )  ) /C23548 ) - (  ( C23807*C23543 ) /C23533 ) ;
    double C24071 =  ( C23996- (  ( be*C24043 ) *6 )  ) /C23548;
    double C24035 =  ( C23999- ( 6* ( be*C23807 )  )  ) /C23548;
    double C24044 = C24035-C24018;
    double C24872 =  (  ( C23996+ (  ( ae*C24043 ) *6 )  ) /C23548 ) + (  ( C23755*C24044 ) /C23533 ) ;
    double C24059 =  ( C23543*C24044 ) /C23533;
    double C24076 = C24071-C24059;
    double C24732 = C24059-C24071;
    double C24760 = C24018-C24035;
    double C24002 = C23807*2;
    double C24884 =  (  ( C24002+ ( 4* ( C23941*ae )  )  ) /C23548 ) + (  ( C23755*C24043 ) /C23533 ) ;
    double C24945 =  (  (  ( 6* ( C24884*ae )  ) + (  ( C24855*2 ) +C24044 )  ) /C23548 ) + (  ( C24872*C23755 ) /C23533 ) ;
    double C24066 =  (  ( C24002- (  ( be*C23941 ) *4 )  ) /C23548 ) - (  ( C23543*C24043 ) /C23533 ) ;
    double C24871 =  (  (  (  ( C24066*ae ) *6 ) + ( 3*C24044 )  ) /C23548 ) + (  ( C24076*C23755 ) /C23533 ) ;
    double C24866 = ae* (  (  (  ( C23793*C23755 ) *2 ) /C23533 ) + (  ( 4.* ( C23562*ae )  ) /C23548 )  ) ;
    double C24935 =  (  ( C24843*C23755 ) /C23533 ) + (  ( C23999+ ( C24866*6 )  ) /C23548 ) ;
    double C23892 = C23789*2;
    double C24339 =  (  ( C23545*4. ) /C23548 ) + (  ( C23789*C23755 ) /C23533 ) ;
    double cnst90 = C23569*C24339;
    double C24350 =  (  (  ( C23789+C23788 ) + (  ( C24337*ae ) *2 )  ) /C23548 ) + (  ( C24339*C23755 ) /C23533 ) ;
    double C23929 =  (  (  ( std::pow(C23543 , 2) ) *C23569 ) /C23559 ) +C23583;
    double cnst96 = C23929*C23569;
    double C24013 =  ( C23929*ae ) *2;
    double C24042 =  (  ( C24013+C23892 ) /C23548 ) + (  ( C23941*C23755 ) /C23533 ) ;
    double C23964 =  (  ( C23892- (  ( C23929*be ) *2 )  ) /C23548 ) - (  ( C23941*C23543 ) /C23533 ) ;
    double cnst107 =  (  ( C24066*C23755 ) /C23533 ) + (  (  ( cnst12*C23964 ) + ( 3*C24043 )  ) /C23548 ) ;
    double cnst111 =  (  (  ( C24076+ ( C24872*3 )  ) + ( cnst40*cnst107 )  ) /C23548 ) + (  ( C24871*C23755 ) /C23533 ) ;
    double C24022 =  (  ( C23929*C23755 ) /C23533 ) +C23918;
    double C24452 =  (  ( C24022*C23755 ) /C23533 ) + (  (  ( C24337*2 ) +C23929 ) /C23548 ) ;
    double cnst116 = C23569*C24452;
    double cnst117 = C24022*C23569;
    double C24455 =  (  (  (  ( C24022*ae ) *2 ) + ( C23941+ ( C24339*2 )  )  ) /C23548 ) + (  ( C24042*C23755 ) /C23533 ) ;
    double C23955 = C23918- (  ( C23929*C23543 ) /C23533 ) ;
    double C24021 =  (  ( C23929*3. ) /C23548 ) + (  ( C23955*C23755 ) /C23533 ) ;
    double cnst122 = C23569*C24021;
    double C24011 =  ( C23955*ae ) *2;
    double C24041 =  (  ( C23755*C23964 ) /C23533 ) + (  (  ( C23941*3 ) +C24011 ) /C23548 ) ;
    double C24075 =  (  (  (  ( C24021*ae ) *2 ) + ( C23964+ ( C24042*3 )  )  ) /C23548 ) + (  ( C24041*C23755 ) /C23533 ) ;
    double cnst128 = C23569*C23955;
    double C24055 =  (  ( C24021*C23755 ) /C23533 ) + (  (  ( C24022*3 ) +C23955 ) /C23548 ) ;
    double cnst131 = C24055*C23569;
    double C23621 =  ( ae- (  ( C23542* ( C23568+ ( std::pow( ( C23543/C23533 )  , 2) )  )  ) *2 )  ) *C23569;
    double C23756 = C23621/C23548;
    double C23944 =  (  ( be* ( -C23780 )  ) /C23559 ) - (  ( C23621*C23543 ) /C23533 ) ;
    double C24353 =  (  (  ( ae* ( be*C24337 )  ) *2 ) /C23533 ) + (  (  ( C23944*C23755 ) /C23533 ) +C23756 ) ;
    double C23970 =  ( C23756- (  ( C23944*C23543 ) /C23533 )  ) + (  ( be* ( C24013-C23569 )  ) /C23533 ) ;
    double C24054 =  (  ( C23970*C23755 ) +C23944 ) + (  (  ( be*C24022 ) *ae ) *2 ) ;
    double C23978 =  (  ( be* ( C24011- ( C23904/C23533 )  )  ) /C23533 ) + (  ( C23944/C23533 ) - (  ( C23970*C23543 ) /C23533 )  ) ;
    double C24061 =  (  (  ( ae* ( be*C24021 )  ) *2 ) /C23533 ) + (  (  ( C23970*3 ) /C23548 ) + (  ( C23755*C23978 ) /C23533 )  ) ;
    double C24079 =  (  (  (  ( 3*C24054 ) /C23533 ) +C23978 ) /C23548 ) + (  ( C24061*C23755 ) /C23533 ) ;
    double C24081 =  (  (  (  (  ( C24055*be ) *2 ) -C23955 ) *ae ) /C23533 ) +C24079;
    double C24460 =  (  (  (  ( C24353*2 ) +C23970 ) /C23548 ) + (  ( C24054*C23755 ) /C23559 )  ) + (  (  (  (  ( be*C24452 ) *2 ) -C23929 ) *ae ) /C23533 ) ;
    double C23794 =  (  ( C23780*ae ) /C23559 ) + (  ( C23621*C23755 ) /C23533 ) ;
    double C24361 =  (  (  ( C24324+ (  ( be*C24349 ) *2 )  ) *ae ) /C23533 ) + (  (  ( C24353*C23755 ) /C23533 ) + (  ( C23794+C23944 ) /C23548 )  ) ;
    double C23808 =  (  (  ( C23794*C23755 ) /C23533 ) +C23756 ) + (  (  (  (  ( C23787*be ) *2 ) -C23569 ) *ae ) /C23533 ) ;
    double C23544 = be*zAB;
    double C23625 = C23569* ( ae- (  ( C23542* ( C23568+ ( std::pow( ( C23544/C23533 )  , 2) )  )  ) *2 )  ) ;
    double C24131 =  (  (  ( -C23840 ) *be ) /C23559 ) - (  ( C23544*C23625 ) /C23533 ) ;
    double C23816 = C23625/C23548;
    double C23854 =  (  ( C23840*ae ) /C23559 ) + (  ( C23815*C23625 ) /C23533 ) ;
    double C23868 =  (  (  ( C23815*C23854 ) /C23533 ) +C23816 ) + (  ( ae* (  (  ( be*C23847 ) *2 ) -C23569 )  ) /C23533 ) ;
    double C24095 = C23569*C23544;
    double C24396 = C23583- (  ( C24095*C23815 ) /C23559 ) ;
    double C24522 = C24396*2;
    double cnst171 = C23569*C24396;
    double C24412 =  (  (  ( C23815*C24131 ) /C23533 ) +C23816 ) + (  (  (  ( be*C24396 ) *ae ) *2 ) /C23533 ) ;
    double C24107 = - ( C24095*2. ) ;
    double C24115 = C24107/C23573;
    double C24383 = C24095/C23533;
    double C24408 =  (  ( C24382-C24383 ) /C23548 ) + (  ( C23815*C24396 ) /C23533 ) ;
    double cnst180 = C23569*C24408;
    double C24420 =  (  (  ( C24383+ (  ( be*C24408 ) *2 )  ) *ae ) /C23533 ) + (  (  ( C24131+C23854 ) /C23548 ) + (  ( C24412*C23815 ) /C23533 )  ) ;
    double C23531 = -C24383;
    double C23546 = C23531*ae;
    double C24717 = C23845- (  ( 2* ( C23546*C23544 )  ) /C23533 ) ;
    double C24098 = 2*C24717;
    double C24773 = ae*C24717;
    double C24102 = C24773*2;
    double C24130 =  ( - (  ( C24102*be ) *6 )  ) /C23548;
    double C23563 = C23546*2;
    double C24868 =  (  (  (  ( C23563*ae ) *4. ) /C23548 ) + (  (  ( C24773*C23815 ) *2 ) /C23533 )  ) *ae;
    double C24129 =  (  ( C23563- (  ( C23531*be ) *2 )  ) /C23548 ) - (  ( C23544*C24717 ) /C23533 ) ;
    double C24890 =  (  ( - ( 4* ( be*C23563 )  )  ) /C23548 ) - (  ( 2* ( C24773*C23544 )  ) /C23533 ) ;
    double C24181 = C24890*2;
    double C24912 = C24890*ae;
    double C24845 =  (  ( 6.* ( C24102*ae )  ) /C23548 ) + (  (  ( C23815*C24912 ) *2 ) /C23533 ) ;
    double C24178 = C24912*2;
    double C24214 =  ( C24178- ( 6* ( be*C24890 )  )  ) /C23548;
    double C24936 =  (  ( C24178+ ( 6*C24868 )  ) /C23548 ) + (  ( C24845*C23815 ) /C23533 ) ;
    double C24925 = -C24178;
    double C24120 =  (  ( C24912*C23544 ) *2 ) /C23533;
    double C24135 = C24130-C24120;
    double C24175 = C24135*2;
    double C24197 =  ( C24135*C23544 ) /C23533;
    double C24223 = C24214-C24197;
    double C24238 =  ( C24223*C23544 ) /C23533;
    double C24766 = C24197-C24214;
    double C24857 =  (  (  ( 6*C24912 ) +C24178 ) /C23548 ) + (  ( C23815*C24135 ) /C23533 ) ;
    double C24755 = C24120-C24130;
    double C24882 =  (  (  ( C24102+ ( C24773*4 )  ) /C23548 ) + (  ( C23815*C24890 ) /C23533 )  ) *ae;
    double C24940 =  (  ( C23815*C24857 ) /C23533 ) + (  (  ( C24845+C24135 ) + ( 6*C24882 )  ) /C23548 ) ;
    double C24222 =  (  ( C24102- (  ( be*C24717 ) *4 )  ) /C23548 ) - (  ( C24890*C23544 ) /C23533 ) ;
    double C24889 =  (  ( C24222*C23815 ) /C23533 ) + (  ( C24181+ (  ( C24129*ae ) *4 )  ) /C23548 ) ;
    double C24874 =  (  (  ( 6* ( C24222*ae )  ) +C24175 ) /C23548 ) + (  ( C24223*C23815 ) /C23533 ) ;
    double C24946 =  (  ( C23815*C24874 ) /C23533 ) + (  (  ( 6* ( ae*C24889 )  ) + ( C24223+ ( C24857*2 )  )  ) /C23548 ) ;
    double C24245 =  (  ( C24181- (  ( be*C24129 ) *4 )  ) /C23548 ) - (  ( C24222*C23544 ) /C23533 ) ;
    double C24250 =  ( C24175- ( 6* ( be*C24222 )  )  ) /C23548;
    double C24255 = C24250-C24238;
    double C24873 =  (  ( C23815*C24255 ) /C23533 ) + (  (  ( 6* ( C24245*ae )  ) + ( C24223*3 )  ) /C23548 ) ;
    double C24739 = C24238-C24250;
    double C23848 = C23914+ (  (  ( C23815*C23546 ) *2 ) /C23533 ) ;
    double C23860 =  (  ( C23563+ (  ( C24382*ae ) *2 )  ) /C23548 ) + (  ( C23815*C23848 ) /C23533 ) ;
    double C24398 =  (  ( C23546*4. ) /C23548 ) + (  ( C23815*C24717 ) /C23533 ) ;
    double cnst268 = C24398*C23569;
    double C24409 =  (  (  ( C23848+C24717 ) + (  ( C24396*ae ) *2 )  ) /C23548 ) + (  ( C24398*C23815 ) /C23533 ) ;
    double cnst275 = C23531*C23569;
    double C24122 = C23583+ (  ( C23569* ( std::pow(C23544 , 2) )  ) /C23559 ) ;
    double C24192 =  ( C24122*ae ) *2;
    double C24148 =  (  ( be* ( C24192-C23569 )  ) /C23533 ) + ( C23816- (  ( C24131*C23544 ) /C23533 )  ) ;
    double C24221 =  (  ( C24192+C24098 ) /C23548 ) + (  ( C23815*C24129 ) /C23533 ) ;
    double C24201 = C24115+ (  ( C23815*C24122 ) /C23533 ) ;
    double C24540 =  (  ( C24221*C23815 ) /C23533 ) + (  (  (  ( ae*C24201 ) *2 ) + (  ( C24398*2 ) +C24129 )  ) /C23548 ) ;
    double C24233 =  (  ( C23815*C24148 ) +C24131 ) + ( 2* (  ( be*C24201 ) *ae )  ) ;
    double cnst299 = C23569*C24201;
    double C24537 =  (  ( C24522+C24122 ) /C23548 ) + (  ( C23815*C24201 ) /C23533 ) ;
    double C24545 =  (  (  ( C24233*C23815 ) /C23559 ) + (  ( C24148+ ( C24412*2 )  ) /C23548 )  ) + (  ( ae* (  (  ( be*C24537 ) *2 ) -C24122 )  ) /C23533 ) ;
    double cnst305 = C24537*C23569;
    double C24144 =  (  ( C24098- (  ( be*C24122 ) *2 )  ) /C23548 ) - (  ( C24129*C23544 ) /C23533 ) ;
    double cnst314 =  (  (  ( C24222*3 ) + ( cnst12*C24144 )  ) /C23548 ) + (  ( C23815*C24245 ) /C23533 ) ;
    double cnst318 =  (  (  ( C24255+ ( C24874*3 )  ) + ( cnst40*cnst314 )  ) /C23548 ) + (  ( C23815*C24873 ) /C23533 ) ;
    double cnst326 = C23569*C24122;
    double C24139 = C24115- (  ( C24122*C23544 ) /C23533 ) ;
    double C24200 =  (  ( C24122*3. ) /C23548 ) + (  ( C24139*C23815 ) /C23533 ) ;
    double cnst336 = C24200*C23569;
    double cnst339 = C24139*C23569;
    double C24234 =  (  ( C24200*C23815 ) /C23533 ) + (  (  ( 3*C24201 ) +C24139 ) /C23548 ) ;
    double cnst342 = C24234*C23569;
    double C24190 =  ( C24139*ae ) *2;
    double C24155 =  (  ( be* ( C24190- ( C24107/C23533 )  )  ) /C23533 ) + (  ( C24131/C23533 ) - (  ( C24148*C23544 ) /C23533 )  ) ;
    double C24240 =  (  (  ( C24148*3 ) /C23548 ) + (  ( C23815*C24155 ) /C23533 )  ) + (  (  (  ( C24200*be ) *ae ) *2 ) /C23533 ) ;
    double C24258 =  (  ( C23815*C24240 ) /C23533 ) + (  (  (  ( C24233*3 ) /C23533 ) +C24155 ) /C23548 ) ;
    double C24260 = C24258+ (  ( ae* (  ( 2* ( C24234*be )  ) -C24139 )  ) /C23533 ) ;
    double C24220 =  (  (  ( C24129*3 ) +C24190 ) /C23548 ) + (  ( C23815*C24144 ) /C23533 ) ;
    double C24254 =  (  ( C23815*C24220 ) /C23533 ) + (  (  ( 2* ( C24200*ae )  ) + (  ( C24221*3 ) +C24144 )  ) /C23548 ) ;
    double C23535 = xAB*be;
    double C23580 = C23535*C23569;
    double C24290 = C23583- (  ( C23538*C23580 ) /C23559 ) ;
    double cnst376 = C23569*C24290;
    double C23920 =  ( C23580*ae ) *2;
    double C23591 = - ( C23580*2. ) ;
    double C23602 = C23591/C23573;
    double C24481 = C23580/C23533;
    double C23523 = -C24481;
    double C23534 = C23523*ae;
    double C23584 = C23845- (  (  ( C23535*C23534 ) *2 ) /C23533 ) ;
    double C23595 = ae*C23584;
    double C23608 = C23595*2;
    double C23659 =  ( - ( 6* ( be*C23608 )  )  ) /C23548;
    double C24288 =  (  ( C23538*C23584 ) /C23533 ) + (  ( C23534*4. ) /C23548 ) ;
    double cnst505 = C23569*C24288;
    double C23592 = C23584*2;
    double C23551 = C23534*2;
    double cnst538 = C23531* ( C24460*C23551 ) ;
    double cnst542 = C24545* ( C23529*C23551 ) ;
    double C23648 =  (  ( - (  ( be*C23551 ) *4 )  ) /C23548 ) - (  (  ( C23595*C23535 ) *2 ) /C23533 ) ;
    double C23660 = C23648*ae;
    double C23674 = C23660*2;
    double C24733 = -C23674;
    double gx030020 =  (  ( C24055*C23551 ) *C23625 ) + (  ( C23569* ( C23551*C24081 )  ) + (  ( cnst131*C24733 ) /2.0 )  ) ;
    double C23695 =  (  ( C23535*C23660 ) *2 ) /C23533;
    double C23705 = C23659-C23695;
    double C23712 = C23705*2;
    double C24853 =  (  ( C23538*C23705 ) /C23533 ) + (  ( C23674+ ( 6*C23660 )  ) /C23548 ) ;
    double gx111110 =  (  ( C23531* ( C24288*C24353 )  ) - (  ( C24853* ( C23531*C24337 )  ) /2.0 )  ) + (  ( C24337*C24288 ) *C24131 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 0] += cnst9*gx111110;
    double gx102101 =  (  ( C24201* ( C23621*C24288 )  ) - (  ( C24853*cnst299 ) /2.0 )  ) + (  ( C24233*cnst505 ) /C23533 ) ;
    double gx120110 =  (  (  ( C24054*cnst505 ) /C23533 ) - (  ( cnst117*C24853 ) /2.0 )  ) + ( C23625* ( C24022*C24288 )  ) ;
    double gx111101 =  ( C24412* ( C24288*C23529 )  ) + (  (  ( C24288*C23944 ) *C24396 ) - (  ( C24853* ( C24396*C23529 )  ) /2.0 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 3] += gx111101*cnst9;
    double gx102110 =  (  ( C24288*C24323 ) *C24148 ) + (  ( C24122* ( C24288*C23794 )  ) - (  (  ( C24122*C24323 ) *C24853 ) /2.0 )  ) ;
    double gx120101 =  (  ( C23929*C24288 ) *C23854 ) + (  ( C24382* ( C23970*C24288 )  ) - (  ( C24853* ( C23929*C24382 )  ) /2.0 )  ) ;
    double C23722 =  ( C23705*C23535 ) /C23533;
    double C24765 = C23695-C23659;
    double gx111002 =  (  (  ( C23944*C23584 ) *C24408 ) + (  ( C24765* ( C23529*C24408 )  ) /2.0 )  ) + ( C24420* ( C23529*C23584 )  ) ;
    double gx102011 =  (  (  ( C23794*C23584 ) *C24201 ) + (  ( C24765* ( C24323*C24201 )  ) /2.0 )  ) + (  ( C24233* ( C23584*C24323 )  ) /C23533 ) ;
    double cnst612 =  (  ( C24054* ( C24382*C23584 )  ) /C23533 ) + (  ( C24765* ( C24382*C24022 )  ) /2.0 ) ;
    double gx120011 =  (  ( C24022*C23584 ) *C23854 ) +cnst612;
    double gx102020 =  ( C24148* ( C23787*C23584 )  ) + (  ( C24122* ( C23584*C23808 )  ) + (  ( C24765* ( C23787*C24122 )  ) /2.0 )  ) ;
    double gx120020 =  (  ( C23569* ( C24460*C23584 )  ) + (  ( C24765*cnst116 ) /2.0 )  ) + (  ( C23584*C24452 ) *C23625 ) ;
    double gx120002 =  (  ( C23929*C23584 ) *C23868 ) + (  (  ( C24765* ( C23929*C23847 )  ) /2.0 ) + (  ( C23970*C23584 ) *C23847 )  ) ;
    double gx111020 =  (  (  ( C24765* ( C23531*C24349 )  ) /2.0 ) + ( C23531* ( C24361*C23584 )  )  ) + (  ( C24349*C23584 ) *C24131 ) ;
    double gx102002 =  (  ( C23569*C23584 ) *C24545 ) + (  (  ( C23621*C23584 ) *C24537 ) + (  ( C24765*cnst305 ) /2.0 )  ) ;
    double gx111011 =  (  (  ( C23584*C24353 ) *C24396 ) + (  ( C24765* ( C24337*C24396 )  ) /2.0 )  ) + ( C24412* ( C24337*C23584 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 1] += gx111011*cnst9;
    double C24847 =  (  ( 6.* ( C23608*ae )  ) /C23548 ) + (  (  ( C23538*C23660 ) *2 ) /C23533 ) ;
    double C23663 = C23648*2;
    double C24887 =  (  (  ( C23538*C23648 ) /C23533 ) + (  (  ( C23595*4 ) +C23608 ) /C23548 )  ) *ae;
    double C24942 =  (  ( C23538*C24853 ) /C23533 ) + (  (  ( C23705+C24847 ) + ( 6*C24887 )  ) /C23548 ) ;
    double C23686 =  (  ( C23608- ( 4* ( be*C23584 )  )  ) /C23548 ) - (  ( C23648*C23535 ) /C23533 ) ;
    double C23727 =  ( C23712- ( 6* ( C23686*be )  )  ) /C23548;
    double C23697 =  ( C23674- (  ( be*C23648 ) *6 )  ) /C23548;
    double C23728 = C23697-C23722;
    double C23736 =  ( C23535*C23728 ) /C23533;
    double C23740 = C23727-C23736;
    double C24718 = C23736-C23727;
    double C24863 =  (  (  ( 6* ( C23686*ae )  ) +C23712 ) /C23548 ) + (  ( C23538*C23728 ) /C23533 ) ;
    double C24750 = C23722-C23697;
    double gx021002 =  ( C24420* ( C23929*C23551 )  ) + (  (  ( C23970*C23551 ) *C24408 ) + (  (  ( C23929*C24408 ) *C24733 ) /2.0 )  ) ;
    double gx012011 =  (  ( C24233* ( C24337*C23551 )  ) /C23533 ) + (  (  ( C23551*C24353 ) *C24201 ) + (  (  ( C24337*C24201 ) *C24733 ) /2.0 )  ) ;
    double gx030002 =  (  (  (  ( C23955*C23847 ) *C24733 ) /2.0 ) + (  ( C23551*C23978 ) *C23847 )  ) + ( C23868* ( C23955*C23551 )  ) ;
    double C24870 = ae* (  (  ( 4.* ( C23551*ae )  ) /C23548 ) + (  (  ( C23538*C23595 ) *2 ) /C23533 )  ) ;
    double C24937 =  (  ( C23538*C24847 ) /C23533 ) + (  ( C23674+ ( 6*C24870 )  ) /C23548 ) ;
    double gx021020 =  (  ( C23551*C24452 ) *C24131 ) + ( cnst538+ (  (  ( C23531*C24452 ) *C24733 ) /2.0 )  ) ;
    double gx003002 =  (  (  ( C24733*cnst342 ) /2.0 ) + ( C24234* ( C23621*C23551 )  )  ) + (  ( C23569*C23551 ) *C24260 ) ;
    double gx012002 = cnst542+ (  ( C24537* ( C23551*C23944 )  ) + (  (  ( C24537*C23529 ) *C24733 ) /2.0 )  ) ;
    double gx030011 =  (  ( C24021*C23551 ) *C23854 ) + (  (  (  ( C24382*C24021 ) *C24733 ) /2.0 ) + (  ( C24061*C23551 ) *C24382 )  ) ;
    double gx003011 =  (  (  ( C24733* ( C24200*C24323 )  ) /2.0 ) + ( C24200* ( C23551*C23794 )  )  ) + ( C24240* ( C23551*C24323 )  ) ;
    double gx012020 =  (  (  ( C24361*C23551 ) *C24122 ) + (  (  ( C24122*C24349 ) *C24733 ) /2.0 )  ) + (  ( C23551*C24349 ) *C24148 ) ;
    double gx003020 =  (  (  (  ( C24139*C23787 ) *C24733 ) /2.0 ) + ( C24139* ( C23551*C23808 )  )  ) + (  ( C23787*C23551 ) *C24155 ) ;
    double cnst764 =  (  (  ( C24022*C24396 ) *C24733 ) /2.0 ) + (  ( C24054* ( C23534*C24522 )  ) /C23533 ) ;
    double gx021011 = cnst764+ ( C24412* ( C24022*C23551 )  ) ;
    double C23926 = C23914+ (  (  ( C23538*C23534 ) *2 ) /C23533 ) ;
    double C24493 =  (  ( C23538*C24288 ) /C23533 ) + (  (  (  ( C24290*ae ) *2 ) + ( C23926+C23584 )  ) /C23548 ) ;
    double gx111200 =  (  ( C23531* ( C23944*C24493 )  ) - (  (  ( C23531*C23529 ) *C24942 ) /2.0 )  ) + (  ( C23529*C24493 ) *C24131 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 2] +=  (  ( cnst41*gx111002 ) - (  ( gx111020*cnst1 ) + ( gx111200*cnst1 )  )  ) *cc;
    double gx120200 =  (  ( C23929*C24493 ) *C23625 ) + (  ( C23569* ( C23970*C24493 )  ) - (  ( cnst96*C24942 ) /2.0 )  ) ;
    double gx102200 =  (  ( C24122* ( C23621*C24493 )  ) - (  ( C24942*cnst326 ) /2.0 )  ) + (  ( C23569*C24493 ) *C24148 ) ;
    double gx030101 =  (  ( C23926*C23955 ) *C23854 ) + (  (  ( C23926*C23978 ) *C24382 ) - (  (  ( C24382*C23955 ) *C24847 ) /2.0 )  ) ;
    double cnst805 =  (  (  ( C23531*C23926 ) *C24054 ) /C23533 ) - (  ( C24847* ( C23531*C24022 )  ) /2.0 ) ;
    double gx021110 = cnst805+ (  ( C24022*C23926 ) *C24131 ) ;
    double gx030110 =  (  (  ( C24061*C23926 ) *C23569 ) - (  ( cnst122*C24847 ) /2.0 )  ) + (  ( C23926*C24021 ) *C23625 ) ;
    double gx021101 =  (  ( C24396* ( C23970*C23926 )  ) - (  (  ( C23929*C24396 ) *C24847 ) /2.0 )  ) + ( C24412* ( C23929*C23926 )  ) ;
    double gx003110 =  (  ( C24139* ( C23926*C23794 )  ) - (  (  ( C24139*C24323 ) *C24847 ) /2.0 )  ) + (  ( C23926*C24323 ) *C24155 ) ;
    double C23951 =  (  ( C23538*C23926 ) /C23533 ) + (  (  (  ( C24480*ae ) *2 ) +C23551 ) /C23548 ) ;
    double gx012200 =  (  ( C23951*C23529 ) *C24148 ) + (  (  ( C23951*C23944 ) *C24122 ) - (  ( C24937* ( C23529*C24122 )  ) /2.0 )  ) ;
    double gx030200 =  (  ( C23569* ( C23951*C23978 )  ) - (  ( C24937*cnst128 ) /2.0 )  ) + (  ( C23951*C23955 ) *C23625 ) ;
    double gx003200 =  (  ( C24139* ( C23951*C23621 )  ) - (  ( C24937*cnst339 ) /2.0 )  ) + (  ( C23951*C23569 ) *C24155 ) ;
    double gx021200 =  (  ( C23531* ( C23951*C23970 )  ) - (  ( C24937* ( C23929*C23531 )  ) /2.0 )  ) + (  ( C23951*C23929 ) *C24131 ) ;
    double gx003101 =  (  ( C23569*C23926 ) *C24240 ) + (  ( C24200* ( C23926*C23621 )  ) - (  ( cnst336*C24847 ) /2.0 )  ) ;
    double gx012110 =  (  ( C24337*C23926 ) *C24148 ) + (  ( C24122* ( C23926*C24353 )  ) - (  (  ( C24337*C24122 ) *C24847 ) /2.0 )  ) ;
    double gx012101 =  (  (  ( C23926*C23944 ) *C24201 ) - (  ( C24847* ( C23529*C24201 )  ) /2.0 )  ) + (  ( C24233* ( C23926*C23529 )  ) /C23533 ) ;
    double C23619 =  (  ( C23551- (  ( C23523*be ) *2 )  ) /C23548 ) - (  ( C23535*C23584 ) /C23533 ) ;
    double C24876 =  (  (  ( 4* ( C23619*ae )  ) +C23663 ) /C23548 ) + (  ( C23538*C23686 ) /C23533 ) ;
    double C24944 =  (  ( C23538*C24863 ) /C23533 ) + (  (  (  ( C24876*ae ) *6 ) + (  ( C24853*2 ) +C23728 )  ) /C23548 ) ;
    double gx201002 =  ( C24420* ( C23619*C23569 )  ) + (  (  ( C24750*cnst180 ) /2.0 ) + (  ( C23619*C23621 ) *C24408 )  ) ;
    double gx210002 =  (  (  (  ( C23529*C23847 ) *C24750 ) /2.0 ) + ( C23847* ( C23619*C23944 )  )  ) + ( C23868* ( C23619*C23529 )  ) ;
    double gx210011 =  (  ( C24337*C23619 ) *C23854 ) + (  ( C24382* ( C23619*C24353 )  ) + (  ( C24750* ( C24382*C24337 )  ) /2.0 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 1] += - ( cc* (  (  ( cnst34*gx012011 ) + ( gx210011*cnst36 )  ) + ( cnst36*gx030011 )  )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 1] +=  (  ( gx210011*cnst33 ) - ( cnst18*gx030011 )  ) *cc;
    double gx201011 =  ( C24412* ( C23619*C24323 )  ) + (  (  ( C24750* ( C24396*C24323 )  ) /2.0 ) + (  ( C23619*C23794 ) *C24396 )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 1] += cc* (  (  ( gx003011*cnst39 ) - ( cnst5*gx201011 )  ) - ( gx021011*cnst5 )  ) ;
    gx[(Ai + 5) * matrix_size + Bi + 1] += cc* (  ( gx201011*cnst0 ) - ( gx021011*cnst0 )  ) ;
    double gx201020 =  (  (  (  ( C23531*C23787 ) *C24750 ) /2.0 ) + ( C23531* ( C23619*C23808 )  )  ) + (  ( C23787*C23619 ) *C24131 ) ;
    double C23714 =  (  ( C23663- (  ( be*C23619 ) *4 )  ) /C23548 ) - (  ( C23686*C23535 ) /C23533 ) ;
    double C24862 =  (  ( C23538*C23740 ) /C23533 ) + (  (  ( 3*C23728 ) + ( 6* ( C23714*ae )  )  ) /C23548 ) ;
    double gx210020 =  (  ( C23619*C24349 ) *C23625 ) + (  ( C23569* ( C24361*C23619 )  ) + (  ( cnst57*C24750 ) /2.0 )  ) ;
    double cnst953 = C23523*C23569;
    double C24492 =  (  ( C23538*C24290 ) /C23533 ) + (  ( C24480-C24481 ) /C23548 ) ;
    double cnst1005 = C23569*C24492;
    double C23601 = C23583+ (  (  ( std::pow(C23535 , 2) ) *C23569 ) /C23559 ) ;
    double C23642 = C23602- (  ( C23601*C23535 ) /C23533 ) ;
    double C23652 = C23642*ae;
    double C23666 = 2*C23652;
    double cnst1056 = C23642*C23569;
    double cnst1076 = C23601*C23569;
    double C23643 = C23602+ (  ( C23538*C23601 ) /C23533 ) ;
    double cnst1099 = C23569*C23643;
    double C24302 =  (  ( C23538*C23643 ) /C23533 ) + (  (  ( C24290*2 ) +C23601 ) /C23548 ) ;
    double cnst1132 = C23569*C24302;
    double C23680 =  (  ( C23601*3. ) /C23548 ) + (  ( xAB*C23652 ) /C23533 ) ;
    double C23710 =  (  ( C23538*C23680 ) /C23533 ) + (  (  ( C23643*3 ) +C23642 ) /C23548 ) ;
    double cnst1152 = C23710*C23569;
    double cnst1161 = C23680*C23569;
    double C23656 =  (  ( C23592- (  ( C23601*be ) *2 )  ) /C23548 ) - (  ( C23535*C23619 ) /C23533 ) ;
    double cnst1189 =  (  (  ( C23686*3 ) + ( cnst12*C23656 )  ) /C23548 ) + (  ( C23538*C23714 ) /C23533 ) ;
    double cnst1193 =  (  ( C23538*C24862 ) /C23533 ) + (  (  ( cnst40*cnst1189 ) + (  ( C24863*3 ) +C23740 )  ) /C23548 ) ;
    double C23693 =  (  (  ( C23619*3 ) +C23666 ) /C23548 ) + (  ( C23538*C23656 ) /C23533 ) ;
    double gx300110 =  (  ( C23569* ( C23693*C23794 )  ) - (  ( cnst44*C24862 ) /2.0 )  ) + (  ( C23693*C24323 ) *C23625 ) ;
    gx[(Ai + 6) * matrix_size + Bi + 0] +=  (  ( gx120110*cnst33 ) + ( gx300110*cnst18 )  ) *cc;
    gx[(Ai + 4) * matrix_size + Bi + 0] += cc* (  ( cnst34*gx102110 ) - (  ( gx120110*cnst36 ) + ( cnst36*gx300110 )  )  ) ;
    double gx300101 =  (  ( C23693*C23569 ) *C23854 ) + (  ( C24382* ( C23693*C23621 )  ) - (  ( cnst42*C24862 ) /2.0 )  ) ;
    gx[(Ai + 4) * matrix_size + Bi + 3] += cc* (  ( cnst34*gx102101 ) - (  ( gx300101*cnst36 ) + ( cnst36*gx120101 )  )  ) ;
    gx[(Ai + 6) * matrix_size + Bi + 3] += cc* (  ( gx300101*cnst18 ) + ( gx120101*cnst33 )  ) ;
    double gx300011 =  (  (  ( C24718* ( C24382*C24323 )  ) /2.0 ) + ( C24382* ( C23794*C23656 )  )  ) + ( C23854* ( C23656*C24323 )  ) ;
    gx[(Ai + 6) * matrix_size + Bi + 1] += cc* (  ( cnst18*gx300011 ) + ( gx120011*cnst33 )  ) ;
    gx[(Ai + 4) * matrix_size + Bi + 1] +=  (  ( gx102011*cnst34 ) - (  ( cnst36*gx300011 ) + ( gx120011*cnst36 )  )  ) *cc;
    double gx300002 =  (  ( C23847* ( C23621*C23656 )  ) + (  ( cnst52*C24718 ) /2.0 )  ) + (  ( C23569*C23656 ) *C23868 ) ;
    double gx300020 =  (  ( C23787*C23656 ) *C23625 ) + (  (  ( cnst51*C24718 ) /2.0 ) + ( C23569* ( C23656*C23808 )  )  ) ;
    double C23628 =  ( C23601*ae ) *2;
    double C23658 =  (  ( C23628+C23592 ) /C23548 ) + (  ( C23538*C23619 ) /C23533 ) ;
    double C23720 =  (  ( C23538*C23693 ) /C23533 ) + (  (  ( C23656+ ( C23658*3 )  ) + (  ( C23680*ae ) *2 )  ) /C23548 ) ;
    double cnst1249 =  ( C23569* ( C23720*C23621 )  ) - (  ( cnst1193* ( std::pow(C23569 , 2) )  ) /2.0 ) ;
    double gx300200 =  (  ( C23720*C23569 ) *C23625 ) +cnst1249;
    double cnst1253 =  (  (  ( cnst14*gx300020 ) + ( gx300200*cnst14 )  ) - ( gx300002*cnst38 )  ) + ( cnst14*gx120200 ) ;
    double cnst1256 =  (  (  ( cnst14*gx120020 ) +cnst1253 ) - ( gx120002*cnst38 )  ) - ( cnst10*gx102200 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 2] +=  (  ( cnst1256- ( cnst10*gx102020 )  ) + ( cnst7*gx102002 )  ) *cc;
    double cnst1265 =  (  ( cnst26*gx120200 ) + (  ( gx300200*cnst16 ) - ( cnst16*gx300020 )  )  ) - ( gx120020*cnst26 ) ;
    gx[(Ai + 6) * matrix_size + Bi + 4] += cc*cnst1265;
    double cnst1269 =  (  (  ( gx300020*cnst28 ) - ( gx300200*cnst28 )  ) - ( cnst28*gx120200 )  ) + ( gx120020*cnst28 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 4] += cc* (  (  ( gx102200*cnst4 ) +cnst1269 ) - ( cnst4*gx102020 )  ) ;
    double C24303 =  (  (  ( C23619+ ( C24288*2 )  ) + (  ( C23643*ae ) *2 )  ) /C23548 ) + (  ( C23538*C23658 ) /C23533 ) ;
    double gx210200 =  (  ( C24303*C23529 ) *C23625 ) + (  ( C23569* ( C24303*C23944 )  ) - (  ( cnst58*C24944 ) /2.0 )  ) ;
    double cnst1278 =  ( gx210200*cnst14 ) + (  (  ( cnst14*gx030020 ) + ( cnst14*gx030200 )  ) - ( cnst38*gx030002 )  ) ;
    double cnst1281 =  ( cnst10*gx012200 ) + (  ( cnst1278+ ( cnst14*gx210020 )  ) - ( gx210002*cnst38 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 2] += cc* (  ( cnst1281+ ( cnst10*gx012020 )  ) - ( cnst7*gx012002 )  ) ;
    double cnst1286 =  ( cnst28*gx210020 ) + (  (  ( gx030020*cnst28 ) - ( gx030200*cnst28 )  ) - ( gx210200*cnst28 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 4] += cc* (  ( gx012020*cnst4 ) + ( cnst1286- ( gx012200*cnst4 )  )  ) ;
    double cnst1291 =  (  ( gx210200*cnst26 ) + (  ( gx030020*cnst16 ) - ( gx030200*cnst16 )  )  ) - ( cnst26*gx210020 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 4] += cc*cnst1291;
    double gx201200 =  (  ( C23531* ( C24303*C23621 )  ) - (  ( cnst275*C24944 ) /2.0 )  ) + (  ( C24303*C23569 ) *C24131 ) ;
    double cnst1299 =  (  (  ( cnst3*gx003200 ) - ( cnst3*gx003020 )  ) - ( gx201200*cnst2 )  ) + ( cnst2*gx201020 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 4] += cc* (  ( gx021020*cnst2 ) + ( cnst1299- ( cnst2*gx021200 )  )  ) ;
    double cnst1303 =  ( gx201200*0.75 ) + ( gx003002+ (  ( - ( 0.5*gx003200 )  ) - ( 0.5*gx003020 )  )  ) ;
    double cnst1307 =  ( gx021020*0.75 ) + (  ( 0.75*gx021200 ) + (  (  ( gx201020*0.75 ) +cnst1303 ) - ( 1.5*gx201002 )  )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 2] += cc* ( cnst1307- ( gx021002*1.5 )  ) ;
    double cnst1312 =  (  (  ( gx201200*cnst11 ) - ( cnst11*gx201020 )  ) - ( cnst11*gx021200 )  ) + ( gx021020*cnst11 ) ;
    gx[(Ai + 5) * matrix_size + Bi + 4] += cnst1312*cc;
    double cnst1316 =  (  ( cnst6*gx201002 ) - (  ( cnst31*gx201020 ) + ( gx201200*cnst31 )  )  ) + ( cnst31*gx021200 ) ;
    gx[(Ai + 5) * matrix_size + Bi + 2] +=  (  ( cnst1316+ ( gx021020*cnst31 )  ) - ( gx021002*cnst6 )  ) *cc;
    double gx210110 =  (  ( C24337*C23658 ) *C23625 ) + (  ( C23569* ( C23658*C24353 )  ) - (  ( C24863*cnst55 ) /2.0 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 0] += - ( cc* (  (  ( cnst34*gx012110 ) + ( gx210110*cnst36 )  ) + ( cnst36*gx030110 )  )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 0] += cc* (  ( gx210110*cnst33 ) - ( cnst18*gx030110 )  ) ;
    double gx210101 =  (  ( C24382* ( C23658*C23944 )  ) - (  ( C24863* ( C24382*C23529 )  ) /2.0 )  ) + (  ( C23658*C23529 ) *C23854 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 3] += - ( cc* (  (  ( gx012101*cnst34 ) + ( cnst36*gx210101 )  ) + ( gx030101*cnst36 )  )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 3] += cc* (  ( gx210101*cnst33 ) - ( gx030101*cnst18 )  ) ;
    double gx201110 =  (  ( C23658*C24323 ) *C24131 ) + (  ( C23531* ( C23658*C23794 )  ) - (  (  ( C23531*C24323 ) *C24863 ) /2.0 )  ) ;
    gx[(Ai + 5) * matrix_size + Bi + 0] += cc* (  ( cnst0*gx201110 ) - ( cnst0*gx021110 )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 0] += cc* (  (  ( gx003110*cnst39 ) - ( cnst5*gx201110 )  ) - ( cnst5*gx021110 )  ) ;
    double gx201101 =  (  (  ( C23658*C23621 ) *C24396 ) - (  ( C24863*cnst171 ) /2.0 )  ) + ( C24412* ( C23658*C23569 )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 3] += cc* (  (  ( gx003101*cnst39 ) - ( cnst5*gx201101 )  ) - ( cnst5*gx021101 )  ) ;
    gx[(Ai + 5) * matrix_size + Bi + 3] +=  (  ( gx201101*cnst0 ) - ( cnst0*gx021101 )  ) *cc;
    double C23627 = C23569* ( ae- (  ( C23542* ( C23568+ ( std::pow( ( C23535/C23533 )  , 2) )  )  ) *2 )  ) ;
    double C23664 =  (  ( be* ( -C23920 )  ) /C23559 ) - (  ( C23535*C23627 ) /C23533 ) ;
    double gy111002 =  ( C24420* ( C23789*C23523 )  ) + (  (  ( C23789*C23664 ) *C24408 ) + (  (  ( C23523*C24408 ) *C24749 ) /2.0 )  ) ;
    double gy102002 =  (  (  (  ( C23523*C24537 ) *C24716 ) /2.0 ) + ( C24537* ( C23562*C23664 )  )  ) +cnst542;
    double gz102011 =  (  ( C24221* ( C24323*C23664 )  ) + ( C24221* ( C23523*C23794 )  )  ) - (  (  ( C23523*C24323 ) *C24874 ) /2.0 ) ;
    double gz111020 =  (  ( C24755* ( C23523*C24349 )  ) /2.0 ) + (  (  ( C24349*C23664 ) *C24717 ) + ( C24717* ( C23523*C24361 )  )  ) ;
    double gz102020 =  (  ( C24129* ( C23523*C23808 )  ) + ( C24129* ( C23787*C23664 )  )  ) + (  ( C24766* ( C23523*C23787 )  ) /2.0 ) ;
    double gz120020 =  (  ( C24925* ( C23523*C24452 )  ) /2.0 ) + ( cnst538+ (  ( C24452*C23664 ) *C23563 )  ) ;
    double gz111002 =  (  (  ( C23523*C23944 ) *C24409 ) + (  ( C23529*C23664 ) *C24409 )  ) - (  ( C24940* ( C23523*C23529 )  ) /2.0 ) ;
    double gy120020 =  (  ( C23523*C24455 ) *C23625 ) + (  ( C23569* ( C24455*C23664 )  ) - (  ( C24945*cnst953 ) /2.0 )  ) ;
    double gz120011 =  (  ( C23848* ( C24022*C23664 )  ) + (  ( C24054* ( C23523*C23848 )  ) /C23533 )  ) - (  ( C24845* ( C23523*C24022 )  ) /2.0 ) ;
    double gz102002 =  (  (  ( C23523*C23621 ) *C24540 ) + (  ( C23569*C23664 ) *C24540 )  ) - (  ( C24946*cnst953 ) /2.0 ) ;
    double gy120011 =  (  ( C24382* ( C24042*C23664 )  ) - (  ( C24872* ( C23523*C24382 )  ) /2.0 )  ) + ( C23854* ( C23523*C24042 )  ) ;
    double gy111020 =  (  ( C23531* ( C24350*C23664 )  ) - (  (  ( C23531*C23523 ) *C24939 ) /2.0 )  ) + ( C24131* ( C23523*C24350 )  ) ;
    double gy120002 =  (  ( C23523*C23941 ) *C23868 ) + (  ( C23847* ( C23941*C23664 )  ) + (  ( C24760* ( C23523*C23847 )  ) /2.0 )  ) ;
    double gy102011 =  (  (  ( C23788*C23523 ) *C24233 ) /C23533 ) + (  (  ( C23788*C23664 ) *C24201 ) - (  (  ( C23523*C24201 ) *C24843 ) /2.0 )  ) ;
    double gy102020 =  (  (  ( C23800*C23664 ) *C24122 ) - (  ( C24935* ( C23523*C24122 )  ) /2.0 )  ) + ( C24148* ( C23523*C23800 )  ) ;
    double gz120002 =  (  (  ( C23929*C23664 ) *C23860 ) + ( C23860* ( C23523*C23970 )  )  ) - (  ( C24936* ( C23929*C23523 )  ) /2.0 ) ;
    double gz111011 =  (  ( C24398* ( C23523*C24353 )  ) + ( C24398* ( C24337*C23664 )  )  ) - (  ( C24857* ( C23523*C24337 )  ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 1] += cnst9*gz111011;
    double gy111011 =  (  ( C24396* ( C24339*C23664 )  ) - (  (  ( C23523*C24396 ) *C24855 ) /2.0 )  ) + ( C24412* ( C23523*C24339 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 1] += cnst9*gy111011;
    double gy012011 =  (  (  ( C23627*C24339 ) *C24201 ) - (  ( cnst299*C24855 ) /2.0 )  ) + (  ( C24233*cnst90 ) /C23533 ) ;
    double gz030002 =  (  (  ( C23627*C23955 ) *C23860 ) + (  ( C23569*C23978 ) *C23860 )  ) - (  ( C24936*cnst128 ) /2.0 ) ;
    double C23640 = C23627/C23548;
    double C24304 =  (  (  (  ( be*C24290 ) *ae ) *2 ) /C23533 ) + (  (  ( C23538*C23664 ) /C23533 ) +C23640 ) ;
    double gy111101 =  (  ( C24396* ( C23789*C24304 )  ) + (  ( C24749* ( C24396*C24290 )  ) /2.0 )  ) + ( C24412* ( C23789*C24290 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 3] += gy111101*cnst9;
    double gy102110 =  (  ( C24122* ( C23788*C24304 )  ) - (  (  ( C24290*C24122 ) *C24843 ) /2.0 )  ) + ( C24148* ( C23788*C24290 )  ) ;
    double gz102110 =  (  ( C24766* ( C24290*C24323 )  ) /2.0 ) + (  ( C24129* ( C24290*C23794 )  ) + (  ( C24323*C24304 ) *C24129 )  ) ;
    double gz102101 =  (  ( C24221* ( C23569*C24304 )  ) + ( C24221* ( C23621*C24290 )  )  ) - (  ( C24874*cnst376 ) /2.0 ) ;
    double gz111101 =  (  ( C24398* ( C24290*C23944 )  ) + ( C24398* ( C23529*C24304 )  )  ) - (  (  ( C23529*C24290 ) *C24857 ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 3] += cnst9*gz111101;
    double gy102101 =  (  (  ( C23562*C24304 ) *C24201 ) + (  (  ( C24290*C24201 ) *C24716 ) /2.0 )  ) + (  ( C24233* ( C23562*C24290 )  ) /C23533 ) ;
    double gy120101 =  (  (  ( C24760* ( C24382*C24290 )  ) /2.0 ) + ( C24382* ( C23941*C24304 )  )  ) + (  ( C23941*C24290 ) *C23854 ) ;
    double gz111110 =  (  (  ( C24337*C24304 ) *C24717 ) + (  ( C24290*C24353 ) *C24717 )  ) + (  ( C24755* ( C24337*C24290 )  ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 0] += gz111110*cnst9;
    double gy111110 =  (  ( C23531* ( C24339*C24304 )  ) - (  (  ( C23531*C24290 ) *C24855 ) /2.0 )  ) + (  ( C24290*C24339 ) *C24131 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 0] += gy111110*cnst9;
    double gz120101 =  (  ( C23848* ( C23970*C24290 )  ) + (  ( C23929*C24304 ) *C23848 )  ) - (  ( C24845* ( C23929*C24290 )  ) /2.0 ) ;
    double gz120110 =  (  (  ( C24022*C24304 ) *C23563 ) + (  ( C24054* ( C24290*C23563 )  ) /C23533 )  ) + (  (  ( C24022*C24290 ) *C24925 ) /2.0 ) ;
    double gy120110 =  (  (  ( C24042*C24304 ) *C23569 ) - (  ( C24872*cnst376 ) /2.0 )  ) + (  ( C24042*C24290 ) *C23625 ) ;
    double C23708 =  ( C23640- (  ( C23535*C23664 ) /C23533 )  ) + (  (  ( C23628-C23569 ) *be ) /C23533 ) ;
    double gy201020 =  (  ( C23531* ( C23800*C23708 )  ) - (  ( C24935* ( C23531*C23601 )  ) /2.0 )  ) + (  ( C23601*C23800 ) *C24131 ) ;
    double gz210011 =  (  ( C23848* ( C24337*C23708 )  ) + (  ( C23601*C24353 ) *C23848 )  ) - (  ( C24845* ( C23601*C24337 )  ) /2.0 ) ;
    double gy210020 =  (  ( C23601*C24350 ) *C23625 ) + (  ( C23569* ( C24350*C23708 )  ) - (  ( cnst1076*C24939 ) /2.0 )  ) ;
    double gy210011 =  (  ( C23601*C24339 ) *C23854 ) + (  (  ( C24339*C23708 ) *C24382 ) - (  (  ( C24382*C23601 ) *C24855 ) /2.0 )  ) ;
    double gy201011 =  ( C24412* ( C23788*C23601 )  ) + (  (  ( C23788*C23708 ) *C24396 ) - (  (  ( C23601*C24396 ) *C24843 ) /2.0 )  ) ;
    double gz201020 =  (  ( C24755* ( C23601*C23787 )  ) /2.0 ) + (  (  ( C23787*C23708 ) *C24717 ) + (  ( C23601*C23808 ) *C24717 )  ) ;
    double gz210002 =  (  (  ( C23601*C23944 ) *C23860 ) + (  ( C23529*C23708 ) *C23860 )  ) - (  ( C24936* ( C23601*C23529 )  ) /2.0 ) ;
    double gy201002 =  (  (  ( C23562*C23708 ) *C24408 ) + (  ( C24716* ( C23601*C24408 )  ) /2.0 )  ) + ( C24420* ( C23601*C23562 )  ) ;
    double gy210002 =  (  ( C23789*C23601 ) *C23868 ) + (  (  (  ( C23601*C23847 ) *C24749 ) /2.0 ) + ( C23847* ( C23789*C23708 )  )  ) ;
    double gz201011 =  (  ( C24398* ( C24323*C23708 )  ) + ( C24398* ( C23601*C23794 )  )  ) - (  ( C24857* ( C23601*C24323 )  ) /2.0 ) ;
    double gz210020 =  (  (  ( C23601*C24349 ) *C24925 ) /2.0 ) + (  (  ( C23601*C24361 ) *C23563 ) + (  ( C24349*C23708 ) *C23563 )  ) ;
    double C23730 =  (  ( C23538*C23708 ) +C23664 ) + (  (  ( be*C23643 ) *ae ) *2 ) ;
    double gz201110 =  (  ( C24755* ( C23643*C24323 )  ) /2.0 ) + (  (  ( C23643*C23794 ) *C24717 ) + (  ( C23730* ( C24323*C24717 )  ) /C23533 )  ) ;
    double cnst1567 =  (  (  ( C24382*C23643 ) *C24749 ) /2.0 ) + (  ( C23730* ( C23789*C24382 )  ) /C23533 ) ;
    double gy210101 =  ( C23854* ( C23789*C23643 )  ) +cnst1567;
    double cnst1572 =  (  ( C23730* ( C23788*C23531 )  ) /C23533 ) - (  ( C24843* ( C23531*C23643 )  ) /2.0 ) ;
    double gy201110 = cnst1572+ (  ( C23788*C23643 ) *C24131 ) ;
    double cnst1577 =  (  ( C23730* ( C23545*C24522 )  ) /C23533 ) + (  (  ( C24396*C23643 ) *C24716 ) /2.0 ) ;
    double gy201101 =  ( C24412* ( C23643*C23562 )  ) +cnst1577;
    double gz210101 =  (  (  ( C23643*C23944 ) *C23848 ) + (  ( C23730* ( C23848*C23529 )  ) /C23533 )  ) - (  ( C24845* ( C23643*C23529 )  ) /2.0 ) ;
    double C24314 =  (  (  (  ( C24304*2 ) +C23708 ) /C23548 ) + (  ( C23538*C23730 ) /C23559 )  ) + (  (  (  ( 2* ( be*C24302 )  ) -C23601 ) *ae ) /C23533 ) ;
    double gz201200 =  (  ( C24755*cnst1132 ) /2.0 ) + (  (  ( C24314*C23569 ) *C24717 ) + (  ( C23621*C24302 ) *C24717 )  ) ;
    double cnst1595 = C23531* ( C24314*C23562 ) ;
    double gz210200 =  (  (  ( C23529*C24302 ) *C24925 ) /2.0 ) + ( cnst1595+ ( C23563* ( C24302*C23944 )  )  ) ;
    double gy201200 =  (  ( C23562*C24302 ) *C24131 ) + ( cnst1595+ (  ( C24716* ( C23531*C24302 )  ) /2.0 )  ) ;
    double gy210200 =  (  ( C23569* ( C23789*C24314 )  ) + (  ( cnst1132*C24749 ) /2.0 )  ) + ( C23625* ( C23789*C24302 )  ) ;
    double gz201101 =  (  ( C24398* ( C23621*C23643 )  ) + (  ( C23730*cnst268 ) /C23533 )  ) - (  ( C24857*cnst1099 ) /2.0 ) ;
    double gy210110 =  (  ( C23643*C24339 ) *C23625 ) + (  (  ( C23730*cnst90 ) /C23533 ) - (  ( cnst1099*C24855 ) /2.0 )  ) ;
    double gz210110 =  (  ( C24925* ( C24337*C23643 )  ) /2.0 ) + (  (  ( C23730* ( C24337*C23563 )  ) /C23533 ) + ( C23563* ( C23643*C24353 )  )  ) ;
    double C23733 =  (  ( C23664/C23533 ) - (  ( C23535*C23708 ) /C23533 )  ) + (  (  ( C23666- ( C23591/C23533 )  ) *be ) /C23533 ) ;
    double gy300002 =  (  (  (  ( C23642*C23847 ) *C24716 ) /2.0 ) + ( C23847* ( C23562*C23733 )  )  ) + (  ( C23642*C23562 ) *C23868 ) ;
    double gy300020 =  (  ( C23642*C23800 ) *C23625 ) + (  (  ( C23800*C23733 ) *C23569 ) - (  ( cnst1056*C24935 ) /2.0 )  ) ;
    double gz300020 =  (  (  ( C23787*C23733 ) *C23563 ) + (  ( C23642*C23808 ) *C23563 )  ) + (  ( C24925* ( C23787*C23642 )  ) /2.0 ) ;
    double gy300011 =  (  ( C23788*C23642 ) *C23854 ) + (  ( C24382* ( C23788*C23733 )  ) - (  (  ( C24382*C23642 ) *C24843 ) /2.0 )  ) ;
    gy[(Ai + 6) * matrix_size + Bi + 1] += cc* (  ( gy120011*cnst33 ) + ( gy300011*cnst18 )  ) ;
    gy[(Ai + 4) * matrix_size + Bi + 1] += cc* (  ( cnst34*gy102011 ) - (  ( gy300011*cnst36 ) + ( gy120011*cnst36 )  )  ) ;
    double gz300002 =  (  ( C23860* ( C23642*C23621 )  ) + (  ( C23569*C23733 ) *C23860 )  ) - (  ( C24936*cnst1056 ) /2.0 ) ;
    double gz300011 =  (  (  ( C24323*C23733 ) *C23848 ) + (  ( C23642*C23794 ) *C23848 )  ) - (  ( C24845* ( C23642*C24323 )  ) /2.0 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 1] += cc* (  ( cnst34*gz102011 ) - (  ( cnst36*gz300011 ) + ( cnst36*gz120011 )  )  ) ;
    gz[(Ai + 6) * matrix_size + Bi + 1] += cc* (  ( cnst18*gz300011 ) + ( gz120011*cnst33 )  ) ;
    double C23745 =  (  (  ( ae* ( C23680*be )  ) *2 ) /C23533 ) + (  (  ( C23538*C23733 ) /C23533 ) + (  ( 3*C23708 ) /C23548 )  ) ;
    double gy300110 =  (  (  ( C23745*C23788 ) *C23569 ) - (  ( C24843*cnst1161 ) /2.0 )  ) + (  ( C23788*C23680 ) *C23625 ) ;
    gy[(Ai + 6) * matrix_size + Bi + 0] += cc* (  ( gy120110*cnst33 ) + ( cnst18*gy300110 )  ) ;
    gy[(Ai + 4) * matrix_size + Bi + 0] += cc* (  ( cnst34*gy102110 ) - (  ( cnst36*gy120110 ) + ( cnst36*gy300110 )  )  ) ;
    double gy300101 =  (  ( C23680*C23562 ) *C23854 ) + (  (  (  ( C24382*C23680 ) *C24716 ) /2.0 ) + ( C24382* ( C23745*C23562 )  )  ) ;
    gy[(Ai + 4) * matrix_size + Bi + 3] +=  (  ( gy102101*cnst34 ) - (  ( cnst36*gy120101 ) + ( cnst36*gy300101 )  )  ) *cc;
    gy[(Ai + 6) * matrix_size + Bi + 3] += cc* (  ( cnst18*gy300101 ) + ( gy120101*cnst33 )  ) ;
    double C23748 =  (  (  (  ( C23730*3 ) /C23533 ) +C23733 ) /C23548 ) + (  ( C23745*C23538 ) /C23533 ) ;
    double C23749 = C23748+ (  (  (  (  ( C23710*be ) *2 ) -C23642 ) *ae ) /C23533 ) ;
    double gz300200 =  (  ( C24925*cnst1152 ) /2.0 ) + (  (  ( C23569*C23749 ) *C23563 ) + (  ( C23710*C23621 ) *C23563 )  ) ;
    double gy300200 =  (  ( C23710*C23562 ) *C23625 ) + (  (  ( C24716*cnst1152 ) /2.0 ) + ( C23569* ( C23562*C23749 )  )  ) ;
    double gz300110 =  (  (  ( C23680*C24323 ) *C24925 ) /2.0 ) + (  (  ( C23680*C23794 ) *C23563 ) + (  ( C23745*C24323 ) *C23563 )  ) ;
    gz[(Ai + 6) * matrix_size + Bi + 0] += cc* (  ( gz120110*cnst33 ) + ( cnst18*gz300110 )  ) ;
    gz[(Ai + 4) * matrix_size + Bi + 0] += cc* (  ( gz102110*cnst34 ) - (  ( cnst36*gz300110 ) + ( cnst36*gz120110 )  )  ) ;
    double gz300101 =  (  (  ( C23745*C23569 ) *C23848 ) + ( C23848* ( C23680*C23621 )  )  ) - (  ( C24845*cnst1161 ) /2.0 ) ;
    gz[(Ai + 6) * matrix_size + Bi + 3] += cc* (  ( gz120101*cnst33 ) + ( gz300101*cnst18 )  ) ;
    gz[(Ai + 4) * matrix_size + Bi + 3] += cc* (  ( gz102101*cnst34 ) - (  ( cnst36*gz120101 ) + ( gz300101*cnst36 )  )  ) ;
    double gz201002 =  (  (  ( C23569*C23708 ) *C24409 ) + ( C24409* ( C23601*C23621 )  )  ) - (  ( cnst1076*C24940 ) /2.0 ) ;
    double C23947 =  (  ( C23920*ae ) /C23559 ) + (  ( C23538*C23627 ) /C23533 ) ;
    double gy012110 =  ( C24148* ( C24480*C24339 )  ) + (  ( C24122* ( C23947*C24339 )  ) - (  (  ( C24480*C24122 ) *C24855 ) /2.0 )  ) ;
    double C23972 =  (  (  ( C23538*C23947 ) /C23533 ) +C23640 ) + (  (  (  (  ( be*C23931 ) *2 ) -C23569 ) *ae ) /C23533 ) ;
    double gz012200 =  (  ( C24766* ( C23529*C23931 )  ) /2.0 ) + (  ( C24129* ( C23944*C23931 )  ) + ( C24129* ( C23529*C23972 )  )  ) ;
    double gz003200 =  (  ( cnst50*C24739 ) /2.0 ) + (  (  ( C23621*C23931 ) *C24144 ) + (  ( C23569*C23972 ) *C24144 )  ) ;
    double gz030200 =  (  ( C24925* ( C23955*C23931 )  ) /2.0 ) + (  (  ( C23978*C23931 ) *C23563 ) + (  ( C23955*C23972 ) *C23563 )  ) ;
    double gz021200 =  (  ( C24755* ( C23929*C23931 )  ) /2.0 ) + (  (  ( C23929*C23972 ) *C24717 ) + (  ( C23970*C23931 ) *C24717 )  ) ;
    double cnst1762 =  (  ( cnst6*gz201002 ) - (  ( gz201020*cnst31 ) + ( cnst31*gz201200 )  )  ) + ( gz021200*cnst31 ) ;
    double gy030200 =  (  (  ( C24732*cnst50 ) /2.0 ) + ( C23569* ( C23972*C23964 )  )  ) + (  ( C23964*C23931 ) *C23625 ) ;
    double gy012200 =  (  ( C23789*C23931 ) *C24148 ) + (  (  ( C23789*C23972 ) *C24122 ) + (  (  ( C24122*C23931 ) *C24749 ) /2.0 )  ) ;
    double gy003200 =  ( C24155* ( C23562*C23931 )  ) + (  (  ( C24716* ( C24139*C23931 )  ) /2.0 ) + ( C24139* ( C23562*C23972 )  )  ) ;
    double gy021200 =  (  (  (  ( C23531*C23931 ) *C24760 ) /2.0 ) + ( C23531* ( C23941*C23972 )  )  ) + (  ( C23941*C23931 ) *C24131 ) ;
    double cnst1788 =  ( cnst31*gy021200 ) + (  ( gy201002*cnst6 ) - (  ( gy201200*cnst31 ) + ( gy201020*cnst31 )  )  ) ;
    double gy021110 =  (  ( C23531* ( C23947*C24042 )  ) - (  (  ( C24480*C23531 ) *C24872 ) /2.0 )  ) + (  ( C24480*C24042 ) *C24131 ) ;
    gy[(Ai + 5) * matrix_size + Bi + 0] += cc* (  ( gy201110*cnst0 ) - ( gy021110*cnst0 )  ) ;
    double gz012110 =  (  ( C24766* ( C24480*C24337 )  ) /2.0 ) + (  ( C24129* ( C24480*C24353 )  ) + ( C24129* ( C23947*C24337 )  )  ) ;
    double gy030110 =  (  (  ( C23947*C24041 ) *C23569 ) - (  ( cnst46*C24871 ) /2.0 )  ) + (  ( C24480*C24041 ) *C23625 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 0] += - ( cc* (  (  ( cnst34*gy012110 ) + ( cnst36*gy210110 )  ) + ( cnst36*gy030110 )  )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 0] += cc* (  ( cnst33*gy210110 ) - ( cnst18*gy030110 )  ) ;
    double gz021110 =  (  ( C24755* ( C24480*C24022 )  ) /2.0 ) + (  (  (  ( C24480*C24717 ) *C24054 ) /C23533 ) + (  ( C23947*C24022 ) *C24717 )  ) ;
    gz[(Ai + 5) * matrix_size + Bi + 0] += cc* (  ( gz201110*cnst0 ) - ( gz021110*cnst0 )  ) ;
    double gy003110 =  ( C24155* ( C24480*C23788 )  ) + (  ( C24139* ( C23788*C23947 )  ) - (  (  ( C24480*C24139 ) *C24843 ) /2.0 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 0] += cc* (  (  ( gy003110*cnst39 ) - ( cnst5*gy201110 )  ) - ( gy021110*cnst5 )  ) ;
    double gy021101 =  (  (  (  ( C24480*C24396 ) *C24760 ) /2.0 ) + ( C24396* ( C23947*C23941 )  )  ) + ( C24412* ( C24480*C23941 )  ) ;
    gy[(Ai + 5) * matrix_size + Bi + 3] += cc* (  ( gy201101*cnst0 ) - ( gy021101*cnst0 )  ) ;
    double gz012101 =  (  ( C24221* ( C23947*C23529 )  ) + ( C24221* ( C24480*C23944 )  )  ) - (  ( C24874* ( C24480*C23529 )  ) /2.0 ) ;
    double gz021101 =  (  ( C24398* ( C23929*C23947 )  ) + ( C24398* ( C24480*C23970 )  )  ) - (  ( C24857* ( C24480*C23929 )  ) /2.0 ) ;
    gz[(Ai + 5) * matrix_size + Bi + 3] += cc* (  ( gz201101*cnst0 ) - ( gz021101*cnst0 )  ) ;
    double gy030101 =  (  ( C24480*C23964 ) *C23854 ) + (  (  ( C24732* ( C24480*C24382 )  ) /2.0 ) + ( C24382* ( C23947*C23964 )  )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 3] +=  (  ( gy210101*cnst33 ) - ( cnst18*gy030101 )  ) *cc;
    double gz003110 =  (  (  ( C24480*C23794 ) *C24144 ) + (  ( C23947*C24323 ) *C24144 )  ) + (  ( C24739* ( C24480*C24323 )  ) /2.0 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 0] += cc* (  (  ( gz003110*cnst39 ) - ( cnst5*gz201110 )  ) - ( gz021110*cnst5 )  ) ;
    double gz030101 =  (  (  ( C24480*C23978 ) *C23848 ) + ( C23848* ( C23947*C23955 )  )  ) - (  (  ( C24480*C23955 ) *C24845 ) /2.0 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 3] += cc* (  ( gz210101*cnst33 ) - ( gz030101*cnst18 )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 3] += - (  (  ( gz030101*cnst36 ) + (  ( gz210101*cnst36 ) + ( cnst34*gz012101 )  )  ) *cc ) ;
    double gy012101 =  (  (  ( C23789*C23947 ) *C24201 ) + (  ( C24749* ( C24480*C24201 )  ) /2.0 )  ) + (  (  ( C23789*C24480 ) *C24233 ) /C23533 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 3] += - ( cc* (  ( cnst36*gy030101 ) + (  ( cnst36*gy210101 ) + ( cnst34*gy012101 )  )  )  ) ;
    double gz003101 =  (  ( C24220* ( C23947*C23569 )  ) + ( C24220* ( C24480*C23621 )  )  ) - (  ( cnst46*C24873 ) /2.0 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 3] += cc* (  (  ( gz003101*cnst39 ) - ( cnst5*gz201101 )  ) - ( gz021101*cnst5 )  ) ;
    double gy003101 =  (  (  (  ( C24480*C24200 ) *C24716 ) /2.0 ) + ( C24200* ( C23947*C23562 )  )  ) + ( C24240* ( C24480*C23562 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 3] += cc* (  (  ( gy003101*cnst39 ) - ( cnst5*gy201101 )  ) - ( cnst5*gy021101 )  ) ;
    double C24499 =  (  (  ( C23947+C23664 ) /C23548 ) + (  ( C23538*C24304 ) /C23533 )  ) + (  ( ae* ( C24481+ (  ( be*C24492 ) *2 )  )  ) /C23533 ) ;
    double gz120200 =  (  ( C23563* ( C23929*C24499 )  ) + ( C23563* ( C23970*C24492 )  )  ) + (  (  ( C23929*C24492 ) *C24925 ) /2.0 ) ;
    double cnst1884 =  (  (  ( gz300200*cnst16 ) - ( gz300020*cnst16 )  ) + ( gz120200*cnst26 )  ) - ( gz120020*cnst26 ) ;
    gz[(Ai + 6) * matrix_size + Bi + 4] += cc*cnst1884;
    double cnst1887 =  ( gz120020*cnst28 ) + (  (  ( gz300020*cnst28 ) - ( gz300200*cnst28 )  ) - ( gz120200*cnst28 )  ) ;
    double cnst1889 =  (  (  ( cnst14*gz300020 ) + ( gz300200*cnst14 )  ) - ( cnst38*gz300002 )  ) + ( gz120200*cnst14 ) ;
    double gy102200 =  (  ( C23562*C24492 ) *C24148 ) + (  (  (  ( C24122*C24492 ) *C24716 ) /2.0 ) + (  ( C23562*C24499 ) *C24122 )  ) ;
    double gy120200 =  (  ( C23941*C24492 ) *C23625 ) + (  (  ( C23941*C24499 ) *C23569 ) + (  ( C24760*cnst1005 ) /2.0 )  ) ;
    double cnst1901 =  (  (  ( gy300020*cnst14 ) + ( cnst14*gy300200 )  ) - ( cnst38*gy300002 )  ) + ( cnst14*gy120200 ) ;
    double cnst1904 =  (  (  ( cnst14*gy120020 ) +cnst1901 ) - ( gy120002*cnst38 )  ) - ( cnst10*gy102200 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 2] += cc* (  ( cnst7*gy102002 ) + ( cnst1904- ( cnst10*gy102020 )  )  ) ;
    double cnst1909 =  ( gy120020*cnst28 ) + (  (  ( gy300020*cnst28 ) - ( cnst28*gy300200 )  ) - ( cnst28*gy120200 )  ) ;
    gy[(Ai + 4) * matrix_size + Bi + 4] += cc* (  ( cnst1909+ ( gy102200*cnst4 )  ) - ( cnst4*gy102020 )  ) ;
    double cnst1914 =  (  (  ( cnst16*gy300200 ) - ( gy300020*cnst16 )  ) + ( cnst26*gy120200 )  ) - ( cnst26*gy120020 ) ;
    gy[(Ai + 6) * matrix_size + Bi + 4] += cc*cnst1914;
    double gz111200 =  (  (  ( C23529*C24499 ) *C24717 ) + (  ( C23944*C24492 ) *C24717 )  ) + (  ( C24755* ( C23529*C24492 )  ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 2] += cc* (  ( gz111002*cnst41 ) - (  ( gz111200*cnst1 ) + ( gz111020*cnst1 )  )  ) ;
    double gz102200 =  (  ( C24766*cnst1005 ) /2.0 ) + (  (  ( C23621*C24492 ) *C24129 ) + ( C24129* ( C23569*C24499 )  )  ) ;
    gz[(Ai + 4) * matrix_size + Bi + 4] += cc* (  ( cnst1887+ ( gz102200*cnst4 )  ) - ( gz102020*cnst4 )  ) ;
    double cnst1928 =  (  (  ( gz120020*cnst14 ) +cnst1889 ) - ( gz120002*cnst38 )  ) - ( gz102200*cnst10 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 2] += cc* (  ( cnst1928- ( cnst10*gz102020 )  ) + ( cnst7*gz102002 )  ) ;
    double gy111200 =  ( C24131* ( C23789*C24492 )  ) + (  (  ( C24749* ( C23531*C24492 )  ) /2.0 ) + ( C23531* ( C23789*C24499 )  )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 2] += cc* (  ( cnst41*gy111002 ) - (  ( cnst1*gy111200 ) + ( gy111020*cnst1 )  )  ) ;
    double gz030110 =  (  ( C24925* ( C24480*C24021 )  ) /2.0 ) + (  (  ( C24480*C24061 ) *C23563 ) + (  ( C23947*C24021 ) *C23563 )  ) ;
    gz[(Ai + 0) * matrix_size + Bi + 0] += cc* (  ( cnst33*gz210110 ) - ( cnst18*gz030110 )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 0] += - ( cc* (  ( cnst36*gz030110 ) + (  ( cnst36*gz210110 ) + ( gz012110*cnst34 )  )  )  ) ;
    double gy021002 =  (  (  ( C24760*cnst180 ) /2.0 ) + (  ( C23627*C23941 ) *C24408 )  ) + ( C24420* ( C23941*C23569 )  ) ;
    double gy012020 =  (  ( C24122* ( C23627*C24350 )  ) - (  ( C24939*cnst326 ) /2.0 )  ) + ( C24148* ( C24350*C23569 )  ) ;
    double gz030011 =  (  ( C23848* ( C23627*C24021 )  ) + ( C23848* ( C24061*C23569 )  )  ) - (  ( C24845*cnst122 ) /2.0 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 1] += cc* (  ( gz210011*cnst33 ) - ( cnst18*gz030011 )  ) ;
    double gz003002 =  (  (  ( C23569*C23621 ) *C24254 ) + (  ( C23627*C23569 ) *C24254 )  ) - (  ( cnst318*cnst45 ) /2.0 ) ;
    double gz012020 =  (  ( cnst57*C24766 ) /2.0 ) + (  ( C24129* ( C23627*C24349 )  ) + ( C24129* ( C24361*C23569 )  )  ) ;
    double gz021020 =  (  (  ( C24460*C23569 ) *C24717 ) + (  ( C23627*C24452 ) *C24717 )  ) + (  ( C24755*cnst116 ) /2.0 ) ;
    double cnst1977 =  ( gz021020*cnst11 ) + (  (  ( cnst11*gz201200 ) - ( gz201020*cnst11 )  ) - ( gz021200*cnst11 )  ) ;
    gz[(Ai + 5) * matrix_size + Bi + 4] += cc*cnst1977;
    double gz030020 =  (  (  ( C23569*C24081 ) *C23563 ) + (  ( C24055*C23627 ) *C23563 )  ) + (  ( C24925*cnst131 ) /2.0 ) ;
    double cnst1984 =  (  (  ( gz030020*cnst16 ) - ( gz030200*cnst16 )  ) + ( gz210200*cnst26 )  ) - ( gz210020*cnst26 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 4] += cc*cnst1984;
    double cnst1988 =  ( gz210020*cnst28 ) + (  (  ( gz030020*cnst28 ) - ( gz030200*cnst28 )  ) - ( gz210200*cnst28 )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 4] += cc* (  ( gz012020*cnst4 ) + ( cnst1988- ( gz012200*cnst4 )  )  ) ;
    double cnst1997 =  (  (  ( gz030020*cnst14 ) + ( gz030200*cnst14 )  ) - ( gz030002*cnst38 )  ) + ( cnst14*gz210200 ) ;
    double cnst2000 =  ( cnst10*gz012200 ) + (  (  ( cnst14*gz210020 ) +cnst1997 ) - ( cnst38*gz210002 )  ) ;
    double gy003011 =  (  ( C23788*C23569 ) *C24240 ) + (  ( C24200* ( C23788*C23627 )  ) - (  ( cnst336*C24843 ) /2.0 )  ) ;
    double gz003020 =  (  (  ( C23787*C23627 ) *C24144 ) + (  ( C23569*C23808 ) *C24144 )  ) + (  ( C24739*cnst51 ) /2.0 ) ;
    double cnst2013 =  (  (  ( - ( 0.5*gz003200 )  ) - ( 0.5*gz003020 )  ) +gz003002 ) + ( gz201200*0.75 ) ;
    double cnst2017 =  ( gz021020*0.75 ) + (  ( gz021200*0.75 ) + (  (  ( gz201020*0.75 ) +cnst2013 ) - ( 1.5*gz201002 )  )  ) ;
    double cnst2021 =  ( gz201020*cnst2 ) + (  (  ( cnst3*gz003200 ) - ( cnst3*gz003020 )  ) - ( cnst2*gz201200 )  ) ;
    gz[(Ai + 3) * matrix_size + Bi + 4] += cc* (  ( cnst2021- ( gz021200*cnst2 )  ) + ( gz021020*cnst2 )  ) ;
    double gy030002 =  (  ( C23569*C23964 ) *C23868 ) + (  (  ( C23627*C23964 ) *C23847 ) + (  ( C24732*cnst52 ) /2.0 )  ) ;
    double gz021002 =  (  ( C24409* ( C23929*C23627 )  ) + ( C24409* ( C23970*C23569 )  )  ) - (  ( cnst96*C24940 ) /2.0 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 2] += cc* ( cnst2017- ( gz021002*1.5 )  ) ;
    gz[(Ai + 5) * matrix_size + Bi + 2] += cc* (  ( cnst1762+ ( gz021020*cnst31 )  ) - ( gz021002*cnst6 )  ) ;
    double gz021011 =  (  ( C24398* ( C23627*C24022 )  ) + (  ( C24054*cnst268 ) /C23533 )  ) - (  ( cnst117*C24857 ) /2.0 ) ;
    gz[(Ai + 5) * matrix_size + Bi + 1] += cc* (  ( gz201011*cnst0 ) - ( cnst0*gz021011 )  ) ;
    double gy003002 =  ( C24260* ( C23569*C23562 )  ) + (  (  ( C24716*cnst342 ) /2.0 ) + ( C24234* ( C23627*C23562 )  )  ) ;
    double gz012011 =  (  ( C24221* ( C23627*C24337 )  ) + ( C24221* ( C23569*C24353 )  )  ) - (  ( C24874*cnst55 ) /2.0 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 1] += - ( cc* (  (  ( cnst34*gz012011 ) + ( gz210011*cnst36 )  ) + ( cnst36*gz030011 )  )  ) ;
    double gy030011 =  (  ( C23569*C24041 ) *C23854 ) + (  ( C24382* ( C23627*C24041 )  ) - (  ( cnst42*C24871 ) /2.0 )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 1] += - ( cc* (  (  ( cnst36*gy210011 ) + ( cnst34*gy012011 )  ) + ( gy030011*cnst36 )  )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 1] += cc* (  ( gy210011*cnst33 ) - ( gy030011*cnst18 )  ) ;
    double gy021020 =  (  ( C23531* ( C23627*C24455 )  ) - (  ( cnst275*C24945 ) /2.0 )  ) + (  ( C23569*C24455 ) *C24131 ) ;
    gy[(Ai + 5) * matrix_size + Bi + 2] += cc* (  ( cnst1788+ ( gy021020*cnst31 )  ) - ( gy021002*cnst6 )  ) ;
    double cnst2067 =  (  (  ( cnst11*gy201200 ) - ( gy201020*cnst11 )  ) - ( cnst11*gy021200 )  ) + ( gy021020*cnst11 ) ;
    gy[(Ai + 5) * matrix_size + Bi + 4] += cc*cnst2067;
    double gy030020 =  (  ( C24075*C23569 ) *C23625 ) + (  (  ( C24075*C23627 ) *C23569 ) - (  ( cnst111*cnst45 ) /2.0 )  ) ;
    double cnst2076 =  (  (  ( gy030020*cnst28 ) - ( gy030200*cnst28 )  ) - ( gy210200*cnst28 )  ) + ( gy210020*cnst28 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 4] += cc* (  ( cnst4*gy012020 ) + ( cnst2076- ( gy012200*cnst4 )  )  ) ;
    double cnst2082 =  (  (  ( cnst14*gy030200 ) + ( cnst14*gy030020 )  ) - ( gy030002*cnst38 )  ) + ( cnst14*gy210200 ) ;
    double cnst2085 =  ( cnst10*gy012200 ) + (  (  ( cnst14*gy210020 ) +cnst2082 ) - ( cnst38*gy210002 )  ) ;
    double cnst2093 =  (  ( gy210200*cnst26 ) + (  ( gy030020*cnst16 ) - ( gy030200*cnst16 )  )  ) - ( cnst26*gy210020 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 4] += cc*cnst2093;
    double gy003020 =  (  ( C23569*C23800 ) *C24155 ) + (  ( C24139* ( C23627*C23800 )  ) - (  ( cnst339*C24935 ) /2.0 )  ) ;
    double cnst2100 =  (  (  ( cnst3*gy003200 ) - ( cnst3*gy003020 )  ) - ( cnst2*gy201200 )  ) + ( gy201020*cnst2 ) ;
    gy[(Ai + 3) * matrix_size + Bi + 4] += cc* (  ( gy021020*cnst2 ) + ( cnst2100- ( cnst2*gy021200 )  )  ) ;
    double cnst2106 =  ( gy201200*0.75 ) + (  (  ( - ( 0.5*gy003200 )  ) - ( 0.5*gy003020 )  ) +gy003002 ) ;
    double cnst2110 =  ( gy021020*0.75 ) + (  (  (  ( gy201020*0.75 ) +cnst2106 ) - ( gy201002*1.5 )  ) + ( 0.75*gy021200 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 2] += cc* ( cnst2110- ( gy021002*1.5 )  ) ;
    double gz012002 =  (  (  ( C23569*C23944 ) *C24540 ) + (  ( C23627*C23529 ) *C24540 )  ) - (  ( C24946*cnst58 ) /2.0 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 2] += cc* (  ( cnst2000+ ( cnst10*gz012020 )  ) - ( cnst7*gz012002 )  ) ;
    double gz003011 =  (  (  ( C23627*C24323 ) *C24220 ) + (  ( C23569*C23794 ) *C24220 )  ) - (  ( cnst44*C24873 ) /2.0 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 1] += cc* (  (  ( gz003011*cnst39 ) - ( cnst5*gz201011 )  ) - ( cnst5*gz021011 )  ) ;
    double gy021011 =  (  ( C24396* ( C24042*C23627 )  ) - (  ( C24872*cnst171 ) /2.0 )  ) + ( C24412* ( C24042*C23569 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 1] += cc* (  (  ( cnst39*gy003011 ) - ( cnst5*gy201011 )  ) - ( cnst5*gy021011 )  ) ;
    gy[(Ai + 5) * matrix_size + Bi + 1] += cc* (  ( cnst0*gy201011 ) - ( cnst0*gy021011 )  ) ;
    double gy012002 =  (  ( C24537* ( C23789*C23627 )  ) + (  ( cnst305*C24749 ) /2.0 )  ) + (  ( C23789*C23569 ) *C24545 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 2] += cc* (  (  ( cnst10*gy012020 ) +cnst2085 ) - ( cnst7*gy012002 )  ) ;
    double cnst2136 = std::sqrt( ( 11.25/8.0 ) );
    double cnst2139 =  (  (  ( gz030200*cnst30 ) + ( gz030020*cnst30 )  ) - ( gz030002*cnst24 )  ) - ( cnst2136*gz210200 ) ;
    double cnst2141 =  (  (  ( gx030020*cnst30 ) + ( gx030200*cnst30 )  ) - ( cnst24*gx030002 )  ) - ( gx210200*cnst2136 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 2] += cc* (  ( cnst2141- ( cnst2136*gx210020 )  ) + ( cnst20*gx210002 )  ) ;
    double cnst2147 =  (  ( cnst24*gz300002 ) - (  ( gz300020*cnst30 ) + ( gz300200*cnst30 )  )  ) - ( gz120200*cnst2136 ) ;
    gz[(Ai + 6) * matrix_size + Bi + 2] += cc* (  ( gz120002*cnst22 ) + ( cnst2147- ( gz120020*cnst2136 )  )  ) ;
    double cnst2152 =  (  ( cnst24*gy300002 ) - (  ( cnst30*gy300200 ) + ( gy300020*cnst30 )  )  ) - ( cnst2136*gy120200 ) ;
    gy[(Ai + 6) * matrix_size + Bi + 2] += cc* (  ( cnst2152- ( cnst2136*gy120020 )  ) + ( gy120002*cnst22 )  ) ;
    double cnst2156 =  (  (  ( gy030020*cnst30 ) + ( gy030200*cnst30 )  ) - ( cnst24*gy030002 )  ) - ( cnst2136*gy210200 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 2] += cc* (  ( cnst2139- ( gz210020*cnst2136 )  ) + ( cnst20*gz210002 )  ) ;
    double cnst2161 =  (  ( gx300002*cnst24 ) - (  ( gx300020*cnst30 ) + ( gx300200*cnst30 )  )  ) - ( cnst2136*gx120200 ) ;
    gx[(Ai + 6) * matrix_size + Bi + 2] += cc* (  ( cnst2161- ( gx120020*cnst2136 )  ) + ( gx120002*cnst22 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 2] += cc* (  ( cnst2156- ( cnst2136*gy210020 )  ) + ( cnst20*gy210002 )  ) ;
    double cnst2167 = std::sqrt(11.25);
    gz[(Ai + 1) * matrix_size + Bi + 4] += cc* (  ( cnst2167*gz111200 ) - ( cnst2167*gz111020 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 4] +=  (  ( gx111200*cnst2167 ) - ( cnst2167*gx111020 )  ) *cc;
    gy[(Ai + 1) * matrix_size + Bi + 4] +=  (  ( cnst2167*gy111200 ) - ( cnst2167*gy111020 )  ) *cc;
}
