/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d1_kit/gto_d1.hpp"
#include <cmath>

namespace {
    static const double Pi = M_PI;
}

void kinetic_gradient_33(
double ae , 
double be , 
double cc , 
double xAB , 
double yAB , 
double zAB , 
double* const gx , 
double* const gy , 
double* const gz , 
std::size_t matrix_size , 
std::size_t Ai , 
std::size_t Bi ) 
{
    double cnst0 = std::sqrt(7.5);
    double cnst1 = std::sqrt(56.25);
    double cnst2 = std::sqrt(13.5);
    double cnst4 = std::sqrt( ( 6.75/8.0 ) );
    double cnst6 = std::sqrt( ( 45.0/8.0 ) );
    double cnst8 = std::sqrt( ( 101.25/8.0 ) );
    double cnst10 = std::sqrt( ( 75./8.0 ) );
    double cnst12 = std::sqrt( ( 270./8.0 ) );
    double cnst14 = std::sqrt( ( 22.5/8.0 ) );
    double cnst16 = std::sqrt( ( 37.5/8.0 ) );
    double cnst18 = std::sqrt( ( 30./8.0 ) );
    double cnst20 = std::sqrt( ( 45./8.0 ) );
    double cnst21 = std::sqrt(45.);
    double cnst22 = std::sqrt(15.0);
    double C31457 = be*zAB;
    double cnst23 = std::sqrt(33.75);
    double cnst25 = std::sqrt( ( 675./8.0 ) );
    double cnst26 = std::sqrt(16.875);
    double cnst28 = std::sqrt( ( 337.5/8.0 ) );
    double cnst30 = std::sqrt( ( 5.0/8.0 ) );
    double cnst31 = std::sqrt(6.0);
    double cnst32 = std::sqrt(112.5);
    double C31444 = be+ae;
    double C31475 = std::pow(C31444 , 2);
    double cnst33 = 6*ae;
    double C31867 = ae*zAB;
    double C31455 = std::pow(ae , 2);
    double cnst34 = 4*ae;
    double cnst36 = cc* ( std::sqrt(225.) ) ;
    double C31770 = yAB*ae;
    double C31456 = be*yAB;
    double cnst37 = std::sqrt(90.);
    double cnst38 = std::sqrt(36.);
    double C31486 = std::sqrt( ( Pi/C31444 ) );
    double cnst39 = C31486*C31486;
    double C31780 = C31770*C31486;
    double C31801 =  ( C31780*be ) *2;
    double C32707 = C31780/C31444;
    double cnst40 = C32707*C31486;
    double C31877 = C31867*C31486;
    double C32795 = C31877/C31444;
    double cnst41 = C31486*C32795;
    double C31898 =  ( be*C31877 ) *2;
    double C32339 = C31457*C31486;
    double C32796 = C32339/C31444;
    double C31442 = -C32796;
    double C31459 = C31442*ae;
    double C31479 = C31459*2;
    double cnst43 = C31442*C31486;
    double C31984 = C31456*C31486;
    double C32708 = C31984/C31444;
    double C31440 = -C32708;
    double C31458 = ae*C31440;
    double C31478 = 2*C31458;
    double cnst49 = C31486*C31440;
    double C31449 = xAB*ae;
    double C31996 = C31449*C31486;
    double C32643 = C31996/C31444;
    double cnst55 = C31486*C32643;
    double C31446 = xAB*be;
    double C31497 = C31446*C31486;
    double C32644 = C31497/C31444;
    double C31432 = -C32644;
    double C31445 = C31432*ae;
    double C31464 = C31445*2;
    double cnst63 = C31432*C31486;
    double C32034 =  ( C31497*ae ) *2;
    double C32007 = - ( C31984*2. ) ;
    double C31793 = C31780*2.;
    double C31461 = 2.*C31444;
    double C32022 =  (  ( C31486*ae ) *2. ) /C31461;
    double C31908 =  (  (  ( C31459*C31867 ) *2 ) /C31444 ) +C32022;
    double C31927 =  (  ( C31479+ (  ( ae*C32795 ) *2 )  ) /C31461 ) + (  ( C31908*C31867 ) /C31444 ) ;
    double C32040 =  (  (  ( C31445*C31449 ) *2 ) /C31444 ) +C32022;
    double C31811 =  (  (  ( C31770*C31458 ) *2 ) /C31444 ) +C32022;
    double C31830 =  (  ( C31811*C31770 ) /C31444 ) + (  ( C31478+ (  ( C32707*ae ) *2 )  ) /C31461 ) ;
    double C31485 = 1/C31461;
    double C31548 =  ( ae- (  ( C31455* (  ( std::pow( ( C31457/C31444 )  , 2) ) +C31485 )  ) *2 )  ) *C31486;
    double C31868 = C31548/C31461;
    double C31916 =  (  ( C31867*C31548 ) /C31444 ) + (  ( C31898*ae ) /C31475 ) ;
    double C32375 =  (  ( be* ( -C31898 )  ) /C31475 ) - (  ( C31548*C31457 ) /C31444 ) ;
    double C31550 =  ( ae- (  ( C31455* ( C31485+ ( std::pow( ( C31446/C31444 )  , 2) )  )  ) *2 )  ) *C31486;
    double C31599 =  (  ( be* ( -C32034 )  ) /C31475 ) - (  ( C31446*C31550 ) /C31444 ) ;
    double C31567 = C31550/C31461;
    double C32067 =  (  ( C31449*C31550 ) /C31444 ) + (  ( ae*C32034 ) /C31475 ) ;
    double C31544 =  ( ae- (  (  (  ( std::pow( ( C31456/C31444 )  , 2) ) +C31485 ) *C31455 ) *2 )  ) *C31486;
    double C31819 =  (  ( C31544*C31770 ) /C31444 ) + (  ( C31801*ae ) /C31475 ) ;
    double C32063 =  (  (  ( -C31801 ) *be ) /C31475 ) - (  ( C31456*C31544 ) /C31444 ) ;
    double C31771 = C31544/C31461;
    double C32070 =  (  ( C32040*C31449 ) /C31444 ) + (  ( C31464+ (  ( ae*C32643 ) *2 )  ) /C31461 ) ;
    double C31500 = C31486/C31461;
    double C31907 =  (  (  ( std::pow(C31867 , 2) ) *C31486 ) /C31475 ) +C31500;
    double C31946 =  (  (  (  (  ( be*C31907 ) *2 ) -C31486 ) *ae ) /C31444 ) + (  (  ( C31916*C31867 ) /C31444 ) +C31868 ) ;
    double C31948 =  (  (  (  ( C31907*ae ) *2 ) + ( C31908*2 )  ) /C31461 ) + (  ( C31867*C31927 ) /C31444 ) ;
    double cnst120 = C31907*C31486;
    double C32043 =  (  ( C31486* ( std::pow(C31456 , 2) )  ) /C31475 ) +C31500;
    double C32156 =  ( ae*C32043 ) *2;
    double C32096 =  ( C31771- (  ( C32063*C31456 ) /C31444 )  ) + (  ( be* ( C32156-C31486 )  ) /C31444 ) ;
    double cnst140 = C31486*C32043;
    double C32173 = C31500- (  ( C31984*C31770 ) /C31475 ) ;
    double C32246 =  (  (  (  ( be*C32173 ) *ae ) *2 ) /C31444 ) + ( C31771+ (  ( C32063*C31770 ) /C31444 )  ) ;
    double C32261 = C32246*2;
    double cnst150 = C31486*C32173;
    double C32187 = C32173*2;
    double C32739 =  (  ( C31770*C32173 ) /C31444 ) + (  ( C32707-C32708 ) /C31461 ) ;
    double C32758 =  (  (  ( C32063+C31819 ) /C31461 ) + (  ( C31770*C32246 ) /C31444 )  ) + (  ( ae* (  (  ( C32739*be ) *2 ) +C32708 )  ) /C31444 ) ;
    double cnst160 = C32739*C31486;
    double C32464 = C31500- (  ( C31867*C32339 ) /C31475 ) ;
    double cnst178 = C31486*C32464;
    double C32537 =  ( C31868+ (  ( C31867*C32375 ) /C31444 )  ) + (  (  (  ( be*C32464 ) *ae ) *2 ) /C31444 ) ;
    double C32552 = C32537*2;
    double C32827 =  (  ( C31867*C32464 ) /C31444 ) + (  ( C32795-C32796 ) /C31461 ) ;
    double cnst189 = C31486*C32827;
    double C32846 =  (  ( ae* (  (  ( be*C32827 ) *2 ) +C32796 )  ) /C31444 ) + (  (  ( C31867*C32537 ) /C31444 ) + (  ( C31916+C32375 ) /C31461 )  ) ;
    double C32982 = C32827*2;
    double C32478 = C32464*2;
    double C32839 =  (  ( C31867*C32827 ) /C31444 ) + (  ( C32478+C31907 ) /C31461 ) ;
    double C32853 =  (  (  ( C31867*C32846 ) /C31444 ) + (  ( C31946+C32552 ) /C31461 )  ) + (  (  (  (  ( C32839*be ) *2 ) -C32478 ) *ae ) /C31444 ) ;
    double cnst204 = C32839*C31486;
    double C32366 =  (  ( C31486* ( std::pow(C31457 , 2) )  ) /C31475 ) +C31500;
    double cnst207 = C32366*C31486;
    double C32447 =  ( C32366*ae ) *2;
    double C32391 =  ( C31868- (  ( C31457*C32375 ) /C31444 )  ) + (  ( be* ( C32447-C31486 )  ) /C31444 ) ;
    double C31810 = C31500+ (  ( C31486* ( std::pow(C31770 , 2) )  ) /C31475 ) ;
    double C31851 =  (  (  ( C31811*2 ) + (  ( C31810*ae ) *2 )  ) /C31461 ) + (  ( C31770*C31830 ) /C31444 ) ;
    double C31849 =  (  (  (  ( 2* ( be*C31810 )  ) -C31486 ) *ae ) /C31444 ) + ( C31771+ (  ( C31770*C31819 ) /C31444 )  ) ;
    double cnst234 = C31486*C31810;
    double C32751 =  (  ( C32187+C31810 ) /C31461 ) + (  ( C32739*C31770 ) /C31444 ) ;
    double cnst242 = C31486*C32751;
    double C32765 =  (  (  (  (  ( be*C32751 ) *2 ) -C32187 ) *ae ) /C31444 ) + (  (  ( C32758*C31770 ) /C31444 ) + (  ( C32261+C31849 ) /C31461 )  ) ;
    double C31539 = C31500- (  ( C31497*C31449 ) /C31475 ) ;
    double C31673 =  (  (  ( C31449*C31599 ) /C31444 ) +C31567 ) + (  (  ( ae* ( C31539*be )  ) *2 ) /C31444 ) ;
    double C31688 = C31673*2;
    double C31556 = C31539*2;
    double C32671 =  (  ( C32643-C32644 ) /C31461 ) + (  ( C31539*C31449 ) /C31444 ) ;
    double C32688 =  (  (  ( C32067+C31599 ) /C31461 ) + (  ( C31449*C31673 ) /C31444 )  ) + (  (  (  (  ( be*C32671 ) *2 ) +C32644 ) *ae ) /C31444 ) ;
    double cnst298 = C32671*C31486;
    double cnst308 = C31539*C31486;
    double C32049 =  (  ( C31486* ( std::pow(C31449 , 2) )  ) /C31475 ) +C31500;
    double C32942 =  (  ( C32671*C31449 ) /C31444 ) + (  ( C32049+C31556 ) /C31461 ) ;
    double cnst333 = C32942*C31486;
    double cnst335 = C32049*C31486;
    double C32098 =  (  ( ae* (  (  ( be*C32049 ) *2 ) -C31486 )  ) /C31444 ) + ( C31567+ (  ( C31449*C32067 ) /C31444 )  ) ;
    double C32950 =  (  (  (  (  ( be*C32942 ) *2 ) -C31556 ) *ae ) /C31444 ) + (  (  ( C31688+C32098 ) /C31461 ) + (  ( C32688*C31449 ) /C31444 )  ) ;
    double C32095 =  (  (  ( C32040*2 ) + (  ( C32049*ae ) *2 )  ) /C31461 ) + (  ( C31449*C32070 ) /C31444 ) ;
    double C31520 = C31500+ (  ( C31486* ( std::pow(C31446 , 2) )  ) /C31475 ) ;
    double cnst376 = C31520*C31486;
    double C31551 =  ( C31520*ae ) *2;
    double C31670 =  (  ( be* ( C31551-C31486 )  ) /C31444 ) + ( C31567- (  ( C31446*C31599 ) /C31444 )  ) ;
    double C31905 =  ( - (  ( be*C31486 ) *2 )  ) /C31461;
    double C33289 = C31905- (  (  ( C31459*C31457 ) *2 ) /C31444 ) ;
    double C32342 = C33289*2;
    double C32373 =  (  ( C31479- (  ( C31442*be ) *2 )  ) /C31461 ) - (  ( C33289*C31457 ) /C31444 ) ;
    double C32495 =  (  ( C31867*C32373 ) /C31444 ) + (  ( C32447+C32342 ) /C31461 ) ;
    double C32387 =  (  ( C32342- (  ( be*C32366 ) *2 )  ) /C31461 ) - (  ( C32373*C31457 ) /C31444 ) ;
    double cnst450 = C32387*C31486;
    double C33364 = C33289*ae;
    double C31922 = C33364*2;
    double C32369 =  ( - ( 6* ( C31922*be )  )  ) /C31461;
    double C33476 =  (  ( - (  ( be*C31479 ) *4 )  ) /C31461 ) - (  (  ( C33364*C31457 ) *2 ) /C31444 ) ;
    double C32497 =  (  ( C31922- ( 4* ( C33289*be )  )  ) /C31461 ) - (  ( C33476*C31457 ) /C31444 ) ;
    double C32831 =  (  ( C33476*C31867 ) /C31444 ) + (  ( C31922+ ( C33364*4 )  ) /C31461 ) ;
    double C33501 = C33476*ae;
    double C32429 = 2*C33501;
    double C33523 = -C32429;
    double gz210030 =  (  ( C33523* ( C31520*C32751 )  ) /2.0 ) + (  (  ( C31520*C32765 ) *C31479 ) + (  ( C32751*C31670 ) *C31479 )  ) ;
    double gz120300 =  (  (  ( C32942*C32043 ) *C33523 ) /2.0 ) + (  (  ( C32950*C32043 ) *C31479 ) + ( C31479* ( C32096*C32942 )  )  ) ;
    double C32364 =  (  ( C31457*C33501 ) *2 ) /C31444;
    double C32374 = C32369-C32364;
    double C32830 =  (  ( C31867*C32374 ) /C31444 ) + (  ( C32429+ ( 6*C33501 )  ) /C31461 ) ;
    double C33320 = C32830*2;
    double C32426 = 2*C32374;
    double C32559 =  ( C32426- (  ( be*C32497 ) *6 )  ) /C31461;
    double C32456 =  ( C31457*C32374 ) /C31444;
    double C33337 = C32364-C32369;
    double C31957 =  (  (  ( C31867*C33501 ) *2 ) /C31444 ) + (  (  ( C31922*ae ) *6. ) /C31461 ) ;
    double gz120201 =  (  (  ( C32688*C32043 ) *C31908 ) + ( C31908* ( C32096*C32671 )  )  ) - (  ( C31957* ( C32671*C32043 )  ) /2.0 ) ;
    double gz210021 =  (  ( C31908* ( C32739*C31670 )  ) + ( C31908* ( C32758*C31520 )  )  ) - (  ( C31957* ( C32739*C31520 )  ) /2.0 ) ;
    double C33471 =  (  ( C32830*C31867 ) /C31444 ) + (  (  ( C31957+C32374 ) + ( 6* ( C32831*ae )  )  ) /C31461 ) ;
    double C32432 = C33476*2;
    double C32547 =  (  ( C31867*C32497 ) /C31444 ) + (  (  ( 4* ( C32373*ae )  ) +C32432 ) /C31461 ) ;
    double C33475 =  (  ( C32547*C31867 ) /C31444 ) + (  (  (  ( C32831*2 ) +C32497 ) + ( 4* ( ae*C32495 )  )  ) /C31461 ) ;
    double C32544 =  (  ( C32432- (  ( be*C32373 ) *4 )  ) /C31461 ) - (  ( C32497*C31457 ) /C31444 ) ;
    double C32584 =  (  (  (  ( C32387*ae ) *4 ) + ( C32497*3 )  ) /C31461 ) + (  ( C31867*C32544 ) /C31444 ) ;
    double C32484 =  ( C32429- (  ( C33476*be ) *6 )  ) /C31461;
    double C33353 = C32456-C32484;
    double gz012120 =  (  (  ( C32739*C32643 ) *C33353 ) /2.0 ) + (  (  ( C32758*C32643 ) *C32373 ) + (  ( C32739*C32067 ) *C32373 )  ) ;
    double gz012030 =  (  (  ( C32751*C31550 ) *C32373 ) + (  ( C31486*C32765 ) *C32373 )  ) + (  ( cnst242*C33353 ) /2.0 ) ;
    double gz102120 =  (  (  ( C31539*C31810 ) *C33353 ) /2.0 ) + (  (  ( C31539*C31849 ) *C32373 ) + (  ( C31673*C31810 ) *C32373 )  ) ;
    double gz012210 =  (  ( C32373* ( C32173*C32098 )  ) + ( C32373* ( C32246*C32049 )  )  ) + (  ( C33353* ( C32049*C32173 )  ) /2.0 ) ;
    double gz102210 =  (  ( C33353* ( C32707*C32671 )  ) /2.0 ) + (  ( C32373* ( C32671*C31819 )  ) + (  ( C32707*C32688 ) *C32373 )  ) ;
    double gz102300 =  (  ( C33353*cnst333 ) /2.0 ) + (  ( C32373* ( C32950*C31486 )  ) + ( C32373* ( C31544*C32942 )  )  ) ;
    double C32498 = C32484-C32456;
    double C32527 =  ( C32498*C31457 ) /C31444;
    double C32571 = C32559-C32527;
    double C33315 = C32527-C32559;
    double gz003210 =  (  (  ( C32707*C32049 ) *C33315 ) /2.0 ) + (  ( C32387* ( C32049*C31819 )  ) + ( C32387* ( C32707*C32098 )  )  ) ;
    double gz003120 =  (  (  ( C31810*C32643 ) *C33315 ) /2.0 ) + (  ( C32387* ( C31810*C32067 )  ) + ( C32387* ( C32643*C31849 )  )  ) ;
    double C32573 =  (  (  (  ( C32497*ae ) *6 ) +C32426 ) /C31461 ) + (  ( C32498*C31867 ) /C31444 ) ;
    double gz012021 =  (  (  ( C32739*C31550 ) *C32495 ) + (  ( C32758*C31486 ) *C32495 )  ) - (  ( C32573*cnst160 ) /2.0 ) ;
    double gz102111 =  (  ( C32495* ( C31539*C31819 )  ) + (  ( C32707*C31673 ) *C32495 )  ) - (  ( C32573* ( C32707*C31539 )  ) /2.0 ) ;
    double gz012111 =  (  ( C32495* ( C32067*C32173 )  ) + ( C32495* ( C32246*C32643 )  )  ) - (  ( C32573* ( C32173*C32643 )  ) /2.0 ) ;
    double gz012201 =  (  (  ( C31440*C32098 ) *C32495 ) + (  ( C32063*C32049 ) *C32495 )  ) - (  (  ( C32049*C31440 ) *C32573 ) /2.0 ) ;
    double gz102021 =  (  ( C32495* ( C31432*C31849 )  ) + (  ( C31810*C31599 ) *C32495 )  ) - (  ( C32573* ( C31432*C31810 )  ) /2.0 ) ;
    double gz102201 =  (  ( C32495* ( C32688*C31486 )  ) + ( C32495* ( C31544*C32671 )  )  ) - (  ( C32573*cnst298 ) /2.0 ) ;
    double C33466 =  (  ( C32573*C31867 ) /C31444 ) + (  (  ( C32498+C33320 ) + (  ( C32547*ae ) *6 )  ) /C31461 ) ;
    double C33550 =  (  (  ( 6* ( C33475*ae )  ) + (  ( C32573*2 ) + ( C33471*2 )  )  ) /C31461 ) + (  ( C33466*C31867 ) /C31444 ) ;
    double C32598 =  (  (  ( C32498*3 ) + (  ( C32544*ae ) *6 )  ) /C31461 ) + (  ( C31867*C32571 ) /C31444 ) ;
    double C33465 =  (  ( C31867*C32598 ) /C31444 ) + (  (  (  ( C32573*3 ) +C32571 ) + ( 6* ( ae*C32584 )  )  ) /C31461 ) ;
    double C31945 =  (  ( 4.* ( C31479*ae )  ) /C31461 ) + (  (  ( C33364*C31867 ) *2 ) /C31444 ) ;
    double C33459 =  (  (  ( 6* ( C31945*ae )  ) +C32429 ) /C31461 ) + (  ( C31867*C31957 ) /C31444 ) ;
    double gz210012 =  (  (  ( C32173*C31670 ) *C31927 ) + (  ( C31520*C32246 ) *C31927 )  ) - (  (  ( C31520*C32173 ) *C33459 ) /2.0 ) ;
    double gz120102 =  (  (  ( C32096*C31539 ) *C31927 ) + (  ( C31673*C32043 ) *C31927 )  ) - (  (  ( C31539*C32043 ) *C33459 ) /2.0 ) ;
    double C33460 =  (  ( C31945*C31867 ) /C31444 ) + (  ( C31922+ ( 4* ( C31908*ae )  )  ) /C31461 ) ;
    double C33543 =  (  ( C31867*C33459 ) /C31444 ) + (  (  ( 6* ( ae*C33460 )  ) + ( C31957*2 )  ) /C31461 ) ;
    double gz210003 =  (  (  ( C31670*C31440 ) *C31948 ) + (  ( C32063*C31520 ) *C31948 )  ) - (  ( C33543* ( C31520*C31440 )  ) /2.0 ) ;
    double gz120003 =  (  (  ( C32096*C31432 ) *C31948 ) + ( C31948* ( C32043*C31599 )  )  ) - (  (  ( C31432*C32043 ) *C33543 ) /2.0 ) ;
    double C32467 =  (  ( C33289*C31867 ) /C31444 ) + (  ( C31459*4. ) /C31461 ) ;
    double gz021201 =  (  (  ( C32043*C32098 ) *C32467 ) + (  ( C32096*C32049 ) *C32467 )  ) - (  ( C32830* ( C32049*C32043 )  ) /2.0 ) ;
    double cnst611 = gz021201*cnst26;
    double gz111201 =  (  (  ( C32688*C31440 ) *C32467 ) + ( C32467* ( C32063*C32671 )  )  ) - (  ( C32830* ( C32671*C31440 )  ) /2.0 ) ;
    double gz201021 =  (  (  ( C31810*C31670 ) *C32467 ) + (  ( C31520*C31849 ) *C32467 )  ) - (  (  ( C31520*C31810 ) *C32830 ) /2.0 ) ;
    double cnst623 = gz201021*cnst26;
    double gz111111 =  (  (  ( C31673*C32173 ) *C32467 ) + (  ( C31539*C32246 ) *C32467 )  ) - (  ( C32830* ( C31539*C32173 )  ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 1] += cnst36*gz111111;
    double C33472 =  (  (  ( 4* ( ae*C32467 )  ) + ( C33476+C31945 )  ) /C31461 ) + (  ( C31867*C32831 ) /C31444 ) ;
    double C33547 =  (  (  ( 6* ( C33472*ae )  ) + ( C33459+C33320 )  ) /C31461 ) + (  ( C33471*C31867 ) /C31444 ) ;
    double C32482 = 2*C32467;
    double gz111021 =  (  ( C32467* ( C32758*C31432 )  ) + (  ( C32739*C31599 ) *C32467 )  ) - (  ( C32830* ( C32739*C31432 )  ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 5] += cc* (  ( cnst32*gz111201 ) - ( gz111021*cnst32 )  ) ;
    double gz111030 =  (  ( C33337* ( C31432*C32751 )  ) /2.0 ) + (  ( C33289* ( C32751*C31599 )  ) + ( C33289* ( C31432*C32765 )  )  ) ;
    double gz111120 =  (  ( C33289* ( C32739*C31673 )  ) + ( C33289* ( C32758*C31539 )  )  ) + (  ( C33337* ( C32739*C31539 )  ) /2.0 ) ;
    double gz111300 =  (  (  ( C32942*C31440 ) *C33337 ) /2.0 ) + (  ( C33289* ( C32063*C32942 )  ) + ( C33289* ( C32950*C31440 )  )  ) ;
    gz[(Ai + 1) * matrix_size + Bi + 6] += cc* (  ( cnst10*gz111300 ) + ( gz111120*cnst25 )  ) ;
    double C32834 =  (  (  (  ( C32464*ae ) *2 ) + ( C33289+C31908 )  ) /C31461 ) + (  ( C31867*C32467 ) /C31444 ) ;
    double C32843 =  (  ( C31867*C32834 ) /C31444 ) + (  (  (  ( C32827*ae ) *2 ) + ( C32482+C31927 )  ) /C31461 ) ;
    double gz021003 =  (  (  ( C32043*C31550 ) *C32843 ) + (  ( C32096*C31486 ) *C32843 )  ) - (  ( C33547*cnst140 ) /2.0 ) ;
    double gz111003 =  (  ( C32843* ( C31440*C31599 )  ) + ( C32843* ( C32063*C31432 )  )  ) - (  ( C33547* ( C31432*C31440 )  ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 3] += cc* (  (  ( cnst22*gz111003 ) - ( cnst23*gz111201 )  ) - ( gz111021*cnst23 )  ) ;
    double gz201003 =  (  ( C32843* ( C31520*C31544 )  ) + (  ( C31486*C31670 ) *C32843 )  ) - (  ( C33547*cnst376 ) /2.0 ) ;
    double gz021102 =  (  (  ( C32096*C32643 ) *C32834 ) + (  ( C32067*C32043 ) *C32834 )  ) - (  (  ( C32643*C32043 ) *C33471 ) /2.0 ) ;
    double cnst682 = C31486*C32834;
    double gz111012 =  (  (  ( C32173*C31599 ) *C32834 ) + (  ( C31432*C32246 ) *C32834 )  ) - (  ( C33471* ( C31432*C32173 )  ) /2.0 ) ;
    double gz201012 =  (  (  ( C32707*C31670 ) *C32834 ) + ( C32834* ( C31520*C31819 )  )  ) - (  ( C33471* ( C32707*C31520 )  ) /2.0 ) ;
    double gz111102 =  (  (  ( C32063*C31539 ) *C32834 ) + (  ( C31673*C31440 ) *C32834 )  ) - (  ( C33471* ( C31539*C31440 )  ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 4] += cc* (  ( gz111102*cnst37 ) - (  ( cnst20*gz111120 ) + ( cnst20*gz111300 )  )  ) ;
    double gz111210 =  (  ( C33337* ( C32671*C32173 )  ) /2.0 ) + (  ( C33289* ( C32246*C32671 )  ) + ( C33289* ( C32688*C32173 )  )  ) ;
    gz[(Ai + 1) * matrix_size + Bi + 2] += - ( cc* (  ( cnst20*gz111030 ) + (  ( cnst20*gz111210 ) + ( gz111012*cnst37 )  )  )  ) ;
    gz[(Ai + 1) * matrix_size + Bi + 0] += cc* (  ( gz111210*cnst25 ) - ( cnst10*gz111030 )  ) ;
    double C31501 = C31905- (  (  ( C31445*C31446 ) *2 ) /C31444 ) ;
    double C31541 =  (  ( C31464- (  ( C31432*be ) *2 )  ) /C31461 ) - (  ( C31501*C31446 ) /C31444 ) ;
    double C31514 = C31501*ae;
    double C31578 =  (  ( - ( 4* ( C31464*be )  )  ) /C31461 ) - (  (  ( C31446*C31514 ) *2 ) /C31444 ) ;
    double C31595 = C31578*ae;
    double C31646 =  (  ( C31446*C31595 ) *2 ) /C31444;
    double C31613 = C31595*2;
    double C33308 = -C31613;
    double gx012030 =  (  ( C31464*C32751 ) *C32391 ) + (  (  ( C33308* ( C32366*C32751 )  ) /2.0 ) + (  ( C31464*C32765 ) *C32366 )  ) ;
    double gx021003 =  ( C32853* ( C31464*C32043 )  ) + (  (  (  ( C32839*C32043 ) *C33308 ) /2.0 ) + ( C32839* ( C32096*C31464 )  )  ) ;
    double C31648 =  ( C31613- ( 6* ( C31578*be )  )  ) /C31461;
    double C31598 = C31578*2;
    double C32045 =  (  (  ( C31449*C31514 ) *2 ) /C31444 ) + (  (  ( C31464*ae ) *4. ) /C31461 ) ;
    double C31529 = C31514*2;
    double C31594 =  ( - ( 6* ( C31529*be )  )  ) /C31461;
    double C33352 = C31646-C31594;
    double C31664 = C31594-C31646;
    double C31678 = C31664*2;
    double C32669 =  (  (  ( 6*C31595 ) +C31613 ) /C31461 ) + (  ( C31664*C31449 ) /C31444 ) ;
    double C33286 = 2*C32669;
    double C31694 =  ( C31664*C31446 ) /C31444;
    double C31708 = C31648-C31694;
    double C31728 =  ( C31446*C31708 ) /C31444;
    double C33330 = C31694-C31648;
    double gx201012 =  (  (  (  ( C32707*C32827 ) *C33330 ) /2.0 ) + ( C32827* ( C31819*C31541 )  )  ) + (  ( C32707*C31541 ) *C32846 ) ;
    double gx210012 =  (  (  ( C33330* ( C31907*C32173 )  ) /2.0 ) + ( C31907* ( C32246*C31541 )  )  ) + ( C31946* ( C32173*C31541 )  ) ;
    double gx210021 =  ( C31916* ( C32739*C31541 )  ) + (  (  ( C32758*C31541 ) *C32795 ) + (  (  ( C32739*C32795 ) *C33330 ) /2.0 )  ) ;
    double gx210030 =  ( C31548* ( C32751*C31541 )  ) + (  (  ( C33330*cnst242 ) /2.0 ) + ( C31486* ( C32765*C31541 )  )  ) ;
    double gx201003 =  (  (  ( C33330*cnst204 ) /2.0 ) + ( C32839* ( C31544*C31541 )  )  ) + ( C32853* ( C31486*C31541 )  ) ;
    double gx201021 =  (  (  (  ( C32464*C31810 ) *C33330 ) /2.0 ) + ( C32464* ( C31541*C31849 )  )  ) + (  ( C31810*C31541 ) *C32537 ) ;
    double cnst792 = gx201021*cnst26;
    double C33462 =  (  ( C31529+ ( 4* ( C32040*ae )  )  ) /C31461 ) + (  ( C32045*C31449 ) /C31444 ) ;
    double C31630 =  (  ( C31529- (  ( C31501*be ) *4 )  ) /C31461 ) - (  ( C31578*C31446 ) /C31444 ) ;
    double C31682 =  (  ( C31598+ (  ( ae*C31541 ) *4 )  ) /C31461 ) + (  ( C31449*C31630 ) /C31444 ) ;
    double C31707 =  ( C31678- ( 6* ( be*C31630 )  )  ) /C31461;
    double C33290 = C31728-C31707;
    double C31736 = C31707-C31728;
    double C31738 =  (  (  ( 6* ( ae*C31630 )  ) +C31678 ) /C31461 ) + (  ( C31449*C31708 ) /C31444 ) ;
    double C33455 =  (  (  ( C33286+C31708 ) + ( 6* ( C31682*ae )  )  ) /C31461 ) + (  ( C31738*C31449 ) /C31444 ) ;
    double C31680 =  (  ( C31598- (  ( be*C31541 ) *4 )  ) /C31461 ) - (  ( C31446*C31630 ) /C31444 ) ;
    double C31752 =  (  (  ( 3*C31708 ) + (  ( C31680*ae ) *6 )  ) /C31461 ) + (  ( C31736*C31449 ) /C31444 ) ;
    double C32044 =  (  (  ( C31449*C31595 ) *2 ) /C31444 ) + (  (  ( C31529*ae ) *6. ) /C31461 ) ;
    double C33461 =  (  (  ( 6* ( C32045*ae )  ) +C31613 ) /C31461 ) + (  ( C31449*C32044 ) /C31444 ) ;
    double gx021201 =  ( C32537* ( C32070*C32043 )  ) + (  (  ( C32096*C32070 ) *C32464 ) - (  ( C33461* ( C32464*C32043 )  ) /2.0 )  ) ;
    double cnst833 = gx021201*cnst26;
    double gx012210 =  (  (  ( C32246*C32070 ) *C32366 ) - (  (  ( C32366*C32173 ) *C33461 ) /2.0 )  ) + ( C32391* ( C32173*C32070 )  ) ;
    double C33544 =  (  (  ( C32044*2 ) + ( 6* ( C33462*ae )  )  ) /C31461 ) + (  ( C33461*C31449 ) /C31444 ) ;
    double gx012300 =  (  ( C32366* ( C32063*C32095 )  ) - (  (  ( C32366*C31440 ) *C33544 ) /2.0 )  ) + (  ( C32095*C31440 ) *C32391 ) ;
    double gx021300 =  (  ( C32095*C32043 ) *C32375 ) + (  ( C31442* ( C32096*C32095 )  ) - (  (  ( C31442*C32043 ) *C33544 ) /2.0 )  ) ;
    double gx012120 =  (  ( C32739*C32040 ) *C32391 ) + (  ( C32366* ( C32758*C32040 )  ) - (  (  ( C32739*C32366 ) *C32044 ) /2.0 )  ) ;
    double gx021102 =  (  (  ( C32096*C32040 ) *C32827 ) - (  (  ( C32827*C32043 ) *C32044 ) /2.0 )  ) + ( C32846* ( C32040*C32043 )  ) ;
    double C32670 =  (  ( C31578*C31449 ) /C31444 ) + (  ( C31529+ ( 4*C31514 )  ) /C31461 ) ;
    double C33467 =  (  ( C31449*C32669 ) /C31444 ) + (  (  (  ( ae*C32670 ) *6 ) + ( C31664+C32044 )  ) /C31461 ) ;
    double C31543 =  (  ( C31501*C31449 ) /C31444 ) + (  ( C31445*4. ) /C31461 ) ;
    double C31560 = C31543*2;
    double C33474 =  (  (  (  ( C31543*ae ) *4 ) + ( C31578+C32045 )  ) /C31461 ) + (  ( C31449*C32670 ) /C31444 ) ;
    double C33549 =  (  ( C31449*C33467 ) /C31444 ) + (  (  ( C33461+C33286 ) + ( 6* ( ae*C33474 )  )  ) /C31461 ) ;
    double gx111102 =  (  ( C32827* ( C32063*C31543 )  ) - (  (  ( C32827*C31440 ) *C32669 ) /2.0 )  ) + ( C32846* ( C31543*C31440 )  ) ;
    double gx111120 =  (  ( C31442* ( C32758*C31543 )  ) - (  (  ( C32739*C31442 ) *C32669 ) /2.0 )  ) + (  ( C32739*C31543 ) *C32375 ) ;
    double gx120102 =  ( C31946* ( C31543*C32043 )  ) + (  (  ( C32096*C31543 ) *C31907 ) - (  (  ( C31907*C32043 ) *C32669 ) /2.0 )  ) ;
    double gx111111 =  ( C32537* ( C31543*C32173 )  ) + (  (  ( C32246*C31543 ) *C32464 ) - (  (  ( C32464*C32173 ) *C32669 ) /2.0 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 1] += gx111111*cnst36;
    double gx102120 =  (  ( C31810*C31543 ) *C32391 ) + (  ( C32366* ( C31543*C31849 )  ) - (  (  ( C32366*C31810 ) *C32669 ) /2.0 )  ) ;
    double C31510 = C31501*2;
    double C31592 =  (  ( C31510+C31551 ) /C31461 ) + (  ( C31449*C31541 ) /C31444 ) ;
    double gx201102 =  ( C32846* ( C31486*C31592 )  ) + (  (  ( C31544*C31592 ) *C32827 ) - (  ( C31738*cnst189 ) /2.0 )  ) ;
    double gx201120 =  (  ( C31442* ( C31592*C31849 )  ) - (  ( C31738* ( C31442*C31810 )  ) /2.0 )  ) + (  ( C31810*C31592 ) *C32375 ) ;
    double gx210111 =  (  (  ( C32246*C31592 ) *C32795 ) - (  ( C31738* ( C32173*C32795 )  ) /2.0 )  ) + ( C31916* ( C32173*C31592 )  ) ;
    double gx201111 =  (  ( C32707*C31592 ) *C32537 ) + (  (  ( C31819*C31592 ) *C32464 ) - (  ( C31738* ( C32707*C32464 )  ) /2.0 )  ) ;
    double gx210120 =  (  ( C32739*C31592 ) *C31548 ) + (  ( C31486* ( C32758*C31592 )  ) - (  ( C31738*cnst160 ) /2.0 )  ) ;
    double gx210102 =  (  (  ( C32063*C31592 ) *C31907 ) - (  (  ( C31907*C31440 ) *C31738 ) /2.0 )  ) + ( C31946* ( C31592*C31440 )  ) ;
    double C33468 =  (  ( C31682*C31449 ) /C31444 ) + (  (  ( 4* ( ae*C31592 )  ) + (  ( 2*C32670 ) +C31630 )  ) /C31461 ) ;
    double C33545 =  (  ( C31449*C33455 ) /C31444 ) + (  (  ( 6* ( C33468*ae )  ) + (  ( 2*C33467 ) + ( C31738*2 )  )  ) /C31461 ) ;
    double C31590 =  (  ( C31510- (  ( C31520*be ) *2 )  ) /C31461 ) - (  ( C31446*C31541 ) /C31444 ) ;
    double C31721 =  (  ( C31449*C31680 ) /C31444 ) + (  (  ( 3*C31630 ) + ( 4* ( C31590*ae )  )  ) /C31461 ) ;
    double C33454 =  (  (  ( C31736+ ( C31738*3 )  ) + (  ( C31721*ae ) *6 )  ) /C31461 ) + (  ( C31449*C31752 ) /C31444 ) ;
    double gx300021 =  ( C31916* ( C31590*C31810 )  ) + (  (  ( C31590*C31849 ) *C32795 ) + (  (  ( C31810*C32795 ) *C33290 ) /2.0 )  ) ;
    double gx300012 =  (  (  ( C31590*C31819 ) *C31907 ) + (  (  ( C32707*C31907 ) *C33290 ) /2.0 )  ) + ( C31946* ( C32707*C31590 )  ) ;
    double cnst977 = C31590*C31486;
    double gx111030 =  (  ( C31501*C32751 ) *C32375 ) + (  (  ( C33352* ( C31442*C32751 )  ) /2.0 ) + ( C31442* ( C31501*C32765 )  )  ) ;
    double gx111021 =  ( C32537* ( C32739*C31501 )  ) + (  (  ( C33352* ( C32739*C32464 )  ) /2.0 ) + (  ( C32758*C31501 ) *C32464 )  ) ;
    double C32672 =  (  ( C31449*C31543 ) /C31444 ) + (  (  (  ( C31539*ae ) *2 ) + ( C31501+C32040 )  ) /C31461 ) ;
    double C32945 =  (  ( C32672*C31449 ) /C31444 ) + (  (  (  ( C32671*ae ) *2 ) + ( C31560+C32070 )  ) /C31461 ) ;
    double gx111300 =  (  ( C32945*C31440 ) *C32375 ) + (  ( C31442* ( C32063*C32945 )  ) - (  ( C33549* ( C31442*C31440 )  ) /2.0 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 4] += cc* (  ( gx111102*cnst37 ) - (  ( cnst20*gx111120 ) + ( cnst20*gx111300 )  )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 6] += cc* (  ( cnst10*gx111300 ) + ( gx111120*cnst25 )  ) ;
    double gx102300 =  (  ( C32945*C31486 ) *C32391 ) + (  ( C32366* ( C32945*C31544 )  ) - (  ( C33549*cnst207 ) /2.0 )  ) ;
    double gx120300 =  ( C31548* ( C32945*C32043 )  ) + (  ( C31486* ( C32096*C32945 )  ) - (  ( C33549*cnst140 ) /2.0 )  ) ;
    double gx111201 =  (  (  ( C32063*C32672 ) *C32464 ) - (  (  ( C32464*C31440 ) *C33467 ) /2.0 )  ) + ( C32537* ( C32672*C31440 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 5] += cc* (  ( cnst32*gx111201 ) - ( gx111021*cnst32 )  ) ;
    double gx102210 =  (  (  ( C32672*C31819 ) *C32366 ) - (  (  ( C32707*C32366 ) *C33467 ) /2.0 )  ) + (  ( C32707*C32672 ) *C32391 ) ;
    double cnst1031 = C32672*C31486;
    double gx120201 =  ( C31916* ( C32672*C32043 )  ) + (  (  ( C32096*C32672 ) *C32795 ) - (  (  ( C32795*C32043 ) *C33467 ) /2.0 )  ) ;
    double gx111210 =  (  ( C31442* ( C32672*C32246 )  ) - (  (  ( C31442*C32173 ) *C33467 ) /2.0 )  ) + (  ( C32672*C32173 ) *C32375 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 0] += cc* (  ( gx111210*cnst25 ) - ( cnst10*gx111030 )  ) ;
    double gx111003 =  (  ( C32839* ( C32063*C31501 )  ) + (  ( C33352* ( C32839*C31440 )  ) /2.0 )  ) + ( C32853* ( C31501*C31440 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 3] += cc* (  (  ( gx111003*cnst22 ) - ( cnst23*gx111201 )  ) - ( gx111021*cnst23 )  ) ;
    double gx111012 =  ( C32846* ( C31501*C32173 )  ) + (  (  ( C31501*C32246 ) *C32827 ) + (  ( C33352* ( C32827*C32173 )  ) /2.0 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 2] += - ( cc* (  ( cnst20*gx111030 ) + (  ( cnst20*gx111210 ) + ( gx111012*cnst37 )  )  )  ) ;
    double C31812 = C31905- (  (  ( C31456*C31458 ) *2 ) /C31444 ) ;
    double C31991 = C31812*2;
    double C32056 =  (  ( C31478- (  ( be*C31440 ) *2 )  ) /C31461 ) - (  ( C31812*C31456 ) /C31444 ) ;
    double C32204 =  (  ( C31770*C32056 ) /C31444 ) + (  ( C31991+C32156 ) /C31461 ) ;
    double C32084 =  (  ( C31991- (  ( be*C32043 ) *2 )  ) /C31461 ) - (  ( C31456*C32056 ) /C31444 ) ;
    double cnst1116 = C32084*C31486;
    double C31818 = C31812*ae;
    double C31825 = C31818*2;
    double C32050 =  ( - ( 6* ( be*C31825 )  )  ) /C31461;
    double C31846 =  (  ( - (  ( C31478*be ) *4 )  ) /C31461 ) - (  (  ( C31818*C31456 ) *2 ) /C31444 ) ;
    double C31852 = C31846*ae;
    double C31860 =  (  (  ( ae*C31825 ) *6. ) /C31461 ) + (  ( 2* ( C31770*C31852 )  ) /C31444 ) ;
    double gy102210 =  (  ( C31811*C32671 ) *C32391 ) + (  (  ( C32688*C31811 ) *C32366 ) - (  ( C31860* ( C32671*C32366 )  ) /2.0 )  ) ;
    double gy201012 =  (  ( C32827* ( C31811*C31670 )  ) - (  ( C31860* ( C31520*C32827 )  ) /2.0 )  ) + ( C32846* ( C31520*C31811 )  ) ;
    double C32138 = C31852*2;
    double C33288 = -C32138;
    double gy102300 =  (  (  (  ( C32942*C32366 ) *C33288 ) /2.0 ) + (  ( C31478*C32950 ) *C32366 )  ) + ( C32391* ( C31478*C32942 )  ) ;
    double gy201003 =  (  ( C32839* ( C31478*C31670 )  ) + (  (  ( C32839*C31520 ) *C33288 ) /2.0 )  ) + ( C32853* ( C31478*C31520 )  ) ;
    double C32039 =  (  ( C31456*C31852 ) *2 ) /C31444;
    double C33329 = C32039-C32050;
    double C32060 = C32050-C32039;
    double C32742 =  (  ( C32138+ ( 6*C31852 )  ) /C31461 ) + (  ( C32060*C31770 ) /C31444 ) ;
    double C33313 = 2*C32742;
    double C32165 =  ( C31456*C32060 ) /C31444;
    double C32135 = C32060*2;
    double C32193 =  ( C32138- ( 6* ( be*C31846 )  )  ) /C31461;
    double C32207 = C32193-C32165;
    double C32236 =  ( C32207*C31456 ) /C31444;
    double C33344 = C32165-C32193;
    double gy021102 =  (  (  ( C33344* ( C32827*C32643 )  ) /2.0 ) + ( C32827* ( C32056*C32067 )  )  ) + (  ( C32056*C32643 ) *C32846 ) ;
    double gy120201 =  ( C31916* ( C32671*C32056 )  ) + (  (  ( C32688*C32056 ) *C32795 ) + (  ( C33344* ( C32671*C32795 )  ) /2.0 )  ) ;
    double gy021201 =  (  (  ( C32056*C32098 ) *C32464 ) + (  ( C33344* ( C32049*C32464 )  ) /2.0 )  ) + (  ( C32056*C32049 ) *C32537 ) ;
    double cnst1181 = cnst26*gy021201;
    double gy120102 =  ( C31946* ( C31539*C32056 )  ) + (  (  ( C33344* ( C31539*C31907 )  ) /2.0 ) + ( C31907* ( C32056*C31673 )  )  ) ;
    double gy120300 =  (  ( C32942*C32056 ) *C31548 ) + (  ( C31486* ( C32056*C32950 )  ) + (  ( C33344*cnst333 ) /2.0 )  ) ;
    double gy021003 =  (  ( C32839* ( C32056*C31550 )  ) + (  ( C33344*cnst204 ) /2.0 )  ) + ( C32853* ( C32056*C31486 )  ) ;
    double C32141 = C31846*2;
    double C32743 =  (  ( C31770*C31846 ) /C31444 ) + (  (  ( C31818*4 ) +C31825 ) /C31461 ) ;
    double C33469 =  (  ( C31770*C32742 ) /C31444 ) + (  (  ( 6* ( C32743*ae )  ) + ( C32060+C31860 )  ) /C31461 ) ;
    double C32206 =  (  ( C31825- (  ( C31812*be ) *4 )  ) /C31461 ) - (  ( C31456*C31846 ) /C31444 ) ;
    double C32256 =  (  ( C31770*C32206 ) /C31444 ) + (  (  (  ( C32056*ae ) *4 ) +C32141 ) /C31461 ) ;
    double C32282 =  (  ( C32135+ ( 6* ( ae*C32206 )  )  ) /C31461 ) + (  ( C32207*C31770 ) /C31444 ) ;
    double gy021111 =  ( C32537* ( C32204*C32643 )  ) + (  (  ( C32067*C32204 ) *C32464 ) - (  (  ( C32464*C32643 ) *C32282 ) /2.0 )  ) ;
    double gy120012 =  (  (  ( C32204*C31599 ) *C31907 ) - (  ( C32282* ( C31432*C31907 )  ) /2.0 )  ) + ( C31946* ( C31432*C32204 )  ) ;
    double gy120210 =  ( C31548* ( C32671*C32204 )  ) + (  ( C31486* ( C32688*C32204 )  ) - (  ( C32282*cnst298 ) /2.0 )  ) ;
    double gy021012 =  ( C32846* ( C31486*C32204 )  ) + (  (  ( C32204*C31550 ) *C32827 ) - (  ( C32282*cnst189 ) /2.0 )  ) ;
    double C33464 =  (  (  ( C32207+C33313 ) + ( 6* ( C32256*ae )  )  ) /C31461 ) + (  ( C31770*C32282 ) /C31444 ) ;
    double gy120111 =  ( C31916* ( C31539*C32204 )  ) + (  (  ( C31673*C32204 ) *C32795 ) - (  (  ( C31539*C32795 ) *C32282 ) /2.0 )  ) ;
    double gy021210 =  (  ( C32049*C32204 ) *C32375 ) + (  ( C31442* ( C32204*C32098 )  ) - (  (  ( C31442*C32049 ) *C32282 ) /2.0 )  ) ;
    double C33473 =  (  (  (  ( ae*C32204 ) *4 ) + (  ( C32743*2 ) +C32206 )  ) /C31461 ) + (  ( C32256*C31770 ) /C31444 ) ;
    double C33548 =  (  (  ( 6* ( ae*C33473 )  ) + (  ( C33469*2 ) + ( C32282*2 )  )  ) /C31461 ) + (  ( C31770*C33464 ) /C31444 ) ;
    double C32268 =  ( C32135- (  ( be*C32206 ) *6 )  ) /C31461;
    double C33307 = C32236-C32268;
    double gy030102 =  (  ( C31907* ( C32084*C32067 )  ) + (  (  ( C31907*C32643 ) *C33307 ) /2.0 )  ) + (  ( C32084*C32643 ) *C31946 ) ;
    double gy030201 =  ( C31916* ( C32049*C32084 )  ) + (  (  ( C32084*C32098 ) *C32795 ) + (  (  ( C32049*C32795 ) *C33307 ) /2.0 )  ) ;
    double C32280 = C32268-C32236;
    double C32253 =  (  ( C32141- (  ( be*C32056 ) *4 )  ) /C31461 ) - (  ( C31456*C32206 ) /C31444 ) ;
    double C32307 =  (  (  ( 6* ( C32253*ae )  ) + ( C32207*3 )  ) /C31461 ) + (  ( C31770*C32280 ) /C31444 ) ;
    double C32293 =  (  ( C32253*C31770 ) /C31444 ) + (  (  ( 4* ( C32084*ae )  ) + ( 3*C32206 )  ) /C31461 ) ;
    double C33463 =  (  (  ( C32280+ ( C32282*3 )  ) + ( 6* ( C32293*ae )  )  ) /C31461 ) + (  ( C31770*C32307 ) /C31444 ) ;
    double C32176 =  (  ( C31812*C31770 ) /C31444 ) + (  ( 4.*C31458 ) /C31461 ) ;
    double C32191 = C32176*2;
    double gy012210 =  (  (  ( C32176*C32098 ) *C32366 ) - (  (  ( C32366*C32049 ) *C32742 ) /2.0 )  ) + (  ( C32176*C32049 ) *C32391 ) ;
    double gy111111 =  (  ( C31539*C32176 ) *C32537 ) + (  (  ( C32176*C31673 ) *C32464 ) - (  (  ( C31539*C32464 ) *C32742 ) /2.0 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 1] += gy111111*cnst36;
    double gy210012 =  (  ( C31520*C32176 ) *C31946 ) + (  (  ( C32176*C31670 ) *C31907 ) - (  (  ( C31520*C31907 ) *C32742 ) /2.0 )  ) ;
    double gy111012 =  (  ( C31432*C32176 ) *C32846 ) + (  (  ( C32176*C31599 ) *C32827 ) - (  (  ( C31432*C32827 ) *C32742 ) /2.0 )  ) ;
    double gy111210 =  (  (  ( C32688*C32176 ) *C31442 ) - (  (  ( C31442*C32671 ) *C32742 ) /2.0 )  ) + (  ( C32176*C32671 ) *C32375 ) ;
    double gy111300 =  (  ( C31812*C32942 ) *C32375 ) + (  (  (  ( C31442*C32942 ) *C33329 ) /2.0 ) + ( C31442* ( C31812*C32950 )  )  ) ;
    double C32746 =  (  (  (  ( ae*C32173 ) *2 ) + ( C31812+C31811 )  ) /C31461 ) + (  ( C31770*C32176 ) /C31444 ) ;
    double C32755 =  (  (  (  ( C32739*ae ) *2 ) + ( C32191+C31830 )  ) /C31461 ) + (  ( C31770*C32746 ) /C31444 ) ;
    double cnst1344 = C32746*C31486;
    double gy111021 =  (  (  ( C32746*C31599 ) *C32464 ) - (  (  ( C31432*C32464 ) *C33469 ) /2.0 )  ) + (  ( C31432*C32746 ) *C32537 ) ;
    double gy210021 =  ( C31916* ( C31520*C32746 )  ) + (  ( C32795* ( C32746*C31670 )  ) - (  ( C33469* ( C31520*C32795 )  ) /2.0 )  ) ;
    double gy111120 =  (  ( C31442* ( C32746*C31673 )  ) - (  ( C33469* ( C31442*C31539 )  ) /2.0 )  ) + (  ( C31539*C32746 ) *C32375 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 6] += cc* (  ( cnst25*gy111120 ) + ( cnst10*gy111300 )  ) ;
    double gy012120 =  (  (  ( C32746*C32067 ) *C32366 ) - (  (  ( C32366*C32643 ) *C33469 ) /2.0 )  ) + (  ( C32746*C32643 ) *C32391 ) ;
    double gy111003 =  (  ( C32839* ( C31812*C31599 )  ) + (  (  ( C32839*C31432 ) *C33329 ) /2.0 )  ) + ( C32853* ( C31812*C31432 )  ) ;
    double gy111102 =  (  ( C32827* ( C31812*C31673 )  ) + (  (  ( C31539*C32827 ) *C33329 ) /2.0 )  ) + ( C32846* ( C31812*C31539 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 4] += cc* (  ( gy111102*cnst37 ) - (  ( cnst20*gy111120 ) + ( cnst20*gy111300 )  )  ) ;
    double gy111201 =  (  (  (  ( C32671*C32464 ) *C33329 ) /2.0 ) + ( C32464* ( C31812*C32688 )  )  ) + (  ( C31812*C32671 ) *C32537 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 3] += cc* (  (  ( gy111003*cnst22 ) - ( cnst23*gy111201 )  ) - ( cnst23*gy111021 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 5] += cc* (  ( cnst32*gy111201 ) - ( cnst32*gy111021 )  ) ;
    double C31848 =  (  (  ( C31818*C31770 ) *2 ) /C31444 ) + (  (  ( C31478*ae ) *4. ) /C31461 ) ;
    double C33470 =  (  (  ( 4* ( C32176*ae )  ) + ( C31848+C31846 )  ) /C31461 ) + (  ( C31770*C32743 ) /C31444 ) ;
    double C33458 =  (  (  (  ( C31811*ae ) *4 ) +C31825 ) /C31461 ) + (  ( C31770*C31848 ) /C31444 ) ;
    double C33457 =  (  ( C31770*C31860 ) /C31444 ) + (  (  ( 6* ( C31848*ae )  ) +C32138 ) /C31461 ) ;
    double gy201021 =  (  ( C31520*C31830 ) *C32537 ) + (  (  ( C31670*C31830 ) *C32464 ) - (  (  ( C31520*C32464 ) *C33457 ) /2.0 )  ) ;
    double cnst1395 = cnst26*gy201021;
    double C33542 =  (  (  ( 6* ( C33458*ae )  ) + ( C31860*2 )  ) /C31461 ) + (  ( C31770*C33457 ) /C31444 ) ;
    double gy201030 =  (  ( C31442* ( C31670*C31851 )  ) - (  (  ( C31442*C31520 ) *C33542 ) /2.0 )  ) + (  ( C31520*C31851 ) *C32375 ) ;
    double gy102030 =  (  ( C31432*C31851 ) *C32391 ) + (  (  ( C31851*C31599 ) *C32366 ) - (  ( C33542* ( C31432*C32366 )  ) /2.0 )  ) ;
    double C33546 =  (  ( C33469*C31770 ) /C31444 ) + (  (  ( C33457+C33313 ) + ( 6* ( C33470*ae )  )  ) /C31461 ) ;
    double gy012030 =  (  ( C32366* ( C32755*C31550 )  ) - (  ( C33546*cnst207 ) /2.0 )  ) + (  ( C31486*C32755 ) *C32391 ) ;
    double gy111030 =  (  ( C31442* ( C32755*C31599 )  ) - (  (  ( C31442*C31432 ) *C33546 ) /2.0 )  ) + (  ( C31432*C32755 ) *C32375 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 0] += cc* (  ( gy111210*cnst25 ) - ( cnst10*gy111030 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 2] += - ( cc* (  ( cnst20*gy111030 ) + (  ( gy111012*cnst37 ) + ( cnst20*gy111210 )  )  )  ) ;
    double gy210030 =  (  (  ( C31670*C32755 ) *C31486 ) - (  ( C33546*cnst376 ) /2.0 )  ) + ( C31548* ( C31520*C32755 )  ) ;
    double gy102120 =  (  ( C31539*C31830 ) *C32391 ) + (  (  ( C31673*C31830 ) *C32366 ) - (  ( C33457* ( C31539*C32366 )  ) /2.0 )  ) ;
    double C32018 = C31996*2.;
    double C31508 = - ( C31497*2. ) ;
    double C31890 = C31877*2.;
    double C32351 = - ( C32339*2. ) ;
    double C31490 = C31475*2.;
    double C31521 = C31508/C31490;
    double C31570 =  (  ( C31520*C31449 ) /C31444 ) +C31521;
    double cnst1434 = C31486*C31570;
    double C31645 =  (  (  ( C31560+C31541 ) + (  ( ae*C31570 ) *2 )  ) /C31461 ) + (  ( C31449*C31592 ) /C31444 ) ;
    double gx210201 =  ( C31916* ( C31645*C31440 )  ) + (  (  ( C32063*C31645 ) *C32795 ) - (  (  ( C32795*C31440 ) *C33455 ) /2.0 )  ) ;
    double gx201210 =  (  ( C31442* ( C31645*C31819 )  ) - (  ( C33455* ( C32707*C31442 )  ) /2.0 )  ) + (  ( C32707*C31645 ) *C32375 ) ;
    double gx201201 =  (  ( C31645*C31486 ) *C32537 ) + (  (  ( C31645*C31544 ) *C32464 ) - (  ( C33455*cnst178 ) /2.0 )  ) ;
    double cnst1471 = gx201201*cnst26;
    double cnst1475 = cnst833+ (  (  (  ( gx201003*cnst0 ) -cnst1471 ) -cnst792 ) - ( gx021003*cnst0 )  ) ;
    double gx210210 =  (  ( C31486* ( C31645*C32246 )  ) - (  ( cnst150*C33455 ) /2.0 )  ) + (  ( C31645*C32173 ) *C31548 ) ;
    double C31713 =  (  (  ( be*C31570 ) *ae ) *2 ) + (  ( C31449*C31670 ) +C31599 ) ;
    double gz210120 =  (  (  ( C32739*C31570 ) *C33523 ) /2.0 ) + (  (  (  ( C32739*C31479 ) *C31713 ) /C31444 ) + (  ( C32758*C31570 ) *C31479 )  ) ;
    double cnst1512 =  (  ( C33329* ( C31907*C31570 )  ) /2.0 ) + (  (  ( C31812*C31907 ) *C31713 ) /C31444 ) ;
    double gy210102 = cnst1512+ ( C31946* ( C31812*C31570 )  ) ;
    double gz201111 =  (  ( C32467* ( C31819*C31570 )  ) + (  (  ( C32707*C32467 ) *C31713 ) /C31444 )  ) - (  ( C32830* ( C32707*C31570 )  ) /2.0 ) ;
    double cnst1528 =  (  (  ( C31442*C31830 ) *C31713 ) /C31444 ) - (  ( C33457* ( C31442*C31570 )  ) /2.0 ) ;
    double gy201120 = cnst1528+ (  ( C31570*C31830 ) *C32375 ) ;
    double C32647 = C31570*2;
    double gz201120 =  (  (  ( C31810*C31570 ) *C33337 ) /2.0 ) + (  (  (  ( C33289*C31810 ) *C31713 ) /C31444 ) + ( C33289* ( C31570*C31849 )  )  ) ;
    double cnst1547 =  (  (  ( C31811*C32464 ) *C31713 ) /C31444 ) - (  ( C31860* ( C32464*C31570 )  ) /2.0 ) ;
    double C31625 =  (  ( C31449*C31570 ) /C31444 ) + (  ( C31520+C31556 ) /C31461 ) ;
    double cnst1551 = C31625*C31486;
    double C31746 =  (  (  (  (  ( be*C31625 ) *2 ) -C31520 ) *ae ) /C31444 ) + (  (  ( C31449*C31713 ) /C31475 ) + (  ( C31688+C31670 ) /C31461 )  ) ;
    double C32696 =  (  (  ( C32688*2 ) + (  ( C31713*2 ) /C31444 )  ) /C31461 ) + (  ( C31449*C31746 ) /C31444 ) ;
    double gz201201 =  (  (  ( C31746*C31486 ) *C32467 ) + (  ( C31544*C31625 ) *C32467 )  ) - (  ( C32830*cnst1551 ) /2.0 ) ;
    double cnst1582 = cnst26*gz201201;
    double cnst1586 = cnst611+ (  (  (  ( gz201003*cnst0 ) -cnst1582 ) -cnst623 ) - ( gz021003*cnst0 )  ) ;
    double gz210210 =  (  ( C31479* ( C31746*C32173 )  ) + (  ( C32246*C31625 ) *C31479 )  ) + (  (  ( C31625*C32173 ) *C33523 ) /2.0 ) ;
    double gy201201 =  ( C32537* ( C31478*C31625 )  ) + (  (  (  ( C31625*C32464 ) *C33288 ) /2.0 ) + (  ( C31478*C31746 ) *C32464 )  ) ;
    double cnst1610 = cnst26*gy201201;
    double cnst1614 =  (  (  (  ( gy201003*cnst0 ) -cnst1610 ) -cnst1395 ) - ( cnst0*gy021003 )  ) +cnst1181;
    double gy210201 =  (  (  (  ( C31625*C32795 ) *C33329 ) /2.0 ) + ( C32795* ( C31812*C31746 )  )  ) + (  ( C31812*C31625 ) *C31916 ) ;
    double C32687 =  (  (  (  ( C32672*2 ) + ( C31592*2 )  ) + ( 2* ( C31625*ae )  )  ) /C31461 ) + (  ( C31645*C31449 ) /C31444 ) ;
    double gx201300 =  (  ( C31442* ( C31544*C32687 )  ) - (  ( cnst43*C33545 ) /2.0 )  ) + (  ( C32687*C31486 ) *C32375 ) ;
    double cnst1638 =  ( cnst14*gx021300 ) + (  ( cnst21*gx201102 ) - (  ( cnst14*gx201300 ) + ( cnst14*gx201120 )  )  ) ;
    double gx210300 =  (  (  ( C32063*C32687 ) *C31486 ) - (  ( C33545*cnst49 ) /2.0 )  ) + ( C31548* ( C32687*C31440 )  ) ;
    double gy201210 =  ( C32375* ( C31811*C31625 )  ) + (  ( C31442* ( C31811*C31746 )  ) - (  ( C31860* ( C31442*C31625 )  ) /2.0 )  ) ;
    double C32683 =  (  (  ( C32671*2 ) +C32647 ) /C31461 ) + (  ( C31449*C31625 ) /C31444 ) ;
    double cnst1655 = C32683*C31486;
    double C32697 = C32696+ (  (  (  ( 2* ( C32683*be )  ) -C32647 ) *ae ) /C31444 ) ;
    double cnst1666 = C31442* ( C32697*C31478 ) ;
    double gy201300 =  (  ( C31478*C32683 ) *C32375 ) + (  (  (  ( C31442*C32683 ) *C33288 ) /2.0 ) +cnst1666 ) ;
    double gy210300 =  ( C31548* ( C31812*C32683 )  ) + (  (  ( C33329*cnst1655 ) /2.0 ) + (  ( C31812*C32697 ) *C31486 )  ) ;
    double gz210300 =  (  ( C33523* ( C32683*C31440 )  ) /2.0 ) + (  ( C31479* ( C32063*C32683 )  ) +cnst1666 ) ;
    double gz201300 =  (  ( C33289* ( C32683*C31544 )  ) + ( C33289* ( C32697*C31486 )  )  ) + (  ( C33337*cnst1655 ) /2.0 ) ;
    double gy210210 =  ( C31548* ( C32176*C31625 )  ) + (  (  ( C32176*C31746 ) *C31486 ) - (  ( cnst1551*C32742 ) /2.0 )  ) ;
    double gz210201 =  (  ( C31908* ( C32063*C31625 )  ) + ( C31908* ( C31746*C31440 )  )  ) - (  (  ( C31625*C31440 ) *C31957 ) /2.0 ) ;
    double gz201210 =  (  ( C33337* ( C32707*C31625 )  ) /2.0 ) + (  (  ( C31625*C31819 ) *C33289 ) + ( C33289* ( C32707*C31746 )  )  ) ;
    double gz201102 =  (  (  ( cnst682*C31713 ) /C31444 ) + (  ( C31544*C31570 ) *C32834 )  ) - (  ( C33471*cnst1434 ) /2.0 ) ;
    double cnst1718 =  (  ( C33288* ( C32827*C31570 )  ) /2.0 ) + (  (  ( C32982*C31458 ) *C31713 ) /C31444 ) ;
    double gy201102 =  (  ( C31478*C31570 ) *C32846 ) +cnst1718;
    double gy210120 =  ( C31548* ( C32746*C31570 )  ) + (  (  ( cnst1344*C31713 ) /C31444 ) - (  ( cnst1434*C33469 ) /2.0 )  ) ;
    double gy201111 = cnst1547+ ( C32537* ( C31811*C31570 )  ) ;
    gy[(Ai + 5) * matrix_size + Bi + 1] += cc* (  ( cnst32*gy201111 ) - ( gy021111*cnst32 )  ) ;
    double gz210102 =  (  (  ( C32063*C31570 ) *C31927 ) + (  (  ( C31927*C31440 ) *C31713 ) /C31444 )  ) - (  ( C33459* ( C31570*C31440 )  ) /2.0 ) ;
    double cnst1736 =  (  (  ( C32176*C32795 ) *C31713 ) /C31444 ) - (  (  ( C31570*C32795 ) *C32742 ) /2.0 ) ;
    double gy210111 =  ( C31916* ( C32176*C31570 )  ) +cnst1736;
    double gz210111 =  (  (  (  ( C31908*C32173 ) *C31713 ) /C31444 ) + ( C31908* ( C32246*C31570 )  )  ) - (  (  ( C32173*C31570 ) *C31957 ) /2.0 ) ;
    double C31569 = C31521- (  ( C31520*C31446 ) /C31444 ) ;
    double cnst1753 = C31569*C31486;
    double C31601 = 2* ( C31569*ae ) ;
    double C31722 =  (  ( be* ( C31601- ( C31508/C31444 )  )  ) /C31444 ) + (  ( C31599/C31444 ) - (  ( C31446*C31670 ) /C31444 )  ) ;
    double gy300030 =  (  (  ( C31722*C31851 ) *C31486 ) - (  ( C33542*cnst1753 ) /2.0 )  ) + ( C31548* ( C31569*C31851 )  ) ;
    double gz300003 =  (  (  ( C31722*C31486 ) *C31948 ) + (  ( C31544*C31569 ) *C31948 )  ) - (  ( C33543*cnst1753 ) /2.0 ) ;
    double C31643 =  (  ( C31601+ ( 3*C31541 )  ) /C31461 ) + (  ( C31449*C31590 ) /C31444 ) ;
    double gx300102 =  ( C31946* ( C31486*C31643 )  ) + (  (  ( C31544*C31643 ) *C31907 ) - (  ( C31752*cnst120 ) /2.0 )  ) ;
    double cnst1790 =  (  ( C31449*C31721 ) /C31444 ) + (  (  ( C31680+ ( C31682*3 )  ) + ( cnst34*C31643 )  ) /C31461 ) ;
    double cnst1794 =  (  ( C33454*C31449 ) /C31444 ) + (  (  (  ( 3*C33455 ) + ( C31752*2 )  ) + ( cnst33*cnst1790 )  ) /C31461 ) ;
    double gx300111 =  (  (  ( C31819*C31643 ) *C32795 ) - (  (  ( C32707*C32795 ) *C31752 ) /2.0 )  ) + ( C31916* ( C32707*C31643 )  ) ;
    double gx300120 =  (  ( C31486* ( C31643*C31849 )  ) - (  ( cnst234*C31752 ) /2.0 )  ) + (  ( C31810*C31643 ) *C31548 ) ;
    double gz300021 =  (  ( C31908* ( C31722*C31810 )  ) + (  ( C31569*C31849 ) *C31908 )  ) - (  ( C31957* ( C31569*C31810 )  ) /2.0 ) ;
    double gy300012 =  (  ( C31907* ( C31811*C31722 )  ) - (  ( C31860* ( C31569*C31907 )  ) /2.0 )  ) + (  ( C31811*C31569 ) *C31946 ) ;
    double gy300021 =  (  (  ( C31722*C31830 ) *C32795 ) - (  (  ( C31569*C32795 ) *C33457 ) /2.0 )  ) + ( C31916* ( C31569*C31830 )  ) ;
    double C31621 =  (  ( C31520*3. ) /C31461 ) + (  ( C31569*C31449 ) /C31444 ) ;
    double C31642 = C31621*2;
    double C31691 =  (  ( C31449*C31643 ) /C31444 ) + (  (  (  ( 3*C31592 ) +C31590 ) + (  ( ae*C31621 ) *2 )  ) /C31461 ) ;
    double gx300210 =  (  (  ( C31819*C31691 ) *C31486 ) - (  ( cnst40*C33454 ) /2.0 )  ) + ( C31548* ( C32707*C31691 )  ) ;
    double gx300201 =  (  (  ( C31544*C31691 ) *C32795 ) - (  ( C33454*cnst41 ) /2.0 )  ) + ( C31916* ( C31486*C31691 )  ) ;
    double C31749 =  (  (  ( 3*C31670 ) /C31461 ) + (  ( C31722*C31449 ) /C31444 )  ) + (  (  ( ae* ( be*C31621 )  ) *2 ) /C31444 ) ;
    double gy300111 =  ( C31916* ( C31811*C31621 )  ) + (  (  ( C31811*C31749 ) *C32795 ) - (  (  ( C32795*C31621 ) *C31860 ) /2.0 )  ) ;
    gy[(Ai + 6) * matrix_size + Bi + 1] += cc* (  ( gy120111*cnst25 ) + ( cnst10*gy300111 )  ) ;
    double C31757 =  (  ( C31722+ (  ( 3*C31713 ) /C31444 )  ) /C31461 ) + (  ( C31449*C31749 ) /C31444 ) ;
    double gz300120 =  (  ( C31479* ( C31749*C31810 )  ) + ( C31479* ( C31621*C31849 )  )  ) + (  ( C33523* ( C31810*C31621 )  ) /2.0 ) ;
    double cnst1882 = C31486*C31621;
    double gz300102 =  (  (  ( C31486*C31749 ) *C31927 ) + ( C31927* ( C31544*C31621 )  )  ) - (  ( C33459*cnst1882 ) /2.0 ) ;
    double gy300120 =  (  ( C31486* ( C31749*C31830 )  ) - (  ( C33457*cnst1882 ) /2.0 )  ) + ( C31548* ( C31830*C31621 )  ) ;
    double gy300102 =  (  ( C31907* ( C31478*C31749 )  ) + (  (  ( C31907*C31621 ) *C33288 ) /2.0 )  ) + ( C31946* ( C31478*C31621 )  ) ;
    double gz300111 =  (  (  ( C31819*C31621 ) *C31908 ) + (  ( C32707*C31749 ) *C31908 )  ) - (  (  ( C32707*C31621 ) *C31957 ) /2.0 ) ;
    double C31672 =  (  ( C31449*C31621 ) /C31444 ) + (  (  ( 3*C31570 ) +C31569 ) /C31461 ) ;
    double cnst1899 = C31672*C31486;
    double C31716 =  (  ( C31449*C31672 ) /C31444 ) + (  (  ( C31625*3 ) +C31642 ) /C31461 ) ;
    double cnst1906 = C31716*C31486;
    double C31759 =  (  (  (  ( 2* ( be*C31672 )  ) -C31569 ) *ae ) /C31444 ) +C31757;
    double gz300201 =  (  ( C31908* ( C31544*C31672 )  ) + ( C31908* ( C31759*C31486 )  )  ) - (  ( C31957*cnst1899 ) /2.0 ) ;
    double C31762 =  (  ( C31759*C31449 ) /C31444 ) + (  (  ( C31746*3 ) + ( C31749*2 )  ) /C31461 ) ;
    double C31763 = C31762+ (  ( ae* (  (  ( be*C31716 ) *2 ) -C31642 )  ) /C31444 ) ;
    double gz300300 =  (  ( C31479* ( C31763*C31486 )  ) + ( C31479* ( C31544*C31716 )  )  ) + (  ( C33523*cnst1906 ) /2.0 ) ;
    double gy300300 =  (  (  ( cnst1906*C33288 ) /2.0 ) + (  ( C31478*C31763 ) *C31486 )  ) + (  ( C31478*C31716 ) *C31548 ) ;
    double gy300210 =  (  (  ( C31811*C31759 ) *C31486 ) - (  ( C31860*cnst1899 ) /2.0 )  ) + ( C31548* ( C31811*C31672 )  ) ;
    double C31727 =  (  ( C31449*C31691 ) /C31444 ) + (  (  (  ( C31643*2 ) + ( C31645*3 )  ) + (  ( C31672*ae ) *2 )  ) /C31461 ) ;
    double cnst1949 =  (  ( C31544*C31727 ) *C31486 ) - (  (  ( std::pow(C31486 , 2) ) *cnst1794 ) /2.0 ) ;
    double gx300300 = cnst1949+ (  ( C31486*C31727 ) *C31548 ) ;
    double gy300201 =  (  (  (  ( C31672*C32795 ) *C33288 ) /2.0 ) + (  ( C31478*C31759 ) *C32795 )  ) + ( C31916* ( C31478*C31672 )  ) ;
    double gz300210 =  (  ( C31479* ( C32707*C31759 )  ) + (  ( C31672*C31819 ) *C31479 )  ) + (  (  ( C32707*C31672 ) *C33523 ) /2.0 ) ;
    double gz300012 =  (  (  ( C31569*C31819 ) *C31927 ) + (  ( C32707*C31722 ) *C31927 )  ) - (  (  ( C32707*C31569 ) *C33459 ) /2.0 ) ;
    double C31926 =  ( C31890/C31490 ) + (  ( C31867*C31907 ) /C31444 ) ;
    double cnst1990 = C31486*C31926;
    double C31955 =  (  (  (  ( be*C31926 ) *2 ) - ( C31890/C31444 )  ) *ae ) + ( C31916+ ( C31867*C31946 )  ) ;
    double gy120003 =  (  (  ( C33344* ( C31432*C31926 )  ) /2.0 ) + (  ( C32056*C31599 ) *C31926 )  ) + (  ( C31955* ( C31432*C32056 )  ) /C31444 ) ;
    double gy030003 =  (  (  ( cnst1990*C33307 ) /2.0 ) + (  ( C32084*C31550 ) *C31926 )  ) + (  ( C31955*cnst1116 ) /C31444 ) ;
    double gx300003 =  (  (  ( C31544*C31590 ) *C31926 ) + (  ( cnst1990*C33290 ) /2.0 )  ) + (  ( C31955*cnst977 ) /C31444 ) ;
    double gy210003 =  (  (  (  ( C31520*C31926 ) *C33329 ) /2.0 ) + (  ( C31812*C31670 ) *C31926 )  ) + (  ( C31955* ( C31812*C31520 )  ) /C31444 ) ;
    double gx120003 =  (  ( C31955* ( C31501*C32043 )  ) /C31444 ) + (  (  ( C33352* ( C31926*C32043 )  ) /2.0 ) + (  ( C32096*C31501 ) *C31926 )  ) ;
    double gx210003 =  (  ( C31955* ( C31440*C31541 )  ) /C31444 ) + (  (  (  ( C31926*C31440 ) *C33330 ) /2.0 ) + (  ( C32063*C31541 ) *C31926 )  ) ;
    double gy300003 =  (  (  ( C31478*C31722 ) *C31926 ) + (  (  ( C31569*C31926 ) *C33288 ) /2.0 )  ) + (  ( C31955* ( C31478*C31569 )  ) /C31444 ) ;
    double C31829 =  ( C31793/C31490 ) + (  ( C31770*C31810 ) /C31444 ) ;
    double C31858 =  (  (  ( 2* ( be*C31829 )  ) - ( C31793/C31444 )  ) *ae ) + (  ( C31770*C31849 ) +C31819 ) ;
    double cnst2040 =  (  ( C31858* ( C31442*C31541 )  ) /C31444 ) + (  ( C33330* ( C31442*C31829 )  ) /2.0 ) ;
    double gx201030 = cnst2040+ (  ( C31829*C31541 ) *C32375 ) ;
    double cnst2051 =  (  ( C33352* ( C32366*C31829 )  ) /2.0 ) + (  ( C31858* ( C31501*C32366 )  ) /C31444 ) ;
    double gx102030 = cnst2051+ (  ( C31501*C31829 ) *C32391 ) ;
    double gz201030 =  (  (  ( C31858* ( C33289*C31520 )  ) /C31444 ) + ( C33289* ( C31829*C31670 )  )  ) + (  ( C33337* ( C31520*C31829 )  ) /2.0 ) ;
    double gz300030 =  (  (  ( C31569*C31829 ) *C33523 ) /2.0 ) + (  (  (  ( C31569*C31479 ) *C31858 ) /C31444 ) + ( C31479* ( C31722*C31829 )  )  ) ;
    double cnst2082 = C31829*C31486;
    double gx300030 =  (  (  ( cnst2082*C33290 ) /2.0 ) + (  ( cnst977*C31858 ) /C31444 )  ) + ( C31548* ( C31590*C31829 )  ) ;
    double gz003030 =  (  ( cnst2082*C33315 ) /2.0 ) + (  (  ( C31858*cnst450 ) /C31444 ) + (  ( C31829*C31550 ) *C32387 )  ) ;
    double gz102030 =  (  (  ( C31829*C31599 ) *C32373 ) + (  (  ( C31432*C32373 ) *C31858 ) /C31444 )  ) + (  (  ( C31432*C31829 ) *C33353 ) /2.0 ) ;
    double C32026 = C32007/C31490;
    double C32075 = C32026- (  ( C31456*C32043 ) /C31444 ) ;
    double C32170 =  (  ( C31770*C32075 ) /C31444 ) + (  ( C32043*3. ) /C31461 ) ;
    double C32188 = C32170*2;
    double cnst2115 = C32170*C31486;
    double cnst2133 = C31486*C32075;
    double C32154 =  ( ae*C32075 ) *2;
    double C32109 =  (  ( C32063/C31444 ) - (  ( C32096*C31456 ) /C31444 )  ) + (  ( be* ( C32154- ( C32007/C31444 )  )  ) /C31444 ) ;
    double C32242 =  (  (  ( C32109*C31770 ) /C31444 ) + (  ( C32096*3 ) /C31461 )  ) + (  (  (  ( C32170*be ) *ae ) *2 ) /C31444 ) ;
    double gx030012 =  (  ( C31907* ( C31464*C32242 )  ) + (  ( C33308* ( C32170*C31907 )  ) /2.0 )  ) + (  ( C32170*C31464 ) *C31946 ) ;
    double gz030210 =  (  ( C33523* ( C32170*C32049 )  ) /2.0 ) + (  (  ( C32170*C32098 ) *C31479 ) + (  ( C32049*C32242 ) *C31479 )  ) ;
    double gz030111 =  (  ( C31908* ( C32242*C32643 )  ) + ( C31908* ( C32170*C32067 )  )  ) - (  ( C31957* ( C32170*C32643 )  ) /2.0 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 1] += - ( cc* (  (  ( cnst20*gz210111 ) + ( cnst37*gz012111 )  ) + ( cnst20*gz030111 )  )  ) ;
    gz[(Ai + 0) * matrix_size + Bi + 1] += cc* (  ( gz210111*cnst25 ) - ( cnst10*gz030111 )  ) ;
    double gx030210 =  (  ( C31486* ( C32242*C32070 )  ) - (  ( cnst2115*C33461 ) /2.0 )  ) + ( C31548* ( C32170*C32070 )  ) ;
    double gz030012 =  (  ( C31927* ( C32170*C31550 )  ) + (  ( C31486*C32242 ) *C31927 )  ) - (  ( cnst2115*C33459 ) /2.0 ) ;
    double gx030111 =  (  (  ( C32040*C32242 ) *C32795 ) - (  (  ( C32170*C32795 ) *C32044 ) /2.0 )  ) + (  ( C32170*C32040 ) *C31916 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 1] += cc* (  ( gx210111*cnst25 ) - ( cnst10*gx030111 )  ) ;
    double gx030300 =  (  ( C31486* ( C32109*C32095 )  ) - (  ( cnst2133*C33544 ) /2.0 )  ) + ( C31548* ( C32095*C32075 )  ) ;
    double gx030102 =  (  ( C31907* ( C32109*C32040 )  ) - (  (  ( C31907*C32075 ) *C32044 ) /2.0 )  ) + ( C31946* ( C32040*C32075 )  ) ;
    double gz030003 =  (  (  ( C32075*C31550 ) *C31948 ) + (  ( C32109*C31486 ) *C31948 )  ) - (  ( cnst2133*C33543 ) /2.0 ) ;
    double C32203 =  (  ( C31770*C32084 ) /C31444 ) + (  ( C32154+ ( C32056*3 )  ) /C31461 ) ;
    double gy030210 =  (  ( C32203*C32049 ) *C31548 ) + (  (  ( C32203*C32098 ) *C31486 ) - (  ( C32307*cnst335 ) /2.0 )  ) ;
    double C32278 =  (  ( C32203*C31770 ) /C31444 ) + (  (  (  ( C32170*ae ) *2 ) + (  ( 3*C32204 ) +C32084 )  ) /C31461 ) ;
    double gy030120 =  (  ( C31486* ( C32067*C32278 )  ) - (  ( C33463*cnst55 ) /2.0 )  ) + ( C31548* ( C32643*C32278 )  ) ;
    double gy030021 =  (  ( C32795* ( C32278*C31550 )  ) - (  ( cnst41*C33463 ) /2.0 )  ) + ( C31916* ( C31486*C32278 )  ) ;
    double cnst2221 =  (  (  ( cnst14*gy030021 ) - ( gy030201*cnst14 )  ) - ( gy210201*cnst14 )  ) + ( cnst14*gy210021 ) ;
    double cnst2226 =  (  ( gy210201*cnst28 ) + (  ( cnst16*gy030021 ) - ( gy030201*cnst16 )  )  ) - ( gy210021*cnst28 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 5] += cc*cnst2226;
    double gy030111 =  ( C31916* ( C32203*C32643 )  ) + (  (  ( C32203*C32067 ) *C32795 ) - (  ( C32307* ( C32643*C32795 )  ) /2.0 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 1] +=  (  ( gy210111*cnst25 ) - ( cnst10*gy030111 )  ) *cc;
    double gy030012 =  (  (  ( C32203*C31550 ) *C31907 ) - (  ( C32307*cnst120 ) /2.0 )  ) + ( C31946* ( C32203*C31486 )  ) ;
    double cnst2238 =  (  (  ( C32203*cnst34 ) + ( C32253+ ( C32256*3 )  )  ) /C31461 ) + (  ( C32293*C31770 ) /C31444 ) ;
    double cnst2242 =  (  (  (  ( C32307*2 ) + ( 3*C33464 )  ) + ( cnst2238*cnst33 )  ) /C31461 ) + (  ( C31770*C33463 ) /C31444 ) ;
    double gz030102 =  (  (  ( C32067*C32075 ) *C31927 ) + (  ( C32109*C32643 ) *C31927 )  ) - (  (  ( C32643*C32075 ) *C33459 ) /2.0 ) ;
    double gx030201 =  (  (  ( C32109*C32070 ) *C32795 ) - (  (  ( C32795*C32075 ) *C33461 ) /2.0 )  ) + ( C31916* ( C32070*C32075 )  ) ;
    double gx030003 =  (  ( C31955* ( C31464*C32075 )  ) /C31444 ) + (  (  (  ( C32075*C31926 ) *C33308 ) /2.0 ) + ( C31926* ( C32109*C31464 )  )  ) ;
    double gz030201 =  (  (  ( C32075*C32098 ) *C31908 ) + ( C31908* ( C32109*C32049 )  )  ) - (  (  ( C32049*C32075 ) *C31957 ) /2.0 ) ;
    double C32171 = C32026+ (  ( C31770*C32043 ) /C31444 ) ;
    double cnst2275 = C32171*C31486;
    double C32228 =  (  (  ( C32171*3 ) +C32075 ) /C31461 ) + (  ( C32170*C31770 ) /C31444 ) ;
    double cnst2298 = C31486*C32228;
    double C32230 =  (  ( C32187+C32043 ) /C31461 ) + (  ( C31770*C32171 ) /C31444 ) ;
    double cnst2335 = C31486*C32230;
    double C32288 =  (  ( C32188+ ( 3*C32230 )  ) /C31461 ) + (  ( C31770*C32228 ) /C31444 ) ;
    double cnst2362 = C32288*C31486;
    double C32880 = C32171*2;
    double C32896 =  (  ( C32880+ ( C32739*2 )  ) /C31461 ) + (  ( C31770*C32230 ) /C31444 ) ;
    double cnst2384 = C31486*C32896;
    double C32227 =  (  (  ( be*C32171 ) *ae ) *2 ) + ( C32063+ ( C32096*C31770 )  ) ;
    double gz021111 =  (  (  ( C32171*C32067 ) *C32467 ) + (  ( C32227* ( C32643*C32467 )  ) /C31444 )  ) - (  ( C32830* ( C32171*C32643 )  ) /2.0 ) ;
    gz[(Ai + 5) * matrix_size + Bi + 1] += cc* (  ( cnst32*gz201111 ) - ( cnst32*gz021111 )  ) ;
    double cnst2409 =  (  ( C32227* ( C31445*C32982 )  ) /C31444 ) + (  ( C33308* ( C32171*C32827 )  ) /2.0 ) ;
    double cnst2412 =  (  ( C32227* ( C31442*C32070 )  ) /C31444 ) - (  ( C33461* ( C31442*C32171 )  ) /2.0 ) ;
    double cnst2415 =  (  ( C32227* ( C32040*C32464 )  ) /C31444 ) - (  (  ( C32171*C32464 ) *C32044 ) /2.0 ) ;
    double gx021111 = cnst2415+ (  ( C32040*C32171 ) *C32537 ) ;
    gx[(Ai + 5) * matrix_size + Bi + 1] += cc* (  ( cnst32*gx201111 ) - ( gx021111*cnst32 )  ) ;
    double cnst2421 =  (  ( C33352* ( C32171*C31907 )  ) /2.0 ) + (  ( C32227* ( C31501*C31907 )  ) /C31444 ) ;
    double gx120012 = cnst2421+ (  ( C31501*C32171 ) *C31946 ) ;
    double gz021012 =  (  (  ( C32171*C31550 ) *C32834 ) + (  ( C32227*cnst682 ) /C31444 )  ) - (  ( cnst2275*C33471 ) /2.0 ) ;
    double gz120111 =  (  ( C31908* ( C32171*C31673 )  ) + (  ( C32227* ( C31539*C31908 )  ) /C31444 )  ) - (  ( C31957* ( C31539*C32171 )  ) /2.0 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 1] += cc* (  ( gz102111*cnst37 ) - (  ( cnst20*gz300111 ) + ( cnst20*gz120111 )  )  ) ;
    gz[(Ai + 6) * matrix_size + Bi + 1] += cc* (  ( gz120111*cnst25 ) + ( cnst10*gz300111 )  ) ;
    double C32294 =  (  ( C32109+ (  ( C32227*3 ) /C31444 )  ) /C31461 ) + (  ( C31770*C32242 ) /C31444 ) ;
    double C32303 = C32294+ (  (  (  (  ( be*C32228 ) *2 ) -C32075 ) *ae ) /C31444 ) ;
    double gx030021 =  (  (  ( C33308* ( C32228*C32795 )  ) /2.0 ) + ( C32795* ( C31464*C32303 )  )  ) + ( C31916* ( C31464*C32228 )  ) ;
    double cnst2446 =  (  ( gx210201*cnst28 ) + (  ( cnst16*gx030021 ) - ( gx030201*cnst16 )  )  ) - ( cnst28*gx210021 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 5] += cc*cnst2446;
    double cnst2450 =  ( cnst14*gx210021 ) + (  (  ( cnst14*gx030021 ) - ( cnst14*gx030201 )  ) - ( gx210201*cnst14 )  ) ;
    double gx030120 =  (  ( C32040*C32228 ) *C31548 ) + (  ( C31486* ( C32303*C32040 )  ) - (  ( cnst2298*C32044 ) /2.0 )  ) ;
    double gz030120 =  (  ( C31479* ( C32067*C32228 )  ) + ( C31479* ( C32303*C32643 )  )  ) + (  (  ( C32228*C32643 ) *C33523 ) /2.0 ) ;
    double gz030021 =  (  (  ( C32228*C31550 ) *C31908 ) + ( C31908* ( C32303*C31486 )  )  ) - (  ( cnst2298*C31957 ) /2.0 ) ;
    double cnst2463 =  ( cnst14*gz210021 ) + (  (  ( cnst14*gz030021 ) - ( cnst14*gz030201 )  ) - ( cnst14*gz210201 )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 5] += cc* (  ( cnst21*gz012021 ) + ( cnst2463- ( cnst21*gz012201 )  )  ) ;
    double cnst2469 =  (  ( gz210201*cnst28 ) + (  ( gz030021*cnst16 ) - ( cnst16*gz030201 )  )  ) - ( gz210021*cnst28 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 5] += cnst2469*cc;
    double gz021210 =  (  ( C33337* ( C32171*C32049 )  ) /2.0 ) + (  ( C33289* ( C32171*C32098 )  ) + (  ( C32227* ( C33289*C32049 )  ) /C31444 )  ) ;
    double C32304 =  (  (  (  (  ( be*C32230 ) *2 ) -C32043 ) *ae ) /C31444 ) + (  (  ( C32096+C32261 ) /C31461 ) + (  ( C32227*C31770 ) /C31475 )  ) ;
    double gz021120 =  (  ( C33337* ( C32230*C32643 )  ) /2.0 ) + (  ( C33289* ( C32230*C32067 )  ) + ( C33289* ( C32643*C32304 )  )  ) ;
    double gx120120 =  (  ( C31486* ( C31543*C32304 )  ) - (  ( cnst2335*C32669 ) /2.0 )  ) + ( C31548* ( C32230*C31543 )  ) ;
    double C32316 =  (  (  ( 3*C32304 ) + ( C32242*2 )  ) /C31461 ) + (  ( C31770*C32303 ) /C31444 ) ;
    double C32317 = C32316+ (  ( ae* (  (  ( C32288*be ) *2 ) -C32188 )  ) /C31444 ) ;
    double gz030030 =  (  ( C33523*cnst2362 ) /2.0 ) + (  (  ( C32288*C31550 ) *C31479 ) + ( C31479* ( C31486*C32317 )  )  ) ;
    double gx030030 =  ( C31548* ( C31464*C32288 )  ) + (  ( C31486* ( C31464*C32317 )  ) + (  ( C33308*cnst2362 ) /2.0 )  ) ;
    double gx021120 =  (  ( C31442* ( C32040*C32304 )  ) - (  (  ( C31442*C32230 ) *C32044 ) /2.0 )  ) + ( C32375* ( C32040*C32230 )  ) ;
    gx[(Ai + 5) * matrix_size + Bi + 4] += cc* (  ( cnst1638+ ( cnst14*gx021120 )  ) - ( cnst21*gx021102 )  ) ;
    double cnst2504 =  (  (  ( cnst16*gx201300 ) + ( gx201120*cnst28 )  ) - ( gx021300*cnst16 )  ) - ( gx021120*cnst28 ) ;
    gx[(Ai + 5) * matrix_size + Bi + 6] += cc*cnst2504;
    double gz120021 =  (  ( C31908* ( C32230*C31599 )  ) + ( C31908* ( C31432*C32304 )  )  ) - (  ( C31957* ( C31432*C32230 )  ) /2.0 ) ;
    double cnst2511 =  (  (  ( gz300201*cnst16 ) - ( gz300021*cnst16 )  ) + ( gz120201*cnst28 )  ) - ( cnst28*gz120021 ) ;
    gz[(Ai + 6) * matrix_size + Bi + 5] += cnst2511*cc;
    double cnst2514 =  ( cnst14*gz120021 ) + (  (  ( gz300021*cnst14 ) - ( gz300201*cnst14 )  ) - ( cnst14*gz120201 )  ) ;
    gz[(Ai + 4) * matrix_size + Bi + 5] += cc* (  ( cnst2514+ ( cnst21*gz102201 )  ) - ( cnst21*gz102021 )  ) ;
    double gx120021 =  ( C31916* ( C31501*C32230 )  ) + (  ( C32795* ( C31501*C32304 )  ) + (  ( C33352* ( C32230*C32795 )  ) /2.0 )  ) ;
    double cnst2521 =  (  ( cnst28*gx120201 ) + (  ( gx300201*cnst16 ) - ( gx300021*cnst16 )  )  ) - ( gx120021*cnst28 ) ;
    gx[(Ai + 6) * matrix_size + Bi + 5] += cc*cnst2521;
    double cnst2524 =  (  (  ( gx300021*cnst14 ) - ( cnst14*gx300201 )  ) - ( cnst14*gx120201 )  ) + ( cnst14*gx120021 ) ;
    double gz021021 =  (  (  ( C31486*C32304 ) *C32467 ) + (  ( C32230*C31550 ) *C32467 )  ) - (  ( cnst2335*C32830 ) /2.0 ) ;
    double cnst2529 = cnst26*gz021021;
    gz[(Ai + 5) * matrix_size + Bi + 3] += cc* ( cnst1586+cnst2529 ) ;
    double cnst2533 =  ( cnst1*gz021021 ) + (  (  ( cnst1*gz201201 ) - ( gz201021*cnst1 )  ) - ( gz021201*cnst1 )  ) ;
    gz[(Ai + 5) * matrix_size + Bi + 5] += cc*cnst2533;
    double gz120120 =  (  ( C33523* ( C31539*C32230 )  ) /2.0 ) + (  ( C31479* ( C31673*C32230 )  ) + ( C31479* ( C31539*C32304 )  )  ) ;
    double gx021021 =  (  ( C31464*C32230 ) *C32537 ) + (  (  ( C31464*C32304 ) *C32464 ) + (  (  ( C32464*C32230 ) *C33308 ) /2.0 )  ) ;
    double cnst2541 =  (  (  ( gx201201*cnst1 ) - ( gx201021*cnst1 )  ) - ( gx021201*cnst1 )  ) + ( gx021021*cnst1 ) ;
    gx[(Ai + 5) * matrix_size + Bi + 5] += cc*cnst2541;
    double cnst2543 = cnst26*gx021021;
    gx[(Ai + 5) * matrix_size + Bi + 3] += cc* ( cnst2543+cnst1475 ) ;
    double C32898 =  (  (  (  ( C32227*2 ) /C31444 ) + ( C32758*2 )  ) /C31461 ) + (  ( C31770*C32304 ) /C31444 ) ;
    double C32905 =  (  (  (  (  ( be*C32896 ) *2 ) -C32880 ) *ae ) /C31444 ) +C32898;
    double cnst2546 = C31442* ( C31464*C32905 ) ;
    double gx021030 =  (  ( C31464*C32896 ) *C32375 ) + ( cnst2546+ (  (  ( C31442*C32896 ) *C33308 ) /2.0 )  ) ;
    double cnst2552 =  ( cnst14*gx021030 ) - (  (  ( cnst14*gx201210 ) + ( cnst21*gx201012 )  ) + ( cnst14*gx201030 )  ) ;
    double gz120030 =  (  ( C33523* ( C31432*C32896 )  ) /2.0 ) + ( cnst2546+ (  ( C32896*C31599 ) *C31479 )  ) ;
    double gx120030 =  (  (  ( C31501*C32905 ) *C31486 ) + (  ( C33352*cnst2384 ) /2.0 )  ) + (  ( C31501*C32896 ) *C31548 ) ;
    double gz021030 =  (  ( C33289* ( C31486*C32905 )  ) + ( C33289* ( C32896*C31550 )  )  ) + (  ( C33337*cnst2384 ) /2.0 ) ;
    double cnst2563 =  (  ( cnst16*gz021030 ) + (  ( gz201210*cnst28 ) - ( gz201030*cnst16 )  )  ) - ( gz021210*cnst28 ) ;
    gz[(Ai + 5) * matrix_size + Bi + 0] += cc*cnst2563;
    double cnst2565 =  ( cnst14*gz021030 ) - (  ( gz201030*cnst14 ) + (  ( cnst14*gz201210 ) + ( cnst21*gz201012 )  )  ) ;
    gz[(Ai + 5) * matrix_size + Bi + 2] += cc* (  ( cnst2565+ ( cnst14*gz021210 )  ) + ( cnst21*gz021012 )  ) ;
    double gx120210 =  (  ( C32672*C32171 ) *C31548 ) + (  (  ( C32227*cnst1031 ) /C31444 ) - (  ( cnst2275*C33467 ) /2.0 )  ) ;
    double gx021012 =  (  ( C31464*C32171 ) *C32846 ) +cnst2409;
    double gz120210 =  (  (  ( C32671*C32171 ) *C33523 ) /2.0 ) + (  (  ( C32688*C32171 ) *C31479 ) + (  ( C32227* ( C32671*C31479 )  ) /C31444 )  ) ;
    double cnst2581 =  (  ( C32227* ( C31543*C32795 )  ) /C31444 ) - (  (  ( C32171*C32795 ) *C32669 ) /2.0 ) ;
    double gx120111 =  (  ( C32171*C31543 ) *C31916 ) +cnst2581;
    gx[(Ai + 6) * matrix_size + Bi + 1] += cc* (  ( cnst10*gx300111 ) + ( gx120111*cnst25 )  ) ;
    double gx021210 = cnst2412+ (  ( C32171*C32070 ) *C32375 ) ;
    gx[(Ai + 5) * matrix_size + Bi + 2] += cc* (  (  ( cnst14*gx021210 ) +cnst2552 ) + ( gx021012*cnst21 )  ) ;
    double cnst2592 =  (  (  ( gx201210*cnst28 ) - ( gx201030*cnst16 )  ) + ( gx021030*cnst16 )  ) - ( cnst28*gx021210 ) ;
    gx[(Ai + 5) * matrix_size + Bi + 0] += cc*cnst2592;
    double gz120012 =  (  (  ( C32227* ( C31432*C31927 )  ) /C31444 ) + (  ( C32171*C31599 ) *C31927 )  ) - (  (  ( C31432*C32171 ) *C33459 ) /2.0 ) ;
    double C32251 =  (  ( C31770*C32204 ) /C31444 ) + (  (  ( C32056+C32191 ) + (  ( C32171*ae ) *2 )  ) /C31461 ) ;
    double C32306 =  (  (  (  ( 3*C32251 ) + ( C32203*2 )  ) + (  ( ae*C32228 ) *2 )  ) /C31461 ) + (  ( C31770*C32278 ) /C31444 ) ;
    double gy030030 =  (  ( C31486*C32306 ) *C31548 ) + (  ( C31486* ( C32306*C31550 )  ) - (  ( cnst39*cnst2242 ) /2.0 )  ) ;
    double gy021120 =  (  ( C32251*C32643 ) *C32375 ) + (  ( C31442* ( C32067*C32251 )  ) - (  ( C33464* ( C31442*C32643 )  ) /2.0 )  ) ;
    double gy021021 =  (  ( C32464* ( C32251*C31550 )  ) - (  ( C33464*cnst178 ) /2.0 )  ) + ( C32537* ( C31486*C32251 )  ) ;
    double cnst2622 =  (  (  ( cnst1*gy201201 ) - ( cnst1*gy201021 )  ) - ( cnst1*gy021201 )  ) + ( gy021021*cnst1 ) ;
    gy[(Ai + 5) * matrix_size + Bi + 5] += cc*cnst2622;
    double cnst2623 = gy021021*cnst26;
    gy[(Ai + 5) * matrix_size + Bi + 3] +=  ( cnst2623+cnst1614 ) *cc;
    double gy120120 =  (  ( C31486* ( C31673*C32251 )  ) - (  ( C33464*cnst308 ) /2.0 )  ) + (  ( C31539*C32251 ) *C31548 ) ;
    double gy120021 =  (  (  ( C32251*C31599 ) *C32795 ) - (  ( C33464* ( C31432*C32795 )  ) /2.0 )  ) + ( C31916* ( C31432*C32251 )  ) ;
    double cnst2635 =  (  ( gy120201*cnst28 ) + (  ( cnst16*gy300201 ) - ( gy300021*cnst16 )  )  ) - ( cnst28*gy120021 ) ;
    gy[(Ai + 6) * matrix_size + Bi + 5] += cc*cnst2635;
    double cnst2637 =  (  (  ( gy300021*cnst14 ) - ( cnst14*gy300201 )  ) - ( cnst14*gy120201 )  ) + ( cnst14*gy120021 ) ;
    double C32900 =  (  ( C31770*C32251 ) /C31444 ) + (  (  (  ( C32230*ae ) *2 ) + (  ( C32204*2 ) + ( C32746*2 )  )  ) /C31461 ) ;
    double gy120030 =  ( C31548* ( C31432*C32900 )  ) + (  (  ( C32900*C31599 ) *C31486 ) - (  ( cnst63*C33548 ) /2.0 )  ) ;
    double gy021030 =  (  ( C32900*C31486 ) *C32375 ) + (  ( C31442* ( C32900*C31550 )  ) - (  ( C33548*cnst43 ) /2.0 )  ) ;
    double cnst2650 =  ( cnst14*gy021030 ) - (  (  ( cnst21*gy201012 ) + ( cnst14*gy201210 )  ) + ( gy201030*cnst14 )  ) ;
    gy[(Ai + 5) * matrix_size + Bi + 2] += cc* (  ( cnst21*gy021012 ) + (  ( cnst14*gy021210 ) +cnst2650 )  ) ;
    double cnst2655 =  (  (  ( gy201210*cnst28 ) - ( gy201030*cnst16 )  ) + ( cnst16*gy021030 )  ) - ( cnst28*gy021210 ) ;
    gy[(Ai + 5) * matrix_size + Bi + 0] += cc*cnst2655;
    double C32359 = C32351/C31490;
    double C32462 = C32359+ (  ( C31867*C32366 ) /C31444 ) ;
    double C32518 =  (  ( C31867*C32391 ) +C32375 ) + (  (  ( be*C32462 ) *ae ) *2 ) ;
    double gx012021 =  (  (  ( C33308* ( C32739*C32462 )  ) /2.0 ) + (  ( C32758*C31464 ) *C32462 )  ) + (  (  ( C32739*C31464 ) *C32518 ) /C31444 ) ;
    double C32983 = C32462*2;
    double gx102111 =  (  (  ( C32707*C31543 ) *C32518 ) /C31444 ) + (  (  ( C31819*C31543 ) *C32462 ) - (  ( C32669* ( C32707*C32462 )  ) /2.0 )  ) ;
    gx[(Ai + 4) * matrix_size + Bi + 1] += cc* (  ( gx102111*cnst37 ) - (  ( cnst20*gx120111 ) + ( cnst20*gx300111 )  )  ) ;
    double C32542 =  (  (  ( 2* ( ae*C32462 )  ) + ( C32373+C32482 )  ) /C31461 ) + (  ( C31867*C32495 ) /C31444 ) ;
    double gz102102 =  (  ( C32542* ( C31539*C31544 )  ) + (  ( C31486*C31673 ) *C32542 )  ) - (  ( C33466*cnst308 ) /2.0 ) ;
    double gz012012 =  (  (  ( C32246*C31486 ) *C32542 ) + (  ( C32173*C31550 ) *C32542 )  ) - (  ( C33466*cnst150 ) /2.0 ) ;
    double gz012102 =  (  (  ( C32067*C31440 ) *C32542 ) + (  ( C32063*C32643 ) *C32542 )  ) - (  ( C33466* ( C32643*C31440 )  ) /2.0 ) ;
    double gz102012 =  (  (  ( C32707*C31599 ) *C32542 ) + (  ( C31432*C31819 ) *C32542 )  ) - (  ( C33466* ( C32707*C31432 )  ) /2.0 ) ;
    double gy102111 =  (  ( C32518* ( C31539*C31811 )  ) /C31444 ) + (  ( C32462* ( C31811*C31673 )  ) - (  (  ( C31539*C32462 ) *C31860 ) /2.0 )  ) ;
    gy[(Ai + 4) * matrix_size + Bi + 1] += cc* (  ( cnst37*gy102111 ) - (  ( cnst20*gy120111 ) + ( cnst20*gy300111 )  )  ) ;
    double gy102021 =  (  (  ( C31432*C31830 ) *C32518 ) /C31444 ) + (  (  ( C31830*C31599 ) *C32462 ) - (  ( C33457* ( C31432*C32462 )  ) /2.0 )  ) ;
    double gy012111 =  (  ( C32462* ( C32176*C32067 )  ) - (  (  ( C32643*C32462 ) *C32742 ) /2.0 )  ) + (  ( C32518* ( C32176*C32643 )  ) /C31444 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 1] += - ( cc* (  (  ( gy012111*cnst37 ) + ( cnst20*gy210111 )  ) + ( cnst20*gy030111 )  )  ) ;
    double gx012111 =  (  ( C32462* ( C32246*C32040 )  ) - (  (  ( C32173*C32462 ) *C32044 ) /2.0 )  ) + (  (  ( C32040*C32173 ) *C32518 ) /C31444 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 1] += - (  (  ( cnst20*gx030111 ) + (  ( cnst20*gx210111 ) + ( gx012111*cnst37 )  )  ) *cc ) ;
    double gx012201 =  (  (  ( C32070*C31440 ) *C32518 ) /C31444 ) + (  ( C32462* ( C32063*C32070 )  ) - (  ( C33461* ( C32462*C31440 )  ) /2.0 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 5] += cc* (  ( cnst21*gx012021 ) + ( cnst2450- ( cnst21*gx012201 )  )  ) ;
    double cnst2761 = C31486*C32462;
    double gx102201 =  (  (  ( C32672*C31544 ) *C32462 ) - (  ( cnst2761*C33467 ) /2.0 )  ) + (  ( cnst1031*C32518 ) /C31444 ) ;
    double gy012021 =  (  (  ( C32746*C31550 ) *C32462 ) - (  ( C33469*cnst2761 ) /2.0 )  ) + (  ( C32518*cnst1344 ) /C31444 ) ;
    double C32521 =  (  ( C31867*C32462 ) /C31444 ) + (  ( C32478+C32366 ) /C31461 ) ;
    double C32595 =  (  (  (  ( 2* ( be*C32521 )  ) -C32366 ) *ae ) /C31444 ) + (  (  ( C31867*C32518 ) /C31475 ) + (  ( C32552+C32391 ) /C31461 )  ) ;
    double C33001 =  (  ( C32595*C31867 ) /C31444 ) + (  (  (  ( C32518*2 ) /C31444 ) + ( C32846*2 )  ) /C31461 ) ;
    double C32999 =  (  ( C32982+C32983 ) /C31461 ) + (  ( C31867*C32521 ) /C31444 ) ;
    double cnst2784 = C32999*C31486;
    double C33008 =  (  (  (  (  ( be*C32999 ) *2 ) -C32983 ) *ae ) /C31444 ) +C33001;
    double gx102003 =  (  (  ( C33352*cnst2784 ) /2.0 ) + (  ( C31501*C31544 ) *C32999 )  ) + ( C33008* ( C31501*C31486 )  ) ;
    double gy012003 =  (  ( C32999* ( C31812*C31550 )  ) + (  ( C33329*cnst2784 ) /2.0 )  ) + (  ( C31812*C31486 ) *C33008 ) ;
    double cnst2805 = C33008* ( C31464*C31440 ) ;
    double gy102003 = cnst2805+ (  ( C32999* ( C31478*C31599 )  ) + (  (  ( C31432*C32999 ) *C33288 ) /2.0 )  ) ;
    double gx012003 =  (  ( C32999* ( C32063*C31464 )  ) + (  (  ( C32999*C31440 ) *C33308 ) /2.0 )  ) +cnst2805;
    double gx102012 =  ( C32595* ( C32707*C31501 )  ) + (  (  ( C33352* ( C32707*C32521 )  ) /2.0 ) + (  ( C31501*C31819 ) *C32521 )  ) ;
    double gx012012 =  (  ( C32521* ( C31464*C32246 )  ) + (  ( C33308* ( C32173*C32521 )  ) /2.0 )  ) + ( C32595* ( C31464*C32173 )  ) ;
    double gy102012 =  (  (  ( C31811*C31599 ) *C32521 ) - (  ( C31860* ( C31432*C32521 )  ) /2.0 )  ) + ( C32595* ( C31432*C31811 )  ) ;
    double C33003 =  (  (  (  ( C32834*2 ) + ( C32495*2 )  ) + (  ( ae*C32521 ) *2 )  ) /C31461 ) + (  ( C31867*C32542 ) /C31444 ) ;
    double gz102003 =  (  (  ( C31432*C31544 ) *C33003 ) + (  ( C31486*C31599 ) *C33003 )  ) - (  ( cnst63*C33550 ) /2.0 ) ;
    double gz012003 =  (  (  ( C31440*C31550 ) *C33003 ) + ( C33003* ( C32063*C31486 )  )  ) - (  ( cnst49*C33550 ) /2.0 ) ;
    double cnst2835 = C31486*C32521;
    double gx102102 =  (  (  ( C31544*C31543 ) *C32521 ) - (  ( cnst2835*C32669 ) /2.0 )  ) + ( C32595* ( C31486*C31543 )  ) ;
    double gx012102 =  (  ( C32521* ( C32063*C32040 )  ) - (  (  ( C32521*C31440 ) *C32044 ) /2.0 )  ) + ( C32595* ( C32040*C31440 )  ) ;
    double gy102102 =  ( C32595* ( C31539*C31478 )  ) + (  (  (  ( C31539*C32521 ) *C33288 ) /2.0 ) + (  ( C31478*C31673 ) *C32521 )  ) ;
    double gy012012 =  ( C32595* ( C32176*C31486 )  ) + (  ( C32521* ( C32176*C31550 )  ) - (  ( cnst2835*C32742 ) /2.0 )  ) ;
    double gy012102 =  (  (  (  ( C32643*C32521 ) *C33329 ) /2.0 ) + (  ( C31812*C32067 ) *C32521 )  ) + ( C32595* ( C31812*C32643 )  ) ;
    double gx102021 =  (  (  (  ( C31810*C32462 ) *C33352 ) /2.0 ) + ( C32462* ( C31501*C31849 )  )  ) + (  (  ( C31501*C31810 ) *C32518 ) /C31444 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 5] += cc* (  ( cnst2524+ ( cnst21*gx102201 )  ) - ( gx102021*cnst21 )  ) ;
    double gy012201 =  (  (  ( C31812*C32098 ) *C32462 ) + (  (  ( C32049*C32462 ) *C33329 ) /2.0 )  ) + (  (  ( C31812*C32049 ) *C32518 ) /C31444 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 5] += cc* (  ( cnst21*gy012021 ) + ( cnst2221- ( cnst21*gy012201 )  )  ) ;
    double gy102201 =  (  (  ( C31478*C32671 ) *C32518 ) /C31444 ) + (  (  ( C33288* ( C32671*C32462 )  ) /2.0 ) + ( C32462* ( C32688*C31478 )  )  ) ;
    gy[(Ai + 4) * matrix_size + Bi + 5] +=  (  (  ( cnst21*gy102201 ) +cnst2637 ) - ( cnst21*gy102021 )  ) *cc;
    double C32382 = C32359- (  ( C32366*C31457 ) /C31444 ) ;
    double C32461 =  (  ( C32366*3. ) /C31461 ) + (  ( C31867*C32382 ) /C31444 ) ;
    double C32479 = 2*C32461;
    double cnst2904 = C31486*C32461;
    double cnst2920 = C32382*C31486;
    double C32445 = 2* ( C32382*ae ) ;
    double C32398 =  (  ( be* ( C32445- ( C32351/C31444 )  )  ) /C31444 ) + (  ( C32375/C31444 ) - (  ( C31457*C32391 ) /C31444 )  ) ;
    double gx003300 =  (  ( C32095*C31486 ) *C32398 ) + (  ( C32382* ( C32095*C31544 )  ) - (  ( cnst2920*C33544 ) /2.0 )  ) ;
    double gy003030 =  ( C32398* ( C31486*C31851 )  ) + (  (  ( C31851*C31550 ) *C32382 ) - (  ( C33542*cnst2920 ) /2.0 )  ) ;
    double C32533 =  (  (  (  ( be*C32461 ) *ae ) *2 ) /C31444 ) + (  (  ( C32398*C31867 ) /C31444 ) + (  ( 3*C32391 ) /C31461 )  ) ;
    double gy003111 =  (  (  ( C31811*C32067 ) *C32461 ) - (  (  ( C32643*C32461 ) *C31860 ) /2.0 )  ) + ( C32533* ( C31811*C32643 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 1] += cc* (  (  ( gy003111*cnst22 ) - ( cnst23*gy201111 )  ) - ( gy021111*cnst23 )  ) ;
    double gy003201 =  ( C32533* ( C31478*C32049 )  ) + (  (  ( C31478*C32098 ) *C32461 ) + (  (  ( C32049*C32461 ) *C33288 ) /2.0 )  ) ;
    double gx003111 =  (  (  ( C32040*C31819 ) *C32461 ) - (  (  ( C32707*C32461 ) *C32044 ) /2.0 )  ) + ( C32533* ( C32707*C32040 )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 1] += cc* (  (  ( cnst22*gx003111 ) - ( cnst23*gx201111 )  ) - ( gx021111*cnst23 )  ) ;
    double gx003201 =  (  (  ( C31544*C32070 ) *C32461 ) - (  ( C33461*cnst2904 ) /2.0 )  ) + ( C32533* ( C31486*C32070 )  ) ;
    double gx003021 =  ( C32533* ( C31464*C31810 )  ) + (  (  (  ( C31810*C32461 ) *C33308 ) /2.0 ) + ( C32461* ( C31464*C31849 )  )  ) ;
    double cnst2953 =  ( cnst792+ (  (  ( gx003201*cnst0 ) - ( gx003021*cnst0 )  ) -cnst1471 )  ) -cnst833;
    gx[(Ai + 3) * matrix_size + Bi + 5] += cc* ( cnst2953+cnst2543 ) ;
    double gy003021 =  ( C32533* ( C31486*C31830 )  ) + (  (  ( C31830*C31550 ) *C32461 ) - (  ( C33457*cnst2904 ) /2.0 )  ) ;
    double cnst2962 =  ( cnst1395+ (  (  ( gy003201*cnst0 ) - ( cnst0*gy003021 )  ) -cnst1610 )  ) -cnst1181;
    gy[(Ai + 3) * matrix_size + Bi + 5] += cc* ( cnst2623+cnst2962 ) ;
    double C32585 =  (  ( C32533*C31867 ) /C31444 ) + (  ( C32398+ (  ( 3*C32518 ) /C31444 )  ) /C31461 ) ;
    double C32494 =  (  (  ( C32373*3 ) +C32445 ) /C31461 ) + (  ( C32387*C31867 ) /C31444 ) ;
    double C32569 =  (  (  (  ( ae*C32461 ) *2 ) + ( C32387+ ( 3*C32495 )  )  ) /C31461 ) + (  ( C31867*C32494 ) /C31444 ) ;
    double gz003012 =  (  ( C32569* ( C32707*C31550 )  ) + (  ( C31486*C31819 ) *C32569 )  ) - (  ( cnst40*C33465 ) /2.0 ) ;
    double gz003102 =  (  ( C32569* ( C31486*C32067 )  ) + ( C32569* ( C31544*C32643 )  )  ) - (  ( C33465*cnst55 ) /2.0 ) ;
    double cnst2977 =  (  (  (  ( C32547*3 ) +C32544 ) + ( C32494*cnst34 )  ) /C31461 ) + (  ( C31867*C32584 ) /C31444 ) ;
    double cnst2981 =  (  ( C31867*C33465 ) /C31444 ) + (  (  (  ( C33466*3 ) + ( C32598*2 )  ) + ( cnst33*cnst2977 )  ) /C31461 ) ;
    double gz003021 =  (  ( C32494* ( C31810*C31550 )  ) + ( C32494* ( C31486*C31849 )  )  ) - (  ( cnst234*C32598 ) /2.0 ) ;
    double gz003111 =  (  (  ( C32707*C32067 ) *C32494 ) + (  ( C31819*C32643 ) *C32494 )  ) - (  (  ( C32707*C32643 ) *C32598 ) /2.0 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 1] += cc* (  (  ( cnst22*gz003111 ) - ( gz201111*cnst23 )  ) - ( cnst23*gz021111 )  ) ;
    double gz003201 =  (  ( C32494* ( C31486*C32098 )  ) + ( C32494* ( C31544*C32049 )  )  ) - (  ( C32598*cnst335 ) /2.0 ) ;
    double cnst3003 =  (  (  (  ( gz003201*cnst0 ) - ( gz003021*cnst0 )  ) -cnst1582 ) +cnst623 ) -cnst611;
    gz[(Ai + 3) * matrix_size + Bi + 5] += cc* ( cnst2529+cnst3003 ) ;
    double C32519 =  (  ( C31867*C32461 ) /C31444 ) + (  ( C32382+ ( 3*C32462 )  ) /C31461 ) ;
    double C32594 = C32585+ (  (  (  (  ( be*C32519 ) *2 ) -C32382 ) *ae ) /C31444 ) ;
    double C32607 =  (  ( C31867*C32594 ) /C31444 ) + (  (  ( C32533*2 ) + ( C32595*3 )  ) /C31461 ) ;
    double C32597 =  (  (  (  ( C32494*2 ) + ( 3*C32542 )  ) + (  ( C32519*ae ) *2 )  ) /C31461 ) + (  ( C31867*C32569 ) /C31444 ) ;
    double gz003003 =  (  ( C32597* ( C31544*C31486 )  ) + (  ( C31486*C31550 ) *C32597 )  ) - (  ( cnst39*cnst2981 ) /2.0 ) ;
    double cnst3020 =  (  (  ( gz003003- ( gz003201*1.5 )  ) - ( 1.5*gz003021 )  ) - ( gz201003*1.5 )  ) + ( 2.25*gz201201 ) ;
    double cnst3024 =  (  (  ( cnst3020+ ( gz201021*2.25 )  ) - ( gz021003*1.5 )  ) + ( gz021201*2.25 )  ) + ( 2.25*gz021021 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 3] += cc*cnst3024;
    double cnst3025 = C31486*C32519;
    double gx003102 =  ( C32594* ( C32040*C31486 )  ) + (  ( C32519* ( C31544*C32040 )  ) - (  ( cnst3025*C32044 ) /2.0 )  ) ;
    double gy003012 =  (  ( C31811*C31486 ) *C32594 ) + (  (  ( C31811*C31550 ) *C32519 ) - (  ( cnst3025*C31860 ) /2.0 )  ) ;
    double gy003102 =  (  (  ( C31478*C32067 ) *C32519 ) + (  (  ( C32519*C32643 ) *C33288 ) /2.0 )  ) + (  ( C31478*C32643 ) *C32594 ) ;
    double C32579 =  (  ( C32479+ ( 3*C32521 )  ) /C31461 ) + (  ( C31867*C32519 ) /C31444 ) ;
    double cnst3042 = C31486*C32579;
    double C32608 =  (  ( ae* (  (  ( be*C32579 ) *2 ) -C32479 )  ) /C31444 ) +C32607;
    double gx003003 =  (  (  ( cnst3042*C33308 ) /2.0 ) + (  ( C31464*C31544 ) *C32579 )  ) + ( C32608* ( C31464*C31486 )  ) ;
    double cnst3053 =  (  (  ( gx003003- ( 1.5*gx003201 )  ) - ( 1.5*gx003021 )  ) - ( 1.5*gx201003 )  ) + ( gx201201*2.25 ) ;
    double cnst3057 =  ( gx021021*2.25 ) + (  (  ( cnst3053+ ( gx201021*2.25 )  ) - ( 1.5*gx021003 )  ) + ( gx021201*2.25 )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 3] += cc*cnst3057;
    double gy003003 =  ( C32608* ( C31478*C31486 )  ) + (  (  ( cnst3042*C33288 ) /2.0 ) + (  ( C31478*C31550 ) *C32579 )  ) ;
    double cnst3062 =  ( 2.25*gy201201 ) + (  (  ( gy003003- ( gy003201*1.5 )  ) - ( 1.5*gy003021 )  ) - ( 1.5*gy201003 )  ) ;
    double cnst3066 =  ( gy021021*2.25 ) + (  (  (  ( 2.25*gy201021 ) +cnst3062 ) - ( 1.5*gy021003 )  ) + ( 2.25*gy021201 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 3] += cc*cnst3066;
    double gx003012 =  (  (  ( C33308* ( C32707*C32519 )  ) /2.0 ) + (  ( C31464*C31819 ) *C32519 )  ) + (  ( C32707*C31464 ) *C32594 ) ;
    double cnst3070 = C32382*2;
    double cnst3074 =  (  (  ( C32382*C31829 ) *C33308 ) /2.0 ) + (  ( C31858* ( cnst3070*C31445 )  ) /C31444 ) ;
    double gx003030 =  (  ( C31464*C31829 ) *C32398 ) +cnst3074;
    double gy003120 =  (  (  ( C32067*C31830 ) *C32382 ) - (  (  ( C32382*C32643 ) *C33457 ) /2.0 )  ) + ( C32398* ( C32643*C31830 )  ) ;
    double gy003210 =  (  ( C31811*C32049 ) *C32398 ) + (  ( C32382* ( C31811*C32098 )  ) - (  ( C31860* ( C32382*C32049 )  ) /2.0 )  ) ;
    double gx003120 =  (  ( C32040*C31810 ) *C32398 ) + (  ( C32382* ( C32040*C31849 )  ) - (  (  ( C32382*C31810 ) *C32044 ) /2.0 )  ) ;
    double gx003210 =  (  (  ( C31819*C32070 ) *C32382 ) - (  ( C33461* ( C32707*C32382 )  ) /2.0 )  ) + ( C32398* ( C32707*C32070 )  ) ;
    double C32079 =  ( C32018/C31490 ) + (  ( C31449*C32049 ) /C31444 ) ;
    double cnst3104 = C31486*C32079;
    double C32108 =  (  (  (  ( be*C32079 ) *2 ) - ( C32018/C31444 )  ) *ae ) + (  ( C31449*C32098 ) +C32067 ) ;
    double cnst3123 =  (  ( C33344* ( C31442*C32079 )  ) /2.0 ) + (  ( C32108* ( C31442*C32056 )  ) /C31444 ) ;
    double cnst3131 =  (  ( C32108* ( C31812*C32366 )  ) /C31444 ) + (  ( C33329* ( C32366*C32079 )  ) /2.0 ) ;
    double gy012300 =  ( C32391* ( C31812*C32079 )  ) +cnst3131;
    double gz003300 =  (  ( C33315*cnst3104 ) /2.0 ) + (  (  ( C32108*cnst450 ) /C31444 ) + ( C32387* ( C31544*C32079 )  )  ) ;
    double cnst3150 =  (  (  ( C32382*C32079 ) *C33288 ) /2.0 ) + (  (  ( cnst3070*C31458 ) *C32108 ) /C31444 ) ;
    double gy021300 =  ( C32375* ( C32056*C32079 )  ) +cnst3123;
    double cnst3155 =  (  (  ( cnst16*gy201300 ) + ( gy201120*cnst28 )  ) - ( gy021300*cnst16 )  ) - ( cnst28*gy021120 ) ;
    gy[(Ai + 5) * matrix_size + Bi + 6] += cc*cnst3155;
    double cnst3158 =  (  ( cnst21*gy201102 ) - (  ( gy201120*cnst14 ) + ( cnst14*gy201300 )  )  ) + ( gy021300*cnst14 ) ;
    gy[(Ai + 5) * matrix_size + Bi + 4] += cc* (  ( cnst3158+ ( cnst14*gy021120 )  ) - ( cnst21*gy021102 )  ) ;
    double gy030300 =  (  (  ( C32108*cnst1116 ) /C31444 ) + (  ( cnst3104*C33307 ) /2.0 )  ) + ( C31548* ( C32084*C32079 )  ) ;
    double gz012300 =  (  (  ( C32108* ( C32373*C31440 )  ) /C31444 ) + ( C32373* ( C32063*C32079 )  )  ) + (  ( C33353* ( C31440*C32079 )  ) /2.0 ) ;
    double gz030300 =  (  (  ( C32075*C32079 ) *C33523 ) /2.0 ) + (  (  (  ( C31479*C32075 ) *C32108 ) /C31444 ) + ( C31479* ( C32109*C32079 )  )  ) ;
    double gy003300 = cnst3150+ ( C32398* ( C31478*C32079 )  ) ;
    double gz021300 =  (  (  ( C32108* ( C33289*C32043 )  ) /C31444 ) + ( C33289* ( C32096*C32079 )  )  ) + (  (  ( C32043*C32079 ) *C33337 ) /2.0 ) ;
    double cnst3180 =  ( cnst14*gz021300 ) + (  ( gz201102*cnst21 ) - (  ( gz201120*cnst14 ) + ( cnst14*gz201300 )  )  ) ;
    gz[(Ai + 5) * matrix_size + Bi + 4] += cc* (  (  ( cnst14*gz021120 ) +cnst3180 ) - ( cnst21*gz021102 )  ) ;
    double cnst3185 =  (  (  ( gz201120*cnst28 ) + ( cnst16*gz201300 )  ) - ( cnst16*gz021300 )  ) - ( cnst28*gz021120 ) ;
    gz[(Ai + 5) * matrix_size + Bi + 6] += cc*cnst3185;
    double cnst3187 = std::sqrt( ( 18./8.0 ) );
    double cnst3237 = std::sqrt( ( 3.0/8.0 ) );
    double cnst3251 =  ( gz201030*cnst4 ) - (  ( gz003030*cnst3237 ) + (  ( cnst3237*gz003210 ) + ( gz003012*cnst31 )  )  ) ;
    double cnst3254 =  (  ( cnst3251+ ( cnst4*gz201210 )  ) + ( cnst2*gz201012 )  ) + ( cnst4*gz021030 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 2] += cc* (  (  ( cnst4*gz021210 ) +cnst3254 ) + ( cnst2*gz021012 )  ) ;
    double cnst3261 =  (  ( cnst4*gy030021 ) + (  ( gy030201*cnst4 ) - ( cnst3237*gy030003 )  )  ) - ( gy210003*cnst3237 ) ;
    double cnst3264 =  (  ( cnst4*gy210021 ) + ( cnst3261+ ( gy210201*cnst4 )  )  ) - ( cnst31*gy012003 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 3] += cc* (  ( cnst2*gy012021 ) + ( cnst3264+ ( cnst2*gy012201 )  )  ) ;
    double cnst3270 =  ( cnst4*gz201300 ) + (  ( gz003102*cnst31 ) - (  ( gz003120*cnst3237 ) + ( cnst3237*gz003300 )  )  ) ;
    double cnst3273 =  (  (  ( gz201120*cnst4 ) +cnst3270 ) - ( gz201102*cnst2 )  ) + ( cnst4*gz021300 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 4] += cc* (  ( cnst3273+ ( cnst4*gz021120 )  ) - ( cnst2*gz021102 )  ) ;
    double cnst3280 =  ( gy201030*cnst4 ) - (  ( gy003030*cnst3237 ) + (  ( gy003012*cnst31 ) + ( gy003210*cnst3237 )  )  ) ;
    double cnst3283 =  ( cnst4*gy021030 ) + (  (  ( cnst4*gy201210 ) +cnst3280 ) + ( cnst2*gy201012 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 2] += cc* (  ( cnst3283+ ( cnst4*gy021210 )  ) + ( cnst2*gy021012 )  ) ;
    double cnst3292 =  (  (  ( cnst4*gx030201 ) - ( cnst3237*gx030003 )  ) + ( cnst4*gx030021 )  ) - ( gx210003*cnst3237 ) ;
    double cnst3295 =  (  ( cnst4*gx210021 ) + (  ( gx210201*cnst4 ) +cnst3292 )  ) - ( gx012003*cnst31 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 3] +=  (  ( cnst2*gx012021 ) + ( cnst3295+ ( cnst2*gx012201 )  )  ) *cc;
    double cnst3301 =  (  (  ( gx300201*cnst4 ) - ( gx300003*cnst3237 )  ) + ( gx300021*cnst4 )  ) - ( cnst3237*gx120003 ) ;
    double cnst3304 =  (  ( cnst4*gx120021 ) + ( cnst3301+ ( cnst4*gx120201 )  )  ) + ( cnst31*gx102003 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 3] +=  (  ( cnst3304- ( cnst2*gx102201 )  ) - ( gx102021*cnst2 )  ) *cc;
    double cnst3313 =  (  ( cnst31*gy003102 ) - (  ( gy003120*cnst3237 ) + ( cnst3237*gy003300 )  )  ) + ( cnst4*gy201300 ) ;
    double cnst3316 =  ( gy021300*cnst4 ) + (  ( cnst3313+ ( gy201120*cnst4 )  ) - ( cnst2*gy201102 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 4] += cc* (  ( cnst3316+ ( cnst4*gy021120 )  ) - ( cnst2*gy021102 )  ) ;
    double cnst3320 =  (  (  ( gz300201*cnst4 ) - ( cnst3237*gz300003 )  ) + ( gz300021*cnst4 )  ) - ( cnst3237*gz120003 ) ;
    double cnst3323 =  (  ( cnst4*gz120021 ) + (  ( gz120201*cnst4 ) +cnst3320 )  ) + ( gz102003*cnst31 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 3] += cc* (  ( cnst3323- ( cnst2*gz102201 )  ) - ( cnst2*gz102021 )  ) ;
    double cnst3329 =  ( cnst4*gx201300 ) + (  ( gx003102*cnst31 ) - (  ( gx003120*cnst3237 ) + ( cnst3237*gx003300 )  )  ) ;
    double cnst3332 =  (  ( cnst3329+ ( cnst4*gx201120 )  ) - ( cnst2*gx201102 )  ) + ( cnst4*gx021300 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 4] += cc* (  ( cnst3332+ ( gx021120*cnst4 )  ) - ( cnst2*gx021102 )  ) ;
    double cnst3336 =  (  ( gy300021*cnst4 ) + (  ( cnst4*gy300201 ) - ( gy300003*cnst3237 )  )  ) - ( gy120003*cnst3237 ) ;
    double cnst3339 =  ( cnst31*gy102003 ) + (  ( cnst4*gy120021 ) + (  ( cnst4*gy120201 ) +cnst3336 )  ) ;
    gy[(Ai + 4) * matrix_size + Bi + 3] += cc* (  ( cnst3339- ( cnst2*gy102201 )  ) - ( cnst2*gy102021 )  ) ;
    double cnst3345 =  ( cnst4*gx201030 ) - (  ( gx003030*cnst3237 ) + (  ( gx003012*cnst31 ) + ( cnst3237*gx003210 )  )  ) ;
    double cnst3348 =  ( cnst4*gx021030 ) + (  ( cnst3345+ ( cnst4*gx201210 )  ) + ( cnst2*gx201012 )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 2] += cc* (  ( gx021012*cnst2 ) + (  ( cnst4*gx021210 ) +cnst3348 )  ) ;
    double cnst3352 =  (  (  ( cnst4*gz030201 ) - ( cnst3237*gz030003 )  ) + ( gz030021*cnst4 )  ) - ( cnst3237*gz210003 ) ;
    double cnst3355 =  (  (  ( cnst4*gz210201 ) +cnst3352 ) + ( cnst4*gz210021 )  ) - ( cnst31*gz012003 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 3] += cc* (  ( cnst2*gz012021 ) + (  ( cnst2*gz012201 ) +cnst3355 )  ) ;
    double cnst3359 = std::sqrt( ( 25./64. ) );
    double cnst3373 = std::sqrt( ( 135./64. ) );
    double cnst3378 = gz210120*cnst3373;
    double cnst3381 = cnst3373*gx120120;
    double cnst3383 = cnst3373*gy210120;
    double cnst3385 = cnst3373*gz120120;
    double cnst3387 = cnst3373*gx120210;
    double cnst3392 =  ( cnst18*gx300012 ) + (  ( cnst3373*gx120030 ) + ( cnst3387+ ( gx120012*cnst12 )  )  ) ;
    double cnst3394 = cnst3373*gy120120;
    double cnst3395 = cnst3373*gz210210;
    double cnst3397 = gx210120*cnst3373;
    double cnst3399 = cnst3373*gx210210;
    double cnst3406 = cnst3373*gy120210;
    double cnst3412 = cnst3373*gy210210;
    double cnst3413 = cnst3373*gz120210;
    double cnst3416 =  ( gz300012*cnst18 ) + (  (  ( gz120012*cnst12 ) +cnst3413 ) + ( cnst3373*gz120030 )  ) ;
    double cnst3420 =  ( cnst18*gy300012 ) + (  (  ( cnst12*gy120012 ) +cnst3406 ) + ( cnst3373*gy120030 )  ) ;
    double cnst3423 = std::sqrt( ( 9./64. ) );
    double cnst3447 =  ( cnst3423*gy210300 ) + (  (  ( cnst3423*gy030120 ) + ( cnst3423*gy030300 )  ) - ( gy030102*cnst3187 )  ) ;
    double cnst3451 =  ( cnst3423*gy210030 ) + (  ( cnst3187*gy030012 ) + (  ( cnst3423*gy030030 ) + ( cnst3423*gy030210 )  )  ) ;
    double cnst3454 =  (  ( gy210012*cnst3187 ) + ( cnst3451+ ( cnst3423*gy210210 )  )  ) + ( cnst3187*gy012030 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 2] += cc* (  ( cnst38*gy012012 ) + (  ( cnst3187*gy012210 ) +cnst3454 )  ) ;
    double cnst3463 =  (  (  ( gx300300*cnst3423 ) + ( cnst3423*gx300120 )  ) - ( cnst3187*gx300102 )  ) + ( cnst3423*gx120300 ) ;
    double cnst3466 =  (  ( cnst3463+ ( cnst3423*gx120120 )  ) - ( cnst3187*gx120102 )  ) - ( cnst3187*gx102300 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 4] += cc* (  ( cnst38*gx102102 ) + ( cnst3466- ( gx102120*cnst3187 )  )  ) ;
    double cnst3473 =  ( cnst3423*gz120300 ) + (  (  ( cnst3423*gz300120 ) + ( cnst3423*gz300300 )  ) - ( gz300102*cnst3187 )  ) ;
    double cnst3478 =  (  ( gz030012*cnst3187 ) + (  ( cnst3423*gz030030 ) + ( cnst3423*gz030210 )  )  ) + ( cnst3423*gz210030 ) ;
    double cnst3484 =  (  ( cnst3473+ ( cnst3423*gz120120 )  ) - ( gz120102*cnst3187 )  ) - ( cnst3187*gz102300 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 4] += cc* (  ( cnst3484- ( cnst3187*gz102120 )  ) + ( cnst38*gz102102 )  ) ;
    double cnst3492 =  (  ( cnst3478+ ( cnst3423*gz210210 )  ) + ( cnst3187*gz210012 )  ) + ( gz012030*cnst3187 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 2] += cc* (  ( cnst38*gz012012 ) + (  ( gz012210*cnst3187 ) +cnst3492 )  ) ;
    double cnst3496 =  ( cnst3423*gy120300 ) + (  (  ( cnst3423*gy300300 ) + ( cnst3423*gy300120 )  ) - ( gy300102*cnst3187 )  ) ;
    double cnst3499 =  (  (  ( cnst3423*gy120120 ) +cnst3496 ) - ( gy120102*cnst3187 )  ) - ( cnst3187*gy102300 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 4] += cc* (  ( cnst3499- ( cnst3187*gy102120 )  ) + ( gy102102*cnst38 )  ) ;
    double cnst3508 =  ( cnst3423*gx210030 ) + (  (  ( cnst3423*gx030210 ) + ( cnst3423*gx030030 )  ) + ( cnst3187*gx030012 )  ) ;
    double cnst3511 =  ( cnst3187*gx012030 ) + (  (  ( cnst3423*gx210210 ) +cnst3508 ) + ( gx210012*cnst3187 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 2] += cc* (  (  ( cnst3187*gx012210 ) +cnst3511 ) + ( gx012012*cnst38 )  ) ;
    double cnst3517 =  ( cnst3187*gy012300 ) + (  (  ( cnst3423*gy210120 ) +cnst3447 ) - ( gy210102*cnst3187 )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 4] += cc* (  ( cnst3517+ ( gy012120*cnst3187 )  ) - ( cnst38*gy012102 )  ) ;
    double cnst3523 =  ( cnst3423*gx210300 ) + (  (  ( cnst3423*gx030120 ) + ( cnst3423*gx030300 )  ) - ( cnst3187*gx030102 )  ) ;
    double cnst3526 =  ( gx012300*cnst3187 ) + (  (  ( cnst3423*gx210120 ) +cnst3523 ) - ( cnst3187*gx210102 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 4] += cc* (  (  ( gx012120*cnst3187 ) +cnst3526 ) - ( gx012102*cnst38 )  ) ;
    double cnst3533 =  ( cnst3423*gx120030 ) + (  (  ( gx300030*cnst3423 ) + ( cnst3423*gx300210 )  ) + ( cnst3187*gx300012 )  ) ;
    double cnst3536 =  (  ( gx120012*cnst3187 ) + ( cnst3533+ ( cnst3423*gx120210 )  )  ) - ( gx102030*cnst3187 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 2] += cc* (  ( cnst3536- ( cnst3187*gx102210 )  ) - ( cnst38*gx102012 )  ) ;
    double cnst3542 =  (  (  ( cnst3423*gz300210 ) + ( cnst3423*gz300030 )  ) + ( gz300012*cnst3187 )  ) + ( cnst3423*gz120030 ) ;
    double cnst3545 =  (  (  ( cnst3423*gz120210 ) +cnst3542 ) + ( gz120012*cnst3187 )  ) - ( gz102030*cnst3187 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 2] += cc* (  ( cnst3545- ( cnst3187*gz102210 )  ) - ( gz102012*cnst38 )  ) ;
    double cnst3551 =  (  ( cnst3187*gy300012 ) + (  ( cnst3423*gy300030 ) + ( cnst3423*gy300210 )  )  ) + ( cnst3423*gy120030 ) ;
    double cnst3555 =  (  ( cnst3187*gy120012 ) + (  ( cnst3423*gy120210 ) +cnst3551 )  ) - ( gy102030*cnst3187 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 2] += cc* (  ( cnst3555- ( cnst3187*gy102210 )  ) - ( cnst38*gy102012 )  ) ;
    double cnst3561 =  ( cnst3423*gz210300 ) + (  (  ( cnst3423*gz030300 ) + ( cnst3423*gz030120 )  ) - ( gz030102*cnst3187 )  ) ;
    double cnst3565 =  ( cnst3187*gz012300 ) + (  (  ( cnst3423*gz210120 ) +cnst3561 ) - ( cnst3187*gz210102 )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 4] += cc* (  ( cnst3565+ ( cnst3187*gz012120 )  ) - ( cnst38*gz012102 )  ) ;
    double cnst3569 = std::sqrt( ( 2025./64. ) );
    double cnst3583 = std::sqrt( ( 15./64. ) );
    double cnst3589 =  ( cnst3378+ (  ( gz012120*cnst12 ) + ( gz012300*cnst18 )  )  ) + ( cnst3583*gz210300 ) ;
    double cnst3593 = gz030300*cnst3583;
    gz[(Ai + 2) * matrix_size + Bi + 6] += - ( cc* ( cnst3593+ (  ( cnst3373*gz030120 ) +cnst3589 )  )  ) ;
    double cnst3598 =  (  ( cnst3593+ ( cnst3583*gz030120 )  ) - ( gz030102*cnst18 )  ) - ( cnst3373*gz210300 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 4] += cc* (  ( cnst12*gz210102 ) + ( cnst3598-cnst3378 )  ) ;
    double cnst3601 = cnst3583*gx030300;
    double cnst3604 =  (  ( cnst3601+ ( cnst3583*gx030120 )  ) - ( gx030102*cnst18 )  ) - ( cnst3373*gx210300 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 4] += cc* (  ( cnst12*gx210102 ) + ( cnst3604-cnst3397 )  ) ;
    double cnst3609 = cnst3583*gz300030;
    double cnst3613 =  (  (  ( cnst3609- ( cnst3373*gz300210 )  ) + ( cnst3583*gz120030 )  ) -cnst3413 ) - ( gz102030*cnst18 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 0] += cc* (  ( cnst12*gz102210 ) +cnst3613 ) ;
    double cnst3615 = gy030030*cnst3583;
    double cnst3617 = gx300300*cnst3583;
    double cnst3620 =  (  ( gx300102*cnst18 ) - (  ( gx300120*cnst3583 ) +cnst3617 )  ) - ( cnst3373*gx120300 ) ;
    gx[(Ai + 6) * matrix_size + Bi + 4] += cc* (  ( cnst3620-cnst3381 ) + ( cnst12*gx120102 )  ) ;
    double cnst3623 = cnst3583*gz300300;
    double cnst3626 =  (  ( gz300102*cnst18 ) - ( cnst3623+ ( cnst3583*gz300120 )  )  ) - ( cnst3373*gz120300 ) ;
    gz[(Ai + 6) * matrix_size + Bi + 4] += cc* (  ( cnst3626-cnst3385 ) + ( gz120102*cnst12 )  ) ;
    double cnst3629 = cnst3583*gy300030;
    double cnst3634 =  ( gy012030*cnst18 ) + (  (  ( cnst3583*gy210030 ) + ( cnst3615- ( cnst3373*gy030210 )  )  ) -cnst3412 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 0] += cc* ( cnst3634- ( cnst12*gy012210 )  ) ;
    gz[(Ai + 6) * matrix_size + Bi + 2] += - ( cc* ( cnst3609+ (  ( gz300210*cnst3583 ) +cnst3416 )  )  ) ;
    double cnst3640 = gy300300*cnst3583;
    double cnst3641 = gx300030*cnst3583;
    double cnst3645 =  (  (  ( gy012120*cnst12 ) + ( cnst18*gy012300 )  ) +cnst3383 ) + ( cnst3583*gy210300 ) ;
    double cnst3647 = gz030030*cnst3583;
    double cnst3651 =  ( gz012030*cnst18 ) + (  (  ( cnst3647- ( cnst3373*gz030210 )  ) + ( gz210030*cnst3583 )  ) -cnst3395 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 0] += cc* ( cnst3651- ( gz012210*cnst12 )  ) ;
    double cnst3655 =  (  ( cnst3647+ ( cnst3583*gz030210 )  ) + ( gz030012*cnst18 )  ) - ( cnst3373*gz210030 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 2] +=  (  ( cnst3655-cnst3395 ) - ( cnst12*gz210012 )  ) *cc;
    double cnst3662 =  (  (  ( cnst3583*gx120030 ) + ( cnst3641- ( cnst3373*gx300210 )  )  ) -cnst3387 ) - ( gx102030*cnst18 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 0] += cc* (  ( cnst12*gx102210 ) +cnst3662 ) ;
    double cnst3667 =  (  (  ( cnst3583*gy120030 ) + ( cnst3629- ( cnst3373*gy300210 )  )  ) -cnst3406 ) - ( gy102030*cnst18 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 0] += cc* (  ( gy102210*cnst12 ) +cnst3667 ) ;
    double cnst3673 =  ( gy102300*cnst18 ) - (  (  ( cnst3394+ ( cnst3583*gy120300 )  ) + ( cnst3373*gy300120 )  ) +cnst3640 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 6] += cc* ( cnst3673+ ( gy102120*cnst12 )  ) ;
    double cnst3678 =  (  ( gy300102*cnst18 ) - (  ( cnst3583*gy300120 ) +cnst3640 )  ) - ( cnst3373*gy120300 ) ;
    gy[(Ai + 6) * matrix_size + Bi + 4] += cc* (  ( gy120102*cnst12 ) + ( cnst3678-cnst3394 )  ) ;
    double cnst3681 = cnst3583*gy030300;
    double cnst3684 =  (  (  ( gy030120*cnst3583 ) +cnst3681 ) - ( gy030102*cnst18 )  ) - ( cnst3373*gy210300 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 4] += cc* (  ( cnst3684-cnst3383 ) + ( gy210102*cnst12 )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 6] += - ( cc* (  (  ( cnst3373*gy030120 ) +cnst3645 ) +cnst3681 )  ) ;
    double cnst3692 =  (  ( cnst3615+ ( gy030210*cnst3583 )  ) + ( gy030012*cnst18 )  ) - ( cnst3373*gy210030 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 2] +=  (  ( cnst3692-cnst3412 ) - ( gy210012*cnst12 )  ) *cc;
    gy[(Ai + 6) * matrix_size + Bi + 2] += - ( cc* ( cnst3629+ (  ( gy300210*cnst3583 ) +cnst3420 )  )  ) ;
    double cnst3703 =  ( cnst18*gx102300 ) - (  (  ( gx300120*cnst3373 ) + ( cnst3381+ ( gx120300*cnst3583 )  )  ) +cnst3617 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 6] += cc* ( cnst3703+ ( gx102120*cnst12 )  ) ;
    double cnst3706 =  ( cnst3583*gx210300 ) + (  (  ( gx012120*cnst12 ) + ( gx012300*cnst18 )  ) +cnst3397 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 6] += - ( cc* ( cnst3601+ (  ( cnst3373*gx030120 ) +cnst3706 )  )  ) ;
    gx[(Ai + 6) * matrix_size + Bi + 2] += - ( cc* (  ( cnst3392+ ( cnst3583*gx300210 )  ) +cnst3641 )  ) ;
    double cnst3714 = gx030030*cnst3583;
    double cnst3718 =  (  (  ( cnst3583*gx210030 ) + ( cnst3714- ( gx030210*cnst3373 )  )  ) -cnst3399 ) + ( cnst18*gx012030 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 0] += cc* ( cnst3718- ( gx012210*cnst12 )  ) ;
    double cnst3722 =  (  ( cnst18*gx030012 ) + (  ( gx030210*cnst3583 ) +cnst3714 )  ) - ( cnst3373*gx210030 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 2] += cc* (  ( cnst3722-cnst3399 ) - ( gx210012*cnst12 )  ) ;
    double cnst3729 =  ( cnst18*gz102300 ) - (  (  (  ( cnst3583*gz120300 ) +cnst3385 ) + ( cnst3373*gz300120 )  ) +cnst3623 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 6] += cc* (  ( gz102120*cnst12 ) +cnst3729 ) ;
    double cnst3732 = std::sqrt( ( 225./64. ) );
    double cnst3737 =  ( cnst3569*gy120120 ) + (  ( cnst3732*gy120300 ) + (  ( cnst3359*gy300300 ) + ( cnst3732*gy300120 )  )  ) ;
    gy[(Ai + 6) * matrix_size + Bi + 6] += cnst3737*cc;
    double cnst3751 =  (  ( gy210300*cnst3732 ) - (  ( gy030120*cnst3732 ) + ( cnst3359*gy030300 )  )  ) + ( gy210120*cnst3569 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 6] += cc*cnst3751;
    double cnst3755 =  ( gz210120*cnst3569 ) + (  ( cnst3732*gz210300 ) - (  ( cnst3732*gz030120 ) + ( gz030300*cnst3359 )  )  ) ;
    gz[(Ai + 0) * matrix_size + Bi + 6] += cc*cnst3755;
    double cnst3759 =  (  (  ( cnst3732*gx300210 ) - ( gx300030*cnst3359 )  ) - ( cnst3732*gx120030 )  ) + ( cnst3569*gx120210 ) ;
    gx[(Ai + 6) * matrix_size + Bi + 0] += cc*cnst3759;
    double cnst3768 =  (  (  ( gz300210*cnst3732 ) - ( cnst3359*gz300030 )  ) - ( gz120030*cnst3732 )  ) + ( cnst3569*gz120210 ) ;
    gz[(Ai + 6) * matrix_size + Bi + 0] += cc*cnst3768;
    double cnst3772 =  ( cnst3569*gz120120 ) + (  (  ( cnst3359*gz300300 ) + ( cnst3732*gz300120 )  ) + ( cnst3732*gz120300 )  ) ;
    gz[(Ai + 6) * matrix_size + Bi + 6] += cc*cnst3772;
    double cnst3775 =  (  ( cnst3732*gx210300 ) - (  ( cnst3732*gx030120 ) + ( cnst3359*gx030300 )  )  ) + ( gx210120*cnst3569 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 6] += cc*cnst3775;
    double cnst3779 =  ( cnst3569*gx210210 ) + (  (  ( gx030030*cnst3359 ) - ( gx030210*cnst3732 )  ) - ( cnst3732*gx210030 )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 0] += cc*cnst3779;
    double cnst3782 =  (  (  ( gz030030*cnst3359 ) - ( gz030210*cnst3732 )  ) - ( gz210030*cnst3732 )  ) + ( gz210210*cnst3569 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 0] += cc*cnst3782;
    double cnst3785 =  (  (  ( gy300210*cnst3732 ) - ( cnst3359*gy300030 )  ) - ( cnst3732*gy120030 )  ) + ( cnst3569*gy120210 ) ;
    gy[(Ai + 6) * matrix_size + Bi + 0] += cnst3785*cc;
    double cnst3788 =  ( cnst3569*gx120120 ) + (  (  ( gx300120*cnst3732 ) + ( gx300300*cnst3359 )  ) + ( gx120300*cnst3732 )  ) ;
    gx[(Ai + 6) * matrix_size + Bi + 6] += cc*cnst3788;
    double cnst3792 =  ( cnst3569*gy210210 ) + (  (  ( gy030030*cnst3359 ) - ( gy030210*cnst3732 )  ) - ( cnst3732*gy210030 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 0] += cc*cnst3792;
    double cnst3794 = std::sqrt( ( 11.25/8.0 ) );
    double cnst3804 =  (  (  ( cnst30*gy003300 ) + ( gy003120*cnst6 )  ) - ( cnst3794*gy201300 )  ) - ( gy201120*cnst8 ) ;
    double cnst3809 =  (  (  ( cnst20*gz003210 ) - ( gz003030*cnst30 )  ) + ( gz201030*cnst3794 )  ) - ( cnst8*gz201210 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 0] += cc* (  ( cnst3809+ ( cnst3794*gz021030 )  ) - ( cnst8*gz021210 )  ) ;
    double cnst3814 =  (  (  ( cnst30*gx003300 ) + ( gx003120*cnst6 )  ) - ( cnst3794*gx201300 )  ) - ( cnst8*gx201120 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 6] += cc* (  ( cnst3814- ( gx021300*cnst3794 )  ) - ( cnst8*gx021120 )  ) ;
    double cnst3820 =  (  (  ( gz003120*cnst6 ) + ( cnst30*gz003300 )  ) - ( cnst3794*gz201300 )  ) - ( gz201120*cnst8 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 6] += cc* (  ( cnst3820- ( cnst3794*gz021300 )  ) - ( cnst8*gz021120 )  ) ;
    double cnst3825 =  (  (  ( cnst20*gy003210 ) - ( gy003030*cnst30 )  ) + ( gy201030*cnst3794 )  ) - ( cnst8*gy201210 ) ;
    double cnst3829 =  (  (  ( cnst30*gz300003 ) - ( gz300201*cnst3794 )  ) - ( gz300021*cnst3794 )  ) + ( cnst6*gz120003 ) ;
    gz[(Ai + 6) * matrix_size + Bi + 3] += cc* (  ( cnst3829- ( cnst8*gz120201 )  ) - ( cnst8*gz120021 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 0] += cc* (  ( cnst3825+ ( cnst3794*gy021030 )  ) - ( cnst8*gy021210 )  ) ;
    double cnst3837 =  (  ( gx201030*cnst3794 ) + (  ( cnst20*gx003210 ) - ( gx003030*cnst30 )  )  ) - ( cnst8*gx201210 ) ;
    gy[(Ai + 3) * matrix_size + Bi + 6] += cc* (  ( cnst3804- ( gy021300*cnst3794 )  ) - ( cnst8*gy021120 )  ) ;
    double cnst3845 =  (  ( cnst3794*gy030021 ) + (  ( gy030201*cnst3794 ) - ( cnst30*gy030003 )  )  ) + ( cnst20*gy210003 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 3] +=  (  ( cnst3845- ( gy210201*cnst8 )  ) - ( cnst8*gy210021 )  ) *cc;
    double cnst3850 =  ( cnst20*gz210003 ) + (  ( gz030021*cnst3794 ) + (  ( cnst3794*gz030201 ) - ( cnst30*gz030003 )  )  ) ;
    gz[(Ai + 0) * matrix_size + Bi + 3] += cc* (  ( cnst3850- ( cnst8*gz210201 )  ) - ( cnst8*gz210021 )  ) ;
    double cnst3856 =  (  (  ( gx300003*cnst30 ) - ( gx300201*cnst3794 )  ) - ( gx300021*cnst3794 )  ) + ( cnst6*gx120003 ) ;
    gx[(Ai + 6) * matrix_size + Bi + 3] += cc* (  ( cnst3856- ( cnst8*gx120201 )  ) - ( cnst8*gx120021 )  ) ;
    double cnst3861 =  (  (  ( gx030201*cnst3794 ) - ( cnst30*gx030003 )  ) + ( cnst3794*gx030021 )  ) + ( cnst20*gx210003 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 3] += cc* (  ( cnst3861- ( gx210201*cnst8 )  ) - ( cnst8*gx210021 )  ) ;
    double cnst3867 =  (  (  ( gy300003*cnst30 ) - ( cnst3794*gy300201 )  ) - ( gy300021*cnst3794 )  ) + ( gy120003*cnst6 ) ;
    gy[(Ai + 6) * matrix_size + Bi + 3] += cc* (  ( cnst3867- ( cnst8*gy120201 )  ) - ( cnst8*gy120021 )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 0] += cc* (  (  ( gx021030*cnst3794 ) +cnst3837 ) - ( cnst8*gx021210 )  ) ;
}
