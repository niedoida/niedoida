/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d1_kit/gto_d1.hpp"
#include <cmath>

namespace {
    static const double Pi = M_PI;
}

void kinetic_gradient_12(
double ae , 
double be , 
double cc , 
double xAB , 
double yAB , 
double zAB , 
double* const gx , 
double* const gy , 
double* const gz , 
std::size_t matrix_size , 
std::size_t Ai , 
std::size_t Bi ) 
{
    double C2226 = xAB*ae;
    double C2419 = ae*zAB;
    double C2359 = yAB*ae;
    double C2229 = std::pow(ae , 2);
    double cnst0 = std::sqrt(0.75);
    double cnst2 = 6*ae;
    double cnst3 = cc* ( std::sqrt(3.0) ) ;
    double C2230 = be*yAB;
    double C2223 = be+ae;
    double C2256 = std::sqrt( ( Pi/C2223 ) );
    double cnst4 = C2256*C2256;
    double C2427 = C2419*C2256;
    double C2598 = C2427/C2223;
    double cnst5 = C2598*C2256;
    double C2444 =  ( be*C2427 ) *2;
    double C2367 = C2256*C2359;
    double C2384 =  ( C2367*be ) *2;
    double C2521 = C2367/C2223;
    double cnst7 = C2521*C2256;
    double C2487 = C2230*C2256;
    double C2522 = C2487/C2223;
    double C2219 = -C2522;
    double C2232 = C2219*ae;
    double C2247 = C2232*2;
    double cnst11 = C2256*C2219;
    double C2269 = C2226*C2256;
    double C2290 =  ( be*C2269 ) *2;
    double C2279 = C2269/C2223;
    double cnst12 = C2279*C2256;
    double C2235 = 2.*C2223;
    double C2255 = 1/C2235;
    double C2305 =  ( ae- (  ( C2229* (  ( std::pow( ( C2230/C2223 )  , 2) ) +C2255 )  ) *2 )  ) *C2256;
    double C2360 = C2305/C2235;
    double C2268 = C2256/C2235;
    double C2439 =  (  ( C2256*ae ) *2. ) /C2235;
    double C2392 =  (  (  ( C2232*C2359 ) *2 ) /C2223 ) +C2439;
    double C2404 =  (  ( C2359*C2392 ) /C2223 ) + (  (  (  ( C2521*ae ) *2 ) +C2247 ) /C2235 ) ;
    double C2449 =  ( - (  ( be*C2256 ) *2 )  ) /C2235;
    double C2393 = C2449- (  (  ( C2230*C2232 ) *2 ) /C2223 ) ;
    double C2541 =  (  ( C2232*4. ) /C2235 ) + (  ( C2393*C2359 ) /C2223 ) ;
    double C2397 = C2393*ae;
    double C2527 = C2397*2;
    double C2553 =  ( - (  ( be*C2527 ) *6 )  ) /C2235;
    double C2411 =  (  ( - (  ( be*C2247 ) *4 )  ) /C2235 ) - (  (  ( C2230*C2397 ) *2 ) /C2223 ) ;
    double C2413 = C2411*ae;
    double C2769 =  (  (  ( C2413*C2359 ) *2 ) /C2223 ) + (  (  ( C2527*ae ) *6. ) /C2235 ) ;
    double C2544 =  (  ( C2230*C2413 ) *2 ) /C2223;
    double C2724 = C2544-C2553;
    double C2557 = C2553-C2544;
    double cnst34 =  ( cnst2* (  (  ( C2527+ ( C2397*4 )  ) /C2235 ) + (  ( C2411*C2359 ) /C2223 )  )  ) + ( C2557+C2769 ) ;
    double C2713 = C2413*2;
    double C2708 = -C2713;
    double C2774 =  (  (  ( 6*C2413 ) +C2713 ) /C2235 ) + (  ( C2557*C2359 ) /C2223 ) ;
    double C2778 = ae* (  (  (  ( C2397*C2359 ) *2 ) /C2223 ) + (  (  ( C2247*ae ) *4. ) /C2235 )  ) ;
    double C2798 =  (  ( C2769*C2359 ) /C2223 ) + (  ( C2713+ ( C2778*6 )  ) /C2235 ) ;
    double C2245 = std::pow(C2223 , 2);
    double C2391 = C2268+ (  ( C2256* ( std::pow(C2359 , 2) )  ) /C2245 ) ;
    double cnst47 = C2256*C2391;
    double C2398 =  (  ( C2384*ae ) /C2245 ) + (  ( C2305*C2359 ) /C2223 ) ;
    double C2412 =  ( C2360+ (  ( C2398*C2359 ) /C2223 )  ) + (  (  (  (  ( be*C2391 ) *2 ) -C2256 ) *ae ) /C2223 ) ;
    double C2539 = C2268- (  ( C2487*C2359 ) /C2245 ) ;
    double cnst51 = C2539*C2256;
    double C2556 =  (  ( C2359*C2541 ) /C2223 ) + (  (  ( C2393+C2392 ) + (  ( C2539*ae ) *2 )  ) /C2235 ) ;
    double C2555 =  (  ( C2521-C2522 ) /C2235 ) + (  ( C2539*C2359 ) /C2223 ) ;
    double cnst53 = C2555*C2256;
    double C2451 = C2268+ (  (  ( std::pow(C2419 , 2) ) *C2256 ) /C2245 ) ;
    double cnst56 = C2256*C2451;
    double C2503 = C2268+ (  (  ( std::pow(C2226 , 2) ) *C2256 ) /C2245 ) ;
    double cnst62 = C2256*C2503;
    double C2507 =  (  ( be* ( -C2384 )  ) /C2245 ) - (  ( C2230*C2305 ) /C2223 ) ;
    double C2560 =  ( C2360+ (  ( C2507*C2359 ) /C2223 )  ) + (  ( 2* (  ( C2539*be ) *ae )  ) /C2223 ) ;
    double C2568 =  (  (  (  (  ( C2555*be ) *2 ) +C2522 ) *ae ) /C2223 ) + (  (  ( C2560*C2359 ) /C2223 ) + (  ( C2507+C2398 ) /C2235 )  ) ;
    double C2225 = xAB*be;
    double C2310 = C2256* ( ae- (  (  (  ( std::pow( ( C2225/C2223 )  , 2) ) +C2255 ) *C2229 ) *2 )  ) ;
    double cnst78 =  ( C2256* ( C2310*C2556 )  ) - (  (  (  ( cnst34/C2235 ) + (  ( C2359*C2774 ) /C2223 )  ) *cnst4 ) /2.0 ) ;
    double C2318 = C2310/C2235;
    double C2332 =  (  (  ( -C2290 ) *be ) /C2245 ) - (  ( C2225*C2310 ) /C2223 ) ;
    double C2334 =  (  ( C2290*ae ) /C2245 ) + (  ( C2226*C2310 ) /C2223 ) ;
    double C2512 =  ( C2318+ (  ( C2226*C2334 ) /C2223 )  ) + (  (  (  (  ( be*C2503 ) *2 ) -C2256 ) *ae ) /C2223 ) ;
    double C2300 = C2268- (  ( C2225*C2269 ) /C2245 ) ;
    double C2348 =  ( C2318+ (  ( C2226*C2332 ) /C2223 )  ) + (  (  (  ( be*C2300 ) *ae ) *2 ) /C2223 ) ;
    double cnst130 = C2300*C2256;
    double C2280 =  ( C2225*C2256 ) /C2223;
    double C2328 =  (  ( C2279-C2280 ) /C2235 ) + (  ( C2226*C2300 ) /C2223 ) ;
    double C2353 =  (  (  (  (  ( be*C2328 ) *2 ) +C2280 ) *ae ) /C2223 ) + (  (  ( C2226*C2348 ) /C2223 ) + (  ( C2332+C2334 ) /C2235 )  ) ;
    double cnst140 = C2328*C2256;
    double C2215 = -C2280;
    double cnst149 = C2215*C2256;
    double C2224 = C2215*ae;
    double C2243 = C2224*2;
    double C2270 = C2449- (  (  ( C2225*C2224 ) *2 ) /C2223 ) ;
    double C2303 =  (  ( 4.*C2224 ) /C2235 ) + (  ( C2226*C2270 ) /C2223 ) ;
    double C2284 = C2270*ae;
    double C2324 =  (  ( - ( 4* ( be*C2243 )  )  ) /C2235 ) - (  (  ( C2225*C2284 ) *2 ) /C2223 ) ;
    double C2331 = C2324*ae;
    double C2704 = C2331*2;
    double C2725 = -C2704;
    double C2344 =  (  ( C2225*C2331 ) *2 ) /C2223;
    double C2295 = C2284*2;
    double C2767 =  (  ( 2* ( C2226*C2331 )  ) /C2223 ) + (  (  ( C2295*ae ) *6. ) /C2235 ) ;
    double C2330 =  ( - (  ( C2295*be ) *6 )  ) /C2235;
    double C2347 = C2330-C2344;
    double C2766 =  (  ( C2226*C2347 ) /C2223 ) + (  (  ( 6*C2331 ) +C2704 ) /C2235 ) ;
    double cnst216 =  ( C2767+C2347 ) + ( cnst2* (  (  ( C2226*C2324 ) /C2223 ) + (  ( C2295+ ( C2284*4 )  ) /C2235 )  )  ) ;
    double cnst219 =  ( std::pow(C2256 , 2) ) * (  (  ( C2766*C2226 ) /C2223 ) + ( cnst216/C2235 )  ) ;
    double C2710 = C2344-C2330;
    double C2782 =  (  (  (  ( ae*C2243 ) *4. ) /C2235 ) + (  (  ( C2226*C2284 ) *2 ) /C2223 )  ) *ae;
    double C2800 =  (  (  ( C2782*6 ) +C2704 ) /C2235 ) + (  ( C2226*C2767 ) /C2223 ) ;
    double C2271 = C2439+ (  (  ( C2226*C2224 ) *2 ) /C2223 ) ;
    double C2504 =  (  ( C2226*C2271 ) /C2223 ) + (  (  (  ( C2279*ae ) *2 ) +C2243 ) /C2235 ) ;
    double C2329 =  (  (  ( C2270+C2271 ) + (  ( C2300*ae ) *2 )  ) /C2235 ) + (  ( C2226*C2303 ) /C2223 ) ;
    double C2231 = be*zAB;
    double C2308 =  ( ae- (  (  (  ( std::pow( ( C2231/C2223 )  , 2) ) +C2255 ) *C2229 ) *2 )  ) *C2256;
    double gy100110 =  (  (  ( C2348*C2392 ) *C2256 ) - (  ( cnst130*C2769 ) /2.0 )  ) + (  ( C2300*C2392 ) *C2308 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 0] += gy100110*cnst3;
    double gx100200 =  (  (  ( C2305*C2329 ) *C2256 ) - ( cnst219/2.0 )  ) + ( C2308* ( C2256*C2329 )  ) ;
    double gy010020 = cnst78+ ( C2308* ( C2256*C2556 )  ) ;
    double gx010020 =  (  (  ( C2568*C2243 ) *C2256 ) + (  ( cnst53*C2725 ) /2.0 )  ) + (  ( C2555*C2243 ) *C2308 ) ;
    double gx010200 =  (  (  ( C2507*C2504 ) *C2256 ) - (  ( cnst11*C2800 ) /2.0 )  ) + (  ( C2219*C2504 ) *C2308 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 4] += cc* (  ( gx010200*cnst0 ) - ( cnst0*gx010020 )  ) ;
    double gy100200 =  (  ( C2328*C2247 ) *C2308 ) + (  (  ( cnst140*C2708 ) /2.0 ) + ( C2256* ( C2247*C2353 )  )  ) ;
    double gx100110 =  ( C2308* ( C2521*C2303 )  ) + (  ( C2256* ( C2398*C2303 )  ) - (  ( C2766*cnst7 ) /2.0 )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 0] += gx100110*cnst3;
    double gy100020 =  ( C2308* ( C2215*C2404 )  ) + (  ( C2256* ( C2404*C2332 )  ) - (  ( C2798*cnst149 ) /2.0 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 4] +=  (  ( gy100200*cnst0 ) - ( gy100020*cnst0 )  ) *cc;
    double gy010110 =  (  ( C2256* ( C2334*C2541 )  ) - (  ( cnst12*C2774 ) /2.0 )  ) + (  ( C2279*C2541 ) *C2308 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 0] += gy010110*cnst3;
    double C2587 =  (  (  ( -C2444 ) *be ) /C2245 ) - (  ( C2231*C2308 ) /C2223 ) ;
    double gx100020 =  ( C2308* ( C2270*C2391 )  ) + (  (  ( cnst47*C2710 ) /2.0 ) + ( C2256* ( C2270*C2412 )  )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 4] += cc* (  ( cnst0*gx100200 ) - ( gx100020*cnst0 )  ) ;
    double C2458 =  (  ( C2419*C2308 ) /C2223 ) + (  ( C2444*ae ) /C2245 ) ;
    double gy100011 =  (  ( C2598* ( C2332*C2392 )  ) - (  ( C2769* ( C2598*C2215 )  ) /2.0 )  ) + ( C2458* ( C2215*C2392 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 1] += gy100011*cnst3;
    double gx010011 =  (  ( C2539*C2243 ) *C2458 ) + (  (  (  ( C2598*C2539 ) *C2725 ) /2.0 ) + ( C2598* ( C2560*C2243 )  )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 1] += cnst3*gx010011;
    double gx100011 =  (  ( C2270*C2521 ) *C2458 ) + (  ( C2598* ( C2270*C2398 )  ) + (  (  ( C2598*C2521 ) *C2710 ) /2.0 )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 1] += gx100011*cnst3;
    double gy100101 =  (  (  ( C2708* ( C2598*C2300 )  ) /2.0 ) + ( C2598* ( C2247*C2348 )  )  ) + (  ( C2300*C2247 ) *C2458 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 3] += gy100101*cnst3;
    double gy010101 =  (  (  ( C2724* ( C2598*C2279 )  ) /2.0 ) + ( C2598* ( C2393*C2334 )  )  ) + (  ( C2279*C2393 ) *C2458 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 3] += gy010101*cnst3;
    double gx100101 =  (  ( C2598* ( C2305*C2303 )  ) - (  ( C2766*cnst5 ) /2.0 )  ) + (  ( C2256*C2303 ) *C2458 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 3] += gx100101*cnst3;
    double gx010101 =  ( C2458* ( C2271*C2219 )  ) + (  ( C2598* ( C2507*C2271 )  ) - (  ( C2767* ( C2598*C2219 )  ) /2.0 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 3] += gx010101*cnst3;
    double gy010011 =  ( C2458* ( C2256*C2541 )  ) + (  ( C2598* ( C2310*C2541 )  ) - (  ( C2774*cnst5 ) /2.0 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 1] += gy010011*cnst3;
    double C2420 = C2308/C2235;
    double C2472 =  ( C2420+ (  ( C2419*C2458 ) /C2223 )  ) + (  (  (  (  ( be*C2451 ) *2 ) -C2256 ) *ae ) /C2223 ) ;
    double cnst294 =  ( C2219*C2243 ) *C2472;
    double gx010002 =  (  (  (  ( C2451*C2219 ) *C2725 ) /2.0 ) + (  ( C2507*C2243 ) *C2451 )  ) +cnst294;
    double gy100002 =  (  (  ( C2332*C2247 ) *C2451 ) + (  (  ( C2215*C2451 ) *C2708 ) /2.0 )  ) +cnst294;
    double gy010002 =  (  (  ( C2724*cnst56 ) /2.0 ) + (  ( C2310*C2393 ) *C2451 )  ) + ( C2472* ( C2393*C2256 )  ) ;
    double gx100002 =  (  ( C2270*C2256 ) *C2472 ) + (  (  ( C2710*cnst56 ) /2.0 ) + (  ( C2270*C2305 ) *C2451 )  ) ;
    double gy010200 =  ( C2308* ( C2393*C2503 )  ) + (  (  ( C2724*cnst62 ) /2.0 ) + (  ( C2393*C2512 ) *C2256 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 4] += cc* (  ( gy010200*cnst0 ) - ( cnst0*gy010020 )  ) ;
    double gx010110 =  (  ( C2539*C2271 ) *C2308 ) + (  (  ( C2560*C2271 ) *C2256 ) - (  ( cnst51*C2767 ) /2.0 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 0] += gx010110*cnst3;
    double C2580 = C2231*C2256;
    double C2616 = C2268- (  ( C2419*C2580 ) /C2245 ) ;
    double C2637 =  (  (  ( C2419*C2587 ) /C2223 ) +C2420 ) + (  (  (  ( C2616*be ) *ae ) *2 ) /C2223 ) ;
    double cnst311 = C2616*C2256;
    double gx001101 =  ( C2637* ( C2256*C2271 )  ) + (  ( C2616* ( C2305*C2271 )  ) - (  ( cnst311*C2767 ) /2.0 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 3] += gx001101*cnst3;
    double gy001011 =  (  ( C2616* ( C2310*C2392 )  ) - (  ( cnst311*C2769 ) /2.0 )  ) + (  ( C2256*C2392 ) *C2637 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 1] += cnst3*gy001011;
    double gy001101 =  ( C2637* ( C2279*C2247 )  ) + (  (  (  ( C2616*C2279 ) *C2708 ) /2.0 ) + ( C2616* ( C2247*C2334 )  )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 3] += cnst3*gy001101;
    double gx001011 =  (  (  (  ( C2616*C2521 ) *C2725 ) /2.0 ) + ( C2616* ( C2398*C2243 )  )  ) + ( C2637* ( C2521*C2243 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 1] += cnst3*gx001011;
    double C2599 = C2580/C2223;
    double C2221 = -C2599;
    double cnst328 =  ( C2512*C2247 ) *C2221;
    double cnst332 =  ( C2412*C2243 ) *C2221;
    double gx001020 =  (  ( C2391*C2243 ) *C2587 ) + (  (  ( C2725* ( C2221*C2391 )  ) /2.0 ) +cnst332 ) ;
    double C2233 = ae*C2221;
    double C2248 = C2233*2;
    double C2709 = C2449- (  (  ( C2231*C2233 ) *2 ) /C2223 ) ;
    double C2735 = C2709*ae;
    double C2783 =  (  ( - ( 4* ( C2248*be )  )  ) /C2235 ) - (  (  ( C2231*C2735 ) *2 ) /C2223 ) ;
    double C2790 = ae*C2783;
    double C2621 =  (  ( C2231*C2790 ) *2 ) /C2223;
    double C2718 = C2790*2;
    double C2794 = -C2718;
    double gz010110 =  (  (  ( C2279*C2539 ) *C2794 ) /2.0 ) + (  ( C2248* ( C2279*C2560 )  ) + ( C2248* ( C2539*C2334 )  )  ) ;
    gz[(Ai + 1) * matrix_size + Bi + 0] += gz010110*cnst3;
    double gz100200 =  (  ( C2248* ( C2256*C2353 )  ) + ( C2248* ( C2305*C2328 )  )  ) + (  ( C2794*cnst140 ) /2.0 ) ;
    double gz100110 =  (  ( C2248* ( C2398*C2300 )  ) + ( C2248* ( C2521*C2348 )  )  ) + (  ( C2794* ( C2521*C2300 )  ) /2.0 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 0] += gz100110*cnst3;
    double gz010020 =  (  ( C2248* ( C2568*C2256 )  ) + ( C2248* ( C2310*C2555 )  )  ) + (  ( C2794*cnst53 ) /2.0 ) ;
    double gz010200 =  (  ( C2794* ( C2219*C2503 )  ) /2.0 ) + (  ( C2248* ( C2507*C2503 )  ) +cnst328 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 4] += cc* (  ( gz010200*cnst0 ) - ( cnst0*gz010020 )  ) ;
    double gz100020 =  (  (  ( C2215*C2391 ) *C2794 ) /2.0 ) + (  ( C2248* ( C2332*C2391 )  ) +cnst332 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 4] += cc* (  ( gz100200*cnst0 ) - ( gz100020*cnst0 )  ) ;
    double C2604 = C2735*2;
    double C2771 =  (  ( 6.* ( C2604*ae )  ) /C2235 ) + (  (  ( C2790*C2419 ) *2 ) /C2223 ) ;
    double C2630 =  ( - ( 6* ( be*C2604 )  )  ) /C2235;
    double C2634 = C2630-C2621;
    double C2775 =  (  ( C2634*C2419 ) /C2223 ) + (  ( C2718+ ( 6*C2790 )  ) /C2235 ) ;
    double C2728 = C2621-C2630;
    double gz001020 =  (  (  ( C2256*C2412 ) *C2709 ) + ( C2709* ( C2310*C2391 )  )  ) + (  ( C2728*cnst47 ) /2.0 ) ;
    double cnst402 =  ( cnst2* (  (  ( C2604+ ( C2735*4 )  ) /C2235 ) + (  ( C2419*C2783 ) /C2223 )  )  ) + ( C2634+C2771 ) ;
    double C2780 =  (  (  ( 2* ( C2735*C2419 )  ) /C2223 ) + (  (  ( C2248*ae ) *4. ) /C2235 )  ) *ae;
    double C2799 =  (  ( C2718+ ( 6*C2780 )  ) /C2235 ) + (  ( C2419*C2771 ) /C2223 ) ;
    double gz001200 =  (  ( C2728*cnst62 ) /2.0 ) + (  (  ( C2256*C2512 ) *C2709 ) + ( C2709* ( C2305*C2503 )  )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 4] += cc* (  ( cnst0*gz001200 ) - ( cnst0*gz001020 )  ) ;
    double gz001110 =  (  ( C2709* ( C2521*C2334 )  ) + ( C2709* ( C2279*C2398 )  )  ) + (  ( C2728* ( C2279*C2521 )  ) /2.0 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 0] += cnst3*gz001110;
    double C2618 =  (  ( C2233*4. ) /C2235 ) + (  ( C2419*C2709 ) /C2223 ) ;
    double gz001011 =  (  (  ( C2398*C2256 ) *C2618 ) + (  ( C2521*C2310 ) *C2618 )  ) - (  ( cnst7*C2775 ) /2.0 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 1] += gz001011*cnst3;
    double gz001101 =  (  (  ( C2279*C2305 ) *C2618 ) + (  ( C2256*C2334 ) *C2618 )  ) - (  ( cnst12*C2775 ) /2.0 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 3] += gz001101*cnst3;
    double C2452 = C2439+ (  (  ( C2233*C2419 ) *2 ) /C2223 ) ;
    double C2464 =  (  ( C2248+ (  ( C2598*ae ) *2 )  ) /C2235 ) + (  ( C2452*C2419 ) /C2223 ) ;
    double gz010002 =  (  (  ( C2310*C2219 ) *C2464 ) + ( C2464* ( C2507*C2256 )  )  ) - (  ( cnst11*C2799 ) /2.0 ) ;
    double gz100002 =  (  (  ( C2332*C2256 ) *C2464 ) + ( C2464* ( C2215*C2305 )  )  ) - (  ( cnst149*C2799 ) /2.0 ) ;
    double gz100101 =  (  ( C2452* ( C2256*C2348 )  ) + (  ( C2305*C2300 ) *C2452 )  ) - (  ( cnst130*C2771 ) /2.0 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 3] += gz100101*cnst3;
    double C2633 =  (  ( C2419*C2618 ) /C2223 ) + (  (  ( C2452+C2709 ) + ( 2* ( C2616*ae )  )  ) /C2235 ) ;
    double gz001002 =  (  (  ( C2305*C2256 ) *C2633 ) + ( C2633* ( C2310*C2256 )  )  ) - (  (  (  (  ( C2419*C2775 ) /C2223 ) + ( cnst402/C2235 )  ) *cnst4 ) /2.0 ) ;
    double gz010101 =  (  (  ( C2279*C2507 ) *C2452 ) + (  ( C2219*C2334 ) *C2452 )  ) - (  (  ( C2279*C2219 ) *C2771 ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 3] += gz010101*cnst3;
    double gz100011 =  (  ( C2452* ( C2215*C2398 )  ) + ( C2452* ( C2521*C2332 )  )  ) - (  (  ( C2215*C2521 ) *C2771 ) /2.0 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 1] += gz100011*cnst3;
    double gz010011 =  (  ( C2452* ( C2560*C2256 )  ) + ( C2452* ( C2539*C2310 )  )  ) - (  ( cnst51*C2771 ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 1] += gz010011*cnst3;
    double gy001200 =  ( C2587* ( C2247*C2503 )  ) + (  (  (  ( C2503*C2221 ) *C2708 ) /2.0 ) +cnst328 ) ;
    double gy001110 =  (  (  ( C2334*C2392 ) *C2221 ) - (  ( C2769* ( C2279*C2221 )  ) /2.0 )  ) + (  ( C2279*C2392 ) *C2587 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 0] += cnst3*gy001110;
    double cnst454 = C2256*C2221;
    double gx001200 =  (  (  ( C2305*C2504 ) *C2221 ) - (  ( C2800*cnst454 ) /2.0 )  ) + (  ( C2256*C2504 ) *C2587 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 4] += cc* (  ( gx001200*cnst0 ) - ( cnst0*gx001020 )  ) ;
    double gy001020 =  (  ( C2404*C2256 ) *C2587 ) + (  (  ( C2310*C2404 ) *C2221 ) - (  ( C2798*cnst454 ) /2.0 )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 4] += cc* (  ( cnst0*gy001200 ) - ( gy001020*cnst0 )  ) ;
    double gx001110 =  (  ( C2521*C2271 ) *C2587 ) + (  (  ( C2398*C2271 ) *C2221 ) - (  ( C2767* ( C2521*C2221 )  ) /2.0 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 0] += gx001110*cnst3;
    double C2632 =  (  ( C2598-C2599 ) /C2235 ) + (  ( C2616*C2419 ) /C2223 ) ;
    double cnst469 = C2256*C2632;
    double C2645 =  (  (  ( C2458+C2587 ) /C2235 ) + (  ( C2637*C2419 ) /C2223 )  ) + (  (  ( C2599+ (  ( be*C2632 ) *2 )  ) *ae ) /C2223 ) ;
    double gy001002 =  (  (  ( C2708*cnst469 ) /2.0 ) + ( C2632* ( C2310*C2247 )  )  ) + ( C2645* ( C2256*C2247 )  ) ;
    double gx001002 =  (  (  ( cnst469*C2725 ) /2.0 ) + (  ( C2305*C2243 ) *C2632 )  ) + ( C2645* ( C2256*C2243 )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 2] += cc* (  (  ( - ( 0.5*gx100200 )  ) - ( 0.5*gx100020 )  ) +gx100002 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 2] += cc* (  (  ( - ( 0.5*gy001200 )  ) - ( gy001020*0.5 )  ) +gy001002 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 2] += cc* ( gy100002+ (  ( - ( 0.5*gy100200 )  ) - ( 0.5*gy100020 )  )  ) ;
    gz[(Ai + 0) * matrix_size + Bi + 2] += cc* (  (  ( - ( gz100200*0.5 )  ) - ( 0.5*gz100020 )  ) +gz100002 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 2] += cc* (  (  ( - ( 0.5*gz010200 )  ) - ( 0.5*gz010020 )  ) +gz010002 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 2] += cc* ( gy010002+ (  ( - ( 0.5*gy010200 )  ) - ( 0.5*gy010020 )  )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 2] += cc* (  (  ( - ( gx001200*0.5 )  ) - ( 0.5*gx001020 )  ) +gx001002 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 2] += cc* (  (  ( - ( 0.5*gx010200 )  ) - ( 0.5*gx010020 )  ) +gx010002 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 2] += cc* (  (  ( - ( 0.5*gz001200 )  ) - ( 0.5*gz001020 )  ) +gz001002 ) ;
}
