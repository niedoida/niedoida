/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d1_kit/gto_d1.hpp"
#include <cmath>

namespace {
    static const double Pi = M_PI;
}

void kinetic_gradient_13(
double ae , 
double be , 
double cc , 
double xAB , 
double yAB , 
double zAB , 
double* const gx , 
double* const gy , 
double* const gz , 
std::size_t matrix_size , 
std::size_t Ai , 
std::size_t Bi ) 
{
    double C3989 = ae*zAB;
    double cnst0 = 4*ae;
    double C3891 = yAB*ae;
    double C3688 = std::pow(ae , 2);
    double C3683 = xAB*ae;
    double cnst2 = std::sqrt( ( 45.0/8.0 ) );
    double cnst4 = std::sqrt( ( 5.0/8.0 ) );
    double cnst6 = std::sqrt( ( 3.0/8.0 ) );
    double cnst7 = std::sqrt(7.5);
    double cnst8 = std::sqrt(6.0);
    double cnst9 = 6*ae;
    double cnst11 =  ( std::sqrt(15.0) ) *cc;
    double cnst13 = std::sqrt( ( 45./8.0 ) );
    double C3680 = be+ae;
    double C3706 = std::pow(C3680 , 2);
    double C3893 = C3706*2.;
    double C3694 = 2.*C3680;
    double C3718 = 1/C3694;
    double C3719 = std::sqrt( ( Pi/C3680 ) );
    double C4027 =  ( - (  ( be*C3719 ) *2 )  ) /C3694;
    double C3999 = C3989*C3719;
    double C4012 = C3999*2.;
    double C4020 =  ( C3999*be ) *2;
    double C4262 = C3999/C3680;
    double cnst14 = C4262*C3719;
    double C3734 = C3719/C3694;
    double C4014 =  (  ( C3719*ae ) *2. ) /C3694;
    double cnst16 = C3719*C3719;
    double C3735 = C3683*C3719;
    double C3747 = C3735/C3680;
    double cnst17 = C3719*C3747;
    double C3760 =  ( C3735*be ) *2;
    double C4106 = C3735*2.;
    double C3762 =  (  ( C3719* ( std::pow(C3683 , 2) )  ) /C3706 ) +C3734;
    double C4117 =  ( C4106/C3893 ) + (  ( C3762*C3683 ) /C3680 ) ;
    double cnst19 = C4117*C3719;
    double cnst21 = C3762*C3719;
    double C3932 =  (  ( C3719* ( std::pow(C3891 , 2) )  ) /C3706 ) +C3734;
    double cnst22 = C3719*C3932;
    double C3902 = C3719*C3891;
    double C3915 = C3902*2.;
    double C3951 =  (  ( C3891*C3932 ) /C3680 ) + ( C3915/C3893 ) ;
    double cnst25 = C3719*C3951;
    double C3923 =  ( be*C3902 ) *2;
    double C4137 = C3902/C3680;
    double cnst29 = C4137*C3719;
    double C4029 =  (  ( C3719* ( std::pow(C3989 , 2) )  ) /C3706 ) +C3734;
    double cnst30 = C3719*C4029;
    double C4048 =  ( C4012/C3893 ) + (  ( C3989*C4029 ) /C3680 ) ;
    double cnst33 = C3719*C4048;
    double C3689 = be*yAB;
    double C4102 = C3719*C3689;
    double C4164 = C3734- (  ( C4102*C3891 ) /C3706 ) ;
    double C4174 = 2*C4164;
    double cnst37 = C3719*C4164;
    double C4138 = C4102/C3680;
    double C3676 = -C4138;
    double C3691 = C3676*ae;
    double C3934 = C4027- (  (  ( C3691*C3689 ) *2 ) /C3680 ) ;
    double C3940 = ae*C3934;
    double C3947 = C3940*2;
    double C4178 =  ( - (  ( C3947*be ) *6 )  ) /C3694;
    double cnst42 = C3719*C3934;
    double C3933 = C4014+ (  (  ( C3891*C3691 ) *2 ) /C3680 ) ;
    double C3709 = 2*C3691;
    double C3970 =  (  (  ( C3709*ae ) *4. ) /C3694 ) + (  (  ( C3891*C3940 ) *2 ) /C3680 ) ;
    double C4537 = ae* (  (  ( C3947+ (  ( C3933*ae ) *4 )  ) /C3694 ) + (  ( C3970*C3891 ) /C3680 )  ) ;
    double C3952 =  (  ( C3933*C3891 ) /C3680 ) + (  (  (  ( C4137*ae ) *2 ) +C3709 ) /C3694 ) ;
    double C3973 =  (  (  (  ( ae*C3932 ) *2 ) + ( C3933*2 )  ) /C3694 ) + (  ( C3891*C3952 ) /C3680 ) ;
    double C3968 =  (  ( - ( 4* ( be*C3709 )  )  ) /C3694 ) - (  (  ( C3940*C3689 ) *2 ) /C3680 ) ;
    double C4179 =  (  ( C3968*C3891 ) /C3680 ) + (  ( C3947+ ( 4*C3940 )  ) /C3694 ) ;
    double C3974 = C3968*ae;
    double C4169 =  (  ( C3974*C3689 ) *2 ) /C3680;
    double C4477 = C4169-C4178;
    double C4185 = C4178-C4169;
    double C3982 =  (  (  ( C3947*ae ) *6. ) /C3694 ) + (  (  ( C3974*C3891 ) *2 ) /C3680 ) ;
    double C4146 = C3974*2;
    double C4202 =  (  ( C4146+ ( 6*C3974 )  ) /C3694 ) + (  ( C4185*C3891 ) /C3680 ) ;
    double C4533 =  (  (  ( C3982+C4185 ) + (  ( ae*C4179 ) *6 )  ) /C3694 ) + (  ( C3891*C4202 ) /C3680 ) ;
    double C4460 = -C4146;
    double C4528 =  (  ( C4146+ ( 6* ( C3970*ae )  )  ) /C3694 ) + (  ( C3982*C3891 ) /C3680 ) ;
    double C4556 =  (  ( C4528*C3891 ) /C3680 ) + (  (  ( C3982*2 ) + ( C4537*6 )  ) /C3694 ) ;
    double C4166 =  (  ( 4.*C3691 ) /C3694 ) + (  ( C3891*C3934 ) /C3680 ) ;
    double cnst83 =  (  (  ( cnst0*C4166 ) + ( C3970+C3968 )  ) /C3694 ) + (  ( C3891*C4179 ) /C3680 ) ;
    double cnst87 =  (  (  ( C4528+ ( 2*C4202 )  ) + ( cnst83*cnst9 )  ) /C3694 ) + (  ( C4533*C3891 ) /C3680 ) ;
    double C4189 =  (  (  (  ( ae*C4164 ) *2 ) + ( C3933+C3934 )  ) /C3694 ) + (  ( C3891*C4166 ) /C3680 ) ;
    double cnst97 = C3719*C3676;
    double C4187 =  (  ( C4137-C4138 ) /C3694 ) + (  ( C3891*C4164 ) /C3680 ) ;
    double cnst100 = C3719*C4187;
    double C4206 =  (  ( C3891*C4187 ) /C3680 ) + (  ( C4174+C3932 ) /C3694 ) ;
    double cnst103 = C4206*C3719;
    double C4207 =  (  ( C4189*C3891 ) /C3680 ) + (  (  (  ( C4166*2 ) +C3952 ) + (  ( ae*C4187 ) *2 )  ) /C3694 ) ;
    double C3781 = C3719* ( ae- (  ( C3688* ( C3718+ ( std::pow( ( C3689/C3680 )  , 2) )  )  ) *2 )  ) ;
    double C3941 =  (  ( C3891*C3781 ) /C3680 ) + (  ( C3923*ae ) /C3706 ) ;
    double C3892 = C3781/C3694;
    double C3971 =  (  (  (  (  ( be*C3932 ) *2 ) -C3719 ) *ae ) /C3680 ) + ( C3892+ (  ( C3891*C3941 ) /C3680 )  ) ;
    double C3980 =  (  ( C3971*C3891 ) +C3941 ) + (  (  (  ( be*C3951 ) *2 ) - ( C3915/C3680 )  ) *ae ) ;
    double C4124 =  (  (  ( -C3923 ) *be ) /C3706 ) - (  ( C3781*C3689 ) /C3680 ) ;
    double C4198 =  (  (  (  ( be*C4164 ) *ae ) *2 ) /C3680 ) + ( C3892+ (  ( C4124*C3891 ) /C3680 )  ) ;
    double C4216 =  (  ( ae* ( C4138+ (  ( be*C4187 ) *2 )  )  ) /C3680 ) + (  (  ( C4198*C3891 ) /C3680 ) + (  ( C4124+C3941 ) /C3694 )  ) ;
    double C4223 =  (  (  ( C3971+ ( C4198*2 )  ) /C3694 ) + (  ( C4216*C3891 ) /C3680 )  ) + (  (  (  (  ( C4206*be ) *2 ) -C4174 ) *ae ) /C3680 ) ;
    double C3690 = be*zAB;
    double C3787 = C3719* ( ae- ( 2* ( C3688* (  ( std::pow( ( C3690/C3680 )  , 2) ) +C3718 )  )  )  ) ;
    double C4250 =  (  ( be* ( -C4020 )  ) /C3706 ) - (  ( C3787*C3690 ) /C3680 ) ;
    double C3990 = C3787/C3694;
    double C4038 =  (  ( C4020*ae ) /C3706 ) + (  ( C3989*C3787 ) /C3680 ) ;
    double C4068 =  (  (  (  (  ( be*C4029 ) *2 ) -C3719 ) *ae ) /C3680 ) + ( C3990+ (  ( C3989*C4038 ) /C3680 )  ) ;
    double C4077 =  (  (  (  ( be*C4048 ) *2 ) - ( C4012/C3680 )  ) *ae ) + ( C4038+ ( C3989*C4068 )  ) ;
    double C4243 = C3719*C3690;
    double C4263 = C4243/C3680;
    double C3678 = -C4263;
    double C3692 = C3678*ae;
    double C3710 = C3692*2;
    double C4461 = C4027- (  (  ( C3692*C3690 ) *2 ) /C3680 ) ;
    double C4490 = ae*C4461;
    double C4535 =  (  ( - ( 4* ( be*C3710 )  )  ) /C3694 ) - (  (  ( C4490*C3690 ) *2 ) /C3680 ) ;
    double C4542 = C4535*ae;
    double C4294 =  (  ( C4542*C3690 ) *2 ) /C3680;
    double C4271 = C4542*2;
    double C4549 = -C4271;
    double C4067 =  (  (  ( C3989*C4490 ) *2 ) /C3680 ) + (  (  ( C3710*ae ) *4. ) /C3694 ) ;
    double C4044 = C4490*2;
    double C4079 =  (  (  ( C3989*C4542 ) *2 ) /C3680 ) + (  ( 6.* ( C4044*ae )  ) /C3694 ) ;
    double C4530 =  (  ( C3989*C4079 ) /C3680 ) + (  ( C4271+ (  ( C4067*ae ) *6 )  ) /C3694 ) ;
    double C4303 =  ( - ( 6* ( be*C4044 )  )  ) /C3694;
    double C4482 = C4294-C4303;
    double C4310 = C4303-C4294;
    double C4327 =  (  (  ( C4542*6 ) +C4271 ) /C3694 ) + (  ( C3989*C4310 ) /C3680 ) ;
    double C4304 =  (  ( C3989*C4535 ) /C3680 ) + (  (  ( C4490*4 ) +C4044 ) /C3694 ) ;
    double C4534 =  (  (  (  ( C4304*ae ) *6 ) + ( C4310+C4079 )  ) /C3694 ) + (  ( C3989*C4327 ) /C3680 ) ;
    double C4291 =  (  ( C3989*C4461 ) /C3680 ) + (  ( C3692*4. ) /C3694 ) ;
    double cnst191 =  (  (  ( C4535+C4067 ) + ( C4291*cnst0 )  ) /C3694 ) + (  ( C3989*C4304 ) /C3680 ) ;
    double cnst195 =  (  (  ( cnst191*cnst9 ) + (  ( 2*C4327 ) +C4530 )  ) /C3694 ) + (  ( C3989*C4534 ) /C3680 ) ;
    double cnst201 = C3719*C4461;
    double C4030 =  (  (  ( C3989*C3692 ) *2 ) /C3680 ) +C4014;
    double C4539 = ae* (  (  ( C4044+ (  ( C4030*ae ) *4 )  ) /C3694 ) + (  ( C3989*C4067 ) /C3680 )  ) ;
    double C4557 =  (  ( C3989*C4530 ) /C3680 ) + (  (  ( 6*C4539 ) + ( C4079*2 )  ) /C3694 ) ;
    double C4049 =  (  (  (  ( C4262*ae ) *2 ) +C3710 ) /C3694 ) + (  ( C3989*C4030 ) /C3680 ) ;
    double C4070 =  (  (  (  ( ae*C4029 ) *2 ) + ( C4030*2 )  ) /C3694 ) + (  ( C3989*C4049 ) /C3680 ) ;
    double cnst214 = C3678*2;
    double cnst216 = C3678*C3719;
    double C4289 = C3734- (  ( C3989*C4243 ) /C3706 ) ;
    double C4314 =  (  (  (  ( ae*C4289 ) *2 ) + ( C4030+C4461 )  ) /C3694 ) + (  ( C3989*C4291 ) /C3680 ) ;
    double C4323 =  ( C3990+ (  ( C3989*C4250 ) /C3680 )  ) + (  ( 2* (  ( be*C4289 ) *ae )  ) /C3680 ) ;
    double cnst240 = C3719*C4289;
    double C4299 = C4289*2;
    double C4312 =  (  ( C4262-C4263 ) /C3694 ) + (  ( C3989*C4289 ) /C3680 ) ;
    double C4332 =  (  (  (  ( C4291*2 ) +C4049 ) + (  ( ae*C4312 ) *2 )  ) /C3694 ) + (  ( C3989*C4314 ) /C3680 ) ;
    double C4331 =  (  ( C3989*C4312 ) /C3680 ) + (  ( C4299+C4029 ) /C3694 ) ;
    double cnst250 = C3719*C4331;
    double cnst253 = C3719*C4312;
    double C4341 =  (  ( ae* ( C4263+ (  ( be*C4312 ) *2 )  )  ) /C3680 ) + (  (  ( C4250+C4038 ) /C3694 ) + (  ( C3989*C4323 ) /C3680 )  ) ;
    double C4348 =  (  (  (  (  ( be*C4331 ) *2 ) -C4299 ) *ae ) /C3680 ) + (  (  ( C3989*C4341 ) /C3680 ) + (  ( C4068+ ( C4323*2 )  ) /C3694 )  ) ;
    double C3682 = xAB*be;
    double C3789 = C3719* ( ae- (  ( C3688* (  ( std::pow( ( C3682/C3680 )  , 2) ) +C3718 )  ) *2 )  ) ;
    double gz001021 =  (  ( C4291* ( C3932*C3789 )  ) + ( C4291* ( C3719*C3971 )  )  ) - (  ( cnst22*C4327 ) /2.0 ) ;
    double C3828 =  (  ( C3760*ae ) /C3706 ) + (  ( C3683*C3789 ) /C3680 ) ;
    double gz010111 =  (  ( C4030* ( C4198*C3747 )  ) + ( C4030* ( C3828*C4164 )  )  ) - (  ( C4079* ( C3747*C4164 )  ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 1] += cnst11*gz010111;
    double gz001111 =  (  ( C4291* ( C3747*C3941 )  ) + ( C4291* ( C3828*C4137 )  )  ) - (  (  ( C4137*C3747 ) *C4327 ) /2.0 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 1] += gz001111*cnst11;
    double gz001102 =  (  ( C4314* ( C3747*C3781 )  ) + (  ( C3828*C3719 ) *C4314 )  ) - (  ( cnst17*C4534 ) /2.0 ) ;
    double gy001111 =  (  (  ( C3828*C3933 ) *C4289 ) - (  ( C3982* ( C3747*C4289 )  ) /2.0 )  ) + (  ( C3933*C3747 ) *C4323 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 1] += cnst11*gy001111;
    double gz010120 =  (  (  ( C3747*C4187 ) *C4549 ) /2.0 ) + (  (  ( C3747*C4216 ) *C3710 ) + (  ( C3828*C4187 ) *C3710 )  ) ;
    double gy010120 =  (  ( C4189*C3747 ) *C3787 ) + (  ( C3719* ( C3828*C4189 )  ) - (  ( C4533*cnst17 ) /2.0 )  ) ;
    double gy001102 =  (  ( C3709*C3747 ) *C4341 ) + (  (  ( C4460* ( C3747*C4312 )  ) /2.0 ) + (  ( C3828*C3709 ) *C4312 )  ) ;
    double gz001120 =  (  (  ( C3828*C3932 ) *C4461 ) + (  ( C3971*C3747 ) *C4461 )  ) + (  (  ( C3747*C3932 ) *C4482 ) /2.0 ) ;
    double gy010111 =  (  ( C3747*C4166 ) *C4038 ) + (  ( C4262* ( C3828*C4166 )  ) - (  (  ( C4262*C3747 ) *C4202 ) /2.0 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 1] += cnst11*gy010111;
    double gy010102 =  ( C4068* ( C3747*C3934 )  ) + (  (  ( C3828*C3934 ) *C4029 ) + (  (  ( C3747*C4029 ) *C4477 ) /2.0 )  ) ;
    double gz010102 =  (  (  ( C3747*C4124 ) *C4049 ) + (  ( C3828*C3676 ) *C4049 )  ) - (  ( C4530* ( C3747*C3676 )  ) /2.0 ) ;
    double gy001120 =  ( C4250* ( C3747*C3952 )  ) + (  (  ( C3828*C3952 ) *C3678 ) - (  (  ( C3678*C3747 ) *C4528 ) /2.0 )  ) ;
    double gy001021 =  (  (  ( C3952*C3789 ) *C4289 ) - (  ( C4528*cnst240 ) /2.0 )  ) + (  ( C3719*C3952 ) *C4323 ) ;
    double gy010012 =  (  ( C3719*C4166 ) *C4068 ) + (  (  ( C4166*C3789 ) *C4029 ) - (  ( cnst30*C4202 ) /2.0 )  ) ;
    double gy010003 =  (  ( cnst42*C4077 ) /C3680 ) + (  (  ( cnst33*C4477 ) /2.0 ) + (  ( C3934*C3789 ) *C4048 )  ) ;
    double gy001003 =  ( C4348* ( C3719*C3709 )  ) + (  (  ( cnst250*C4460 ) /2.0 ) + (  ( C3709*C3789 ) *C4331 )  ) ;
    double gy010021 =  (  ( C4262* ( C4189*C3789 )  ) - (  ( C4533*cnst14 ) /2.0 )  ) + (  ( C4189*C3719 ) *C4038 ) ;
    double C3803 = C3789/C3694;
    double C3866 =  ( C3803+ (  ( C3828*C3683 ) /C3680 )  ) + (  (  (  (  ( C3762*be ) *2 ) -C3719 ) *ae ) /C3680 ) ;
    double gz010210 =  (  ( C4549* ( C3762*C4164 )  ) /2.0 ) + (  ( C3710* ( C3866*C4164 )  ) + (  ( C3762*C4198 ) *C3710 )  ) ;
    double C4127 =  (  (  (  ( C4117*be ) *2 ) - ( C4106/C3680 )  ) *ae ) + ( C3828+ ( C3683*C3866 )  ) ;
    double gy010300 =  (  ( C4117*C3934 ) *C3787 ) + (  (  ( cnst19*C4477 ) /2.0 ) + (  ( C4127*cnst42 ) /C3680 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 4] +=  (  ( cnst8*gy010102 ) - (  ( gy010120*cnst6 ) + ( gy010300*cnst6 )  )  ) *cc;
    gy[(Ai + 1) * matrix_size + Bi + 6] += cc* (  ( gy010120*cnst2 ) + ( gy010300*cnst4 )  ) ;
    double cnst344 =  ( C4127* ( C3691*cnst214 )  ) /C3680;
    double gz010300 =  (  (  ( C4117*C3676 ) *C4549 ) /2.0 ) + ( cnst344+ (  ( C4117*C4124 ) *C3710 )  ) ;
    gz[(Ai + 1) * matrix_size + Bi + 4] +=  (  ( gz010102*cnst8 ) - (  ( gz010120*cnst6 ) + ( cnst6*gz010300 )  )  ) *cc;
    gz[(Ai + 1) * matrix_size + Bi + 6] += cc* (  ( cnst2*gz010120 ) + ( cnst4*gz010300 )  ) ;
    double gy001300 =  ( C4250* ( C4117*C3709 )  ) + ( cnst344+ (  ( C4460* ( C3678*C4117 )  ) /2.0 )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 6] +=  (  ( gy001300*cnst4 ) + ( gy001120*cnst2 )  ) *cc;
    gy[(Ai + 2) * matrix_size + Bi + 4] += cc* (  ( gy001102*cnst8 ) - (  ( gy001300*cnst6 ) + ( gy001120*cnst6 )  )  ) ;
    double gz001300 =  (  (  ( C4127*cnst201 ) /C3680 ) + (  ( C4117*C3781 ) *C4461 )  ) + (  ( cnst19*C4482 ) /2.0 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 4] += cc* (  ( cnst8*gz001102 ) - (  ( gz001300*cnst6 ) + ( cnst6*gz001120 )  )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 6] += cc* (  ( gz001300*cnst4 ) + ( cnst2*gz001120 )  ) ;
    double gz010201 =  (  ( C4030* ( C3676*C3866 )  ) + ( C4030* ( C3762*C4124 )  )  ) - (  ( C4079* ( C3762*C3676 )  ) /2.0 ) ;
    double gy001210 =  ( C4250* ( C3762*C3933 )  ) + (  ( C3678* ( C3933*C3866 )  ) - (  ( C3982* ( C3678*C3762 )  ) /2.0 )  ) ;
    double gy010210 =  (  ( C3719* ( C4166*C3866 )  ) - (  ( cnst21*C4202 ) /2.0 )  ) + (  ( C3762*C4166 ) *C3787 ) ;
    double gy010201 =  ( C4038* ( C3762*C3934 )  ) + (  ( C4262* ( C3934*C3866 )  ) + (  (  ( C4262*C3762 ) *C4477 ) /2.0 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 5] += cc* (  ( cnst7*gy010201 ) - ( cnst7*gy010021 )  ) ;
    double gz001201 =  (  ( C4291* ( C3719*C3866 )  ) + (  ( C3762*C3781 ) *C4291 )  ) - (  ( cnst21*C4327 ) /2.0 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 5] += cc* (  ( cnst7*gz001201 ) - ( cnst7*gz001021 )  ) ;
    double gy001201 =  (  (  (  ( C3762*C4289 ) *C4460 ) /2.0 ) + (  ( C3709*C3866 ) *C4289 )  ) + (  ( C3762*C3709 ) *C4323 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 5] += cc* (  ( cnst7*gy001201 ) - ( cnst7*gy001021 )  ) ;
    double gz001210 =  (  (  ( C3762*C4137 ) *C4482 ) /2.0 ) + (  (  ( C4137*C3866 ) *C4461 ) + (  ( C3762*C3941 ) *C4461 )  ) ;
    double gy001030 =  (  (  ( C3973*C3789 ) *C3678 ) - (  ( C4556*cnst216 ) /2.0 )  ) + ( C4250* ( C3719*C3973 )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 0] +=  (  ( cnst13*gy001210 ) - ( gy001030*cnst4 )  ) *cc;
    double gz001003 =  (  ( C4332* ( C3719*C3781 )  ) + (  ( C3719*C3789 ) *C4332 )  ) - (  ( cnst16*cnst195 ) /2.0 ) ;
    double gy001012 =  ( C4341* ( C3933*C3719 )  ) + (  ( C4312* ( C3933*C3789 )  ) - (  ( C3982*cnst253 ) /2.0 )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 2] += - ( cc* (  (  ( gy001012*cnst8 ) + ( cnst6*gy001210 )  ) + ( gy001030*cnst6 )  )  ) ;
    double gz001012 =  (  ( C4314* ( C3719*C3941 )  ) + ( C4314* ( C4137*C3789 )  )  ) - (  ( cnst29*C4534 ) /2.0 ) ;
    double gz010003 =  (  (  ( C3676*C3789 ) *C4070 ) + (  ( C3719*C4124 ) *C4070 )  ) - (  ( cnst97*C4557 ) /2.0 ) ;
    double gz001030 =  (  ( C4482*cnst25 ) /2.0 ) + (  (  ( C3789*C3951 ) *C4461 ) + (  ( C3980*cnst201 ) /C3680 )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 0] += cc* (  ( gz001210*cnst13 ) - ( gz001030*cnst4 )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 2] += - ( cc* (  (  ( gz001012*cnst8 ) + ( gz001210*cnst6 )  ) + ( gz001030*cnst6 )  )  ) ;
    double gz010030 =  (  ( cnst103*C4549 ) /2.0 ) + (  (  ( C4206*C3789 ) *C3710 ) + ( C3710* ( C3719*C4223 )  )  ) ;
    gz[(Ai + 1) * matrix_size + Bi + 0] += cc* (  ( gz010210*cnst13 ) - ( gz010030*cnst4 )  ) ;
    double gz010012 =  (  ( C4049* ( C3719*C4198 )  ) + ( C4049* ( C3789*C4164 )  )  ) - (  ( C4530*cnst37 ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 2] += - ( cc* (  ( gz010030*cnst6 ) + (  ( gz010012*cnst8 ) + ( cnst6*gz010210 )  )  )  ) ;
    double C3826 =  (  ( be* ( -C3760 )  ) /C3706 ) - (  ( C3682*C3789 ) /C3680 ) ;
    double gz010021 =  (  ( C4030* ( C4187*C3789 )  ) + ( C4030* ( C3719*C4216 )  )  ) - (  ( C4079*cnst100 ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 5] += cc* (  ( cnst7*gz010201 ) - ( cnst7*gz010021 )  ) ;
    double gy010030 =  (  ( C3719* ( C4207*C3789 )  ) - (  ( cnst16*cnst87 ) /2.0 )  ) + (  ( C3719*C4207 ) *C3787 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 0] += cc* (  ( cnst13*gy010210 ) - ( gy010030*cnst4 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 2] += - ( cc* (  ( gy010030*cnst6 ) + (  ( cnst6*gy010210 ) + ( gy010012*cnst8 )  )  )  ) ;
    double C3732 = C3719*C3682;
    double C3748 = C3732/C3680;
    double C3670 = -C3748;
    double C3681 = C3670*ae;
    double C3738 =  (  (  ( C3683*C3681 ) *2 ) /C3680 ) +C4014;
    double C3700 = C3681*2;
    double C3780 =  (  ( C3700+ (  ( C3747*ae ) *2 )  ) /C3694 ) + (  ( C3683*C3738 ) /C3680 ) ;
    double C4121 =  (  (  (  ( C3762*ae ) *2 ) + ( C3738*2 )  ) /C3694 ) + (  ( C3683*C3780 ) /C3680 ) ;
    double cnst559 =  (  ( C3676*C3700 ) *C4077 ) /C3680;
    double C3737 = C4027- (  (  ( C3682*C3681 ) *2 ) /C3680 ) ;
    double cnst560 = C3737*C3719;
    double C3754 = C3737*ae;
    double C3814 =  (  (  ( C3700*ae ) *4. ) /C3694 ) + (  (  ( C3683*C3754 ) *2 ) /C3680 ) ;
    double C3767 = C3754*2;
    double C3823 =  ( - ( 6* ( C3767*be )  )  ) /C3694;
    double C4541 =  (  (  ( C3767+ (  ( C3738*ae ) *4 )  ) /C3694 ) + (  ( C3683*C3814 ) /C3680 )  ) *ae;
    double C3812 =  (  ( - (  ( be*C3700 ) *4 )  ) /C3694 ) - (  (  ( C3682*C3754 ) *2 ) /C3680 ) ;
    double C3848 =  (  ( C3767+ ( 4*C3754 )  ) /C3694 ) + (  ( C3683*C3812 ) /C3680 ) ;
    double C3824 = C3812*ae;
    double C3863 =  (  (  ( C3683*C3824 ) *2 ) /C3680 ) + (  (  ( C3767*ae ) *6. ) /C3694 ) ;
    double gx001102 =  (  (  ( C3738*C3781 ) *C4312 ) - (  ( cnst253*C3863 ) /2.0 )  ) + ( C4341* ( C3738*C3719 )  ) ;
    double gx001120 =  (  (  ( C3738*C3971 ) *C3678 ) - (  (  ( C3678*C3932 ) *C3863 ) /2.0 )  ) + ( C4250* ( C3738*C3932 )  ) ;
    double gx010111 =  (  ( C3738*C4164 ) *C4038 ) + (  ( C4262* ( C3738*C4198 )  ) - (  (  ( C4262*C4164 ) *C3863 ) /2.0 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 1] += cnst11*gx010111;
    double gx010102 =  (  (  ( C3738*C4124 ) *C4029 ) - (  ( C3863* ( C3676*C4029 )  ) /2.0 )  ) + ( C4068* ( C3738*C3676 )  ) ;
    double gx001111 =  ( C4323* ( C4137*C3738 )  ) + (  (  ( C3738*C3941 ) *C4289 ) - (  ( C3863* ( C4137*C4289 )  ) /2.0 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 1] += cnst11*gx001111;
    double gx010120 =  ( C3787* ( C3738*C4187 )  ) + (  ( C3719* ( C3738*C4216 )  ) - (  ( C3863*cnst100 ) /2.0 )  ) ;
    double C3835 = C3824*2;
    double C4526 =  (  ( C3683*C3863 ) /C3680 ) + (  (  ( 6* ( ae*C3814 )  ) +C3835 ) /C3694 ) ;
    double gx010210 =  ( C3787* ( C3780*C4164 )  ) + (  ( C3719* ( C4198*C3780 )  ) - (  ( cnst37*C4526 ) /2.0 )  ) ;
    double C4558 =  (  (  ( C3863*2 ) + ( 6*C4541 )  ) /C3694 ) + (  ( C3683*C4526 ) /C3680 ) ;
    double gx001300 =  ( C4250* ( C3719*C4121 )  ) + (  ( C3678* ( C4121*C3781 )  ) - (  ( cnst216*C4558 ) /2.0 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 4] +=  (  ( cnst8*gx001102 ) - (  ( cnst6*gx001300 ) + ( cnst6*gx001120 )  )  ) *cc;
    gx[(Ai + 2) * matrix_size + Bi + 6] += cc* (  ( cnst2*gx001120 ) + ( gx001300*cnst4 )  ) ;
    double gx010300 =  (  ( C3719* ( C4124*C4121 )  ) - (  ( cnst97*C4558 ) /2.0 )  ) + (  ( C3676*C4121 ) *C3787 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 4] +=  (  ( gx010102*cnst8 ) - (  ( gx010120*cnst6 ) + ( gx010300*cnst6 )  )  ) *cc;
    gx[(Ai + 1) * matrix_size + Bi + 6] += cc* (  ( gx010120*cnst2 ) + ( gx010300*cnst4 )  ) ;
    double gx001201 =  (  ( C3719*C3780 ) *C4323 ) + (  (  ( C3780*C3781 ) *C4289 ) - (  ( cnst240*C4526 ) /2.0 )  ) ;
    double gx010201 =  ( C4038* ( C3780*C3676 )  ) + (  ( C4262* ( C3780*C4124 )  ) - (  ( C4526* ( C4262*C3676 )  ) /2.0 )  ) ;
    double gx001210 =  (  ( C4137*C3780 ) *C4250 ) + (  ( C3678* ( C3780*C3941 )  ) - (  ( C4526* ( C3678*C4137 )  ) /2.0 )  ) ;
    double C4478 = -C3835;
    double gx010030 =  (  (  ( C4478*cnst103 ) /2.0 ) + ( C3719* ( C4223*C3700 )  )  ) + (  ( C4206*C3700 ) *C3787 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 0] += cc* (  ( gx010210*cnst13 ) - ( gx010030*cnst4 )  ) ;
    double gx010021 =  (  ( C3700*C4187 ) *C4038 ) + (  ( C4262* ( C4216*C3700 )  ) + (  ( C4478* ( C4262*C4187 )  ) /2.0 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 5] += cc* (  ( cnst7*gx010201 ) - ( cnst7*gx010021 )  ) ;
    double gx010003 =  (  (  ( C4124*C3700 ) *C4048 ) + (  ( C4478* ( C3676*C4048 )  ) /2.0 )  ) +cnst559;
    double gx001003 =  ( C4348* ( C3719*C3700 )  ) + (  (  ( cnst250*C4478 ) /2.0 ) + (  ( C3700*C3781 ) *C4331 )  ) ;
    double gx001012 =  (  (  (  ( C4137*C4312 ) *C4478 ) /2.0 ) + (  ( C3700*C3941 ) *C4312 )  ) + ( C4341* ( C4137*C3700 )  ) ;
    double gx010012 =  (  (  (  ( C4029*C4164 ) *C4478 ) /2.0 ) + (  ( C4198*C3700 ) *C4029 )  ) + ( C4068* ( C3700*C4164 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 2] += - (  (  ( gx010030*cnst6 ) + (  ( gx010210*cnst6 ) + ( gx010012*cnst8 )  )  ) *cc ) ;
    double gx001021 =  (  (  ( C4478* ( C3932*C4289 )  ) /2.0 ) + (  ( C3971*C3700 ) *C4289 )  ) + (  ( C3700*C3932 ) *C4323 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 5] += cc* (  ( gx001201*cnst7 ) - ( cnst7*gx001021 )  ) ;
    double C3855 =  (  ( C3824*C3682 ) *2 ) /C3680;
    double C3862 = C3823-C3855;
    double C3876 =  (  ( C3683*C3862 ) /C3680 ) + (  ( C3835+ ( 6*C3824 )  ) /C3694 ) ;
    double C4525 =  (  ( C3683*C3876 ) /C3680 ) + (  (  (  ( ae*C3848 ) *6 ) + ( C3863+C3862 )  ) /C3694 ) ;
    double C4462 = C3855-C3823;
    double gx100003 =  (  ( C4077*cnst560 ) /C3680 ) + (  (  ( C4462*cnst33 ) /2.0 ) + (  ( C3737*C3781 ) *C4048 )  ) ;
    double gx100021 =  (  ( C4262* ( C3737*C3971 )  ) + (  (  ( C4262*C3932 ) *C4462 ) /2.0 )  ) + ( C4038* ( C3737*C3932 )  ) ;
    double gx100030 =  (  (  ( C3980*cnst560 ) /C3680 ) + (  ( C4462*cnst25 ) /2.0 )  ) + (  ( C3737*C3951 ) *C3787 ) ;
    double gx100012 =  (  (  (  ( C4137*C4029 ) *C4462 ) /2.0 ) + (  ( C3737*C3941 ) *C4029 )  ) + ( C4068* ( C3737*C4137 )  ) ;
    double cnst706 =  ( C3980* ( C3681*cnst214 )  ) /C3680;
    double gx001030 =  ( C4250* ( C3700*C3951 )  ) + ( cnst706+ (  (  ( C3678*C3951 ) *C4478 ) /2.0 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 0] += cc* (  ( gx001210*cnst13 ) - ( cnst4*gx001030 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 2] += - (  (  (  ( gx001210*cnst6 ) + ( cnst8*gx001012 )  ) + ( cnst6*gx001030 )  ) *cc ) ;
    double C3778 =  (  ( C3737*C3683 ) /C3680 ) + (  ( 4.*C3681 ) /C3694 ) ;
    double cnst719 =  (  (  ( C3812+C3814 ) + ( cnst0*C3778 )  ) /C3694 ) + (  ( C3683*C3848 ) /C3680 ) ;
    double cnst723 =  (  ( C3683*C4525 ) /C3680 ) + (  (  (  ( C3876*2 ) +C4526 ) + ( cnst719*cnst9 )  ) /C3694 ) ;
    double gx100102 =  (  ( C4029* ( C3778*C3781 )  ) - (  ( cnst30*C3876 ) /2.0 )  ) + (  ( C3719*C3778 ) *C4068 ) ;
    double gx100120 =  ( C3787* ( C3778*C3932 )  ) + (  ( C3719* ( C3778*C3971 )  ) - (  ( cnst22*C3876 ) /2.0 )  ) ;
    double gx100111 =  (  ( C4262* ( C3778*C3941 )  ) - (  ( C3876* ( C4262*C4137 )  ) /2.0 )  ) + (  ( C4137*C3778 ) *C4038 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 1] += gx100111*cnst11;
    double gz100030 =  (  (  ( C3826*C3951 ) *C3710 ) +cnst706 ) + (  (  ( C3670*C3951 ) *C4549 ) /2.0 ) ;
    double cnst753 = C3670*C3719;
    double gz100003 =  (  (  ( C3719*C3826 ) *C4070 ) + (  ( C3670*C3781 ) *C4070 )  ) - (  ( cnst753*C4557 ) /2.0 ) ;
    double gy100030 =  (  (  ( C3973*C3826 ) *C3719 ) - (  ( cnst753*C4556 ) /2.0 )  ) + (  ( C3670*C3973 ) *C3787 ) ;
    double gz100021 =  (  ( C4030* ( C3670*C3971 )  ) + (  ( C3932*C3826 ) *C4030 )  ) - (  (  ( C3670*C3932 ) *C4079 ) /2.0 ) ;
    double gy100012 =  ( C4068* ( C3933*C3670 )  ) + (  (  ( C3933*C3826 ) *C4029 ) - (  ( C3982* ( C3670*C4029 )  ) /2.0 )  ) ;
    double gy100003 =  (  (  ( C4460* ( C3670*C4048 )  ) /2.0 ) + (  ( C3709*C3826 ) *C4048 )  ) +cnst559;
    double gz100012 =  (  (  ( C4137*C3826 ) *C4049 ) + (  ( C3670*C3941 ) *C4049 )  ) - (  ( C4530* ( C4137*C3670 )  ) /2.0 ) ;
    double gy100021 =  ( C4038* ( C3670*C3952 )  ) + (  ( C4262* ( C3952*C3826 )  ) - (  ( C4528* ( C4262*C3670 )  ) /2.0 )  ) ;
    double C3774 = C3734- (  ( C3683*C3732 ) /C3706 ) ;
    double C3864 =  (  (  ( C3683*C3826 ) /C3680 ) +C3803 ) + (  (  ( ae* ( be*C3774 )  ) *2 ) /C3680 ) ;
    double C3821 =  (  ( C3683*C3778 ) /C3680 ) + (  (  ( 2* ( ae*C3774 )  ) + ( C3737+C3738 )  ) /C3694 ) ;
    double gx100201 =  (  ( C3821*C3719 ) *C4038 ) + (  ( C4262* ( C3821*C3781 )  ) - (  ( cnst14*C4525 ) /2.0 )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 5] += cc* (  ( gx100201*cnst7 ) - ( gx100021*cnst7 )  ) ;
    double gx100210 =  (  ( C3719* ( C3821*C3941 )  ) - (  ( cnst29*C4525 ) /2.0 )  ) + (  ( C3821*C4137 ) *C3787 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 2] += - ( cc* (  ( gx100030*cnst6 ) + (  ( gx100012*cnst8 ) + ( gx100210*cnst6 )  )  )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 0] += cc* (  ( gx100210*cnst13 ) - ( gx100030*cnst4 )  ) ;
    double C3818 =  (  ( C3747-C3748 ) /C3694 ) + (  ( C3683*C3774 ) /C3680 ) ;
    double C3880 =  (  (  (  (  ( be*C3818 ) *2 ) +C3748 ) *ae ) /C3680 ) + (  (  ( C3828+C3826 ) /C3694 ) + (  ( C3683*C3864 ) /C3680 )  ) ;
    double cnst836 = C3719*C3818;
    double gy100210 =  (  ( C3719* ( C3933*C3880 )  ) - (  ( C3982*cnst836 ) /2.0 )  ) + (  ( C3933*C3818 ) *C3787 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 0] += cc* (  ( gy100210*cnst13 ) - ( gy100030*cnst4 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 2] += - ( cc* (  ( gy100030*cnst6 ) + (  ( cnst6*gy100210 ) + ( gy100012*cnst8 )  )  )  ) ;
    double gz100210 =  (  (  ( C4137*C3880 ) *C3710 ) + (  ( C3818*C3941 ) *C3710 )  ) + (  ( C4549* ( C4137*C3818 )  ) /2.0 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 0] += cc* (  ( gz100210*cnst13 ) - ( gz100030*cnst4 )  ) ;
    gz[(Ai + 0) * matrix_size + Bi + 2] += - ( cc* (  ( gz100030*cnst6 ) + (  ( cnst6*gz100210 ) + ( gz100012*cnst8 )  )  )  ) ;
    double gz100201 =  (  ( C4030* ( C3719*C3880 )  ) + ( C4030* ( C3818*C3781 )  )  ) - (  ( C4079*cnst836 ) /2.0 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 5] +=  (  ( cnst7*gz100201 ) - ( gz100021*cnst7 )  ) *cc;
    double gy100201 =  (  ( C3709*C3818 ) *C4038 ) + (  ( C4262* ( C3709*C3880 )  ) + (  ( C4460* ( C4262*C3818 )  ) /2.0 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 5] += cc* (  ( cnst7*gy100201 ) - ( cnst7*gy100021 )  ) ;
    double C3854 =  (  ( C3821*C3683 ) /C3680 ) + (  (  (  ( C3818*ae ) *2 ) + ( C3780+ ( C3778*2 )  )  ) /C3694 ) ;
    double gx100300 =  (  ( C3719* ( C3854*C3781 )  ) - (  (  ( std::pow(C3719 , 2) ) *cnst723 ) /2.0 )  ) + (  ( C3719*C3854 ) *C3787 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 4] += cc* (  ( gx100102*cnst8 ) - (  ( gx100300*cnst6 ) + ( cnst6*gx100120 )  )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 6] +=  (  ( gx100300*cnst4 ) + ( cnst2*gx100120 )  ) *cc;
    double gy100102 =  (  (  ( C4460* ( C4029*C3774 )  ) /2.0 ) + ( C4029* ( C3709*C3864 )  )  ) + ( C4068* ( C3709*C3774 )  ) ;
    double cnst885 = C3719*C3774;
    double gz100102 =  (  (  ( C3781*C3774 ) *C4049 ) + (  ( C3719*C3864 ) *C4049 )  ) - (  ( C4530*cnst885 ) /2.0 ) ;
    double gy100120 =  (  ( C3952*C3774 ) *C3787 ) + (  (  ( C3864*C3952 ) *C3719 ) - (  ( cnst885*C4528 ) /2.0 )  ) ;
    double C3794 = 2*C3774;
    double C3853 =  (  ( C3683*C3818 ) /C3680 ) + (  ( C3762+C3794 ) /C3694 ) ;
    double C3884 =  (  (  (  ( C3864*2 ) +C3866 ) /C3694 ) + (  ( C3683*C3880 ) /C3680 )  ) + (  (  (  (  ( be*C3853 ) *2 ) -C3794 ) *ae ) /C3680 ) ;
    double cnst912 = C3719*C3853;
    double gy100300 =  ( C3787* ( C3709*C3853 )  ) + (  (  ( cnst912*C4460 ) /2.0 ) + ( C3719* ( C3709*C3884 )  )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 6] += cc* (  ( cnst2*gy100120 ) + ( gy100300*cnst4 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 4] += cc* (  ( gy100102*cnst8 ) - (  ( gy100300*cnst6 ) + ( gy100120*cnst6 )  )  ) ;
    double gz100300 =  (  (  ( C3853*C3781 ) *C3710 ) + (  ( C3719*C3884 ) *C3710 )  ) + (  ( cnst912*C4549 ) /2.0 ) ;
    double gz100111 =  (  ( C4030* ( C4137*C3864 )  ) + ( C4030* ( C3941*C3774 )  )  ) - (  (  ( C4137*C3774 ) *C4079 ) /2.0 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 1] += cnst11*gz100111;
    double gy100111 =  (  ( C4262* ( C3933*C3864 )  ) - (  ( C3982* ( C4262*C3774 )  ) /2.0 )  ) + ( C4038* ( C3933*C3774 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 1] += cnst11*gy100111;
    double gz100120 =  (  (  ( C3932*C3774 ) *C4549 ) /2.0 ) + (  (  ( C3864*C3932 ) *C3710 ) + (  ( C3971*C3774 ) *C3710 )  ) ;
    gz[(Ai + 0) * matrix_size + Bi + 6] += cc* (  ( gz100120*cnst2 ) + ( gz100300*cnst4 )  ) ;
    gz[(Ai + 0) * matrix_size + Bi + 4] += cc* (  ( gz100102*cnst8 ) - (  ( gz100120*cnst6 ) + ( gz100300*cnst6 )  )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 3] += cc* (  ( gy001003- ( 1.5*gy001201 )  ) - ( 1.5*gy001021 )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 3] += cc* (  ( gx100003- ( gx100201*1.5 )  ) - ( gx100021*1.5 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 3] += cc* (  ( gy010003- ( 1.5*gy010201 )  ) - ( 1.5*gy010021 )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 3] += cc* (  ( gz001003- ( gz001201*1.5 )  ) - ( gz001021*1.5 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 3] += cc* (  ( gx001003- ( gx001201*1.5 )  ) - ( 1.5*gx001021 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 3] += cc* (  ( gy100003- ( 1.5*gy100201 )  ) - ( gy100021*1.5 )  ) ;
    gz[(Ai + 0) * matrix_size + Bi + 3] += cc* (  ( gz100003- ( gz100201*1.5 )  ) - ( gz100021*1.5 )  ) ;
    gz[(Ai + 1) * matrix_size + Bi + 3] += cc* (  ( gz010003- ( 1.5*gz010201 )  ) - ( gz010021*1.5 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 3] += cc* (  ( gx010003- ( gx010201*1.5 )  ) - ( gx010021*1.5 )  ) ;
}
