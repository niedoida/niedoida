/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d1_kit/gto_d1.hpp"
#include <cmath>

namespace {
    static const double Pi = M_PI;
}

void kinetic_gradient_21(
double ae , 
double be , 
double cc , 
double xAB , 
double yAB , 
double zAB , 
double* const gx , 
double* const gy , 
double* const gz , 
std::size_t matrix_size , 
std::size_t Ai , 
std::size_t Bi ) 
{
    double C6935 = xAB*ae;
    double C7078 = ae*zAB;
    double cnst0 = std::sqrt(0.75);
    double C6937 = std::pow(ae , 2);
    double C7049 = yAB*ae;
    double cnst2 = 6*ae;
    double cnst3 = cc* ( std::sqrt(3.0) ) ;
    double C6939 = be*zAB;
    double C6932 = be+ae;
    double C6952 = std::pow(C6932 , 2);
    double C6965 = C6952*2.;
    double C6961 = std::sqrt( ( Pi/C6932 ) );
    double C7083 = C7078*C6961;
    double C7077 = C7083/C6932;
    double cnst5 = C6961*C7077;
    double C7094 =  ( be*C7083 ) *2;
    double cnst6 = C6961*C6961;
    double C7054 = C7049*C6961;
    double C7048 = C7054/C6932;
    double cnst7 = C6961*C7048;
    double C7065 =  ( be*C7054 ) *2;
    double cnst8 = C6961*2;
    double C7107 =  ( C6961*C6935 ) /C6932;
    double cnst9 = C7107*C6961;
    double C7200 = C6939*C6961;
    double C6929 = - ( C7200/C6932 ) ;
    double cnst13 = C6929*C6961;
    double C6941 = C6929*ae;
    double C6955 = C6941*2;
    double cnst14 = C6961*C6955;
    double C6944 = 2.*C6932;
    double C6960 = 1/C6944;
    double C7009 =  ( ae- (  ( C6937* ( C6960+ ( std::pow( ( C6939/C6932 )  , 2) )  )  ) *2 )  ) *C6961;
    double C7102 =  (  ( ae*C7094 ) /C6952 ) + (  ( C7078*C7009 ) /C6932 ) ;
    double C7227 =  (  (  ( -C7094 ) *be ) /C6952 ) - (  ( C6939*C7009 ) /C6932 ) ;
    double C7199 = C7009/C6944;
    double C6975 = C6961/C6944;
    double C7220 = C6975+ (  (  ( std::pow(C6939 , 2) ) *C6961 ) /C6952 ) ;
    double C7255 =  ( ae*C7220 ) *2;
    double C7236 =  ( C7199- (  ( C7227*C6939 ) /C6932 )  ) + (  ( be* ( C7255-C6961 )  ) /C6932 ) ;
    double C7258 =  (  ( - ( C7200*2. )  ) /C6965 ) + (  ( C7078*C7220 ) /C6932 ) ;
    double cnst17 = C6961*C7258;
    double C7270 =  ( C7227+ ( C7078*C7236 )  ) + (  (  ( be*C7258 ) *ae ) *2 ) ;
    double cnst18 = C6961*C7220;
    double C7330 = C6975- (  ( C7078*C7200 ) /C6952 ) ;
    double C7336 =  (  (  ( C7078*C7227 ) /C6932 ) +C7199 ) + (  (  (  ( be*C7330 ) *ae ) *2 ) /C6932 ) ;
    double cnst20 = C6961*C7330;
    double C7096 =  ( - ( 2* ( be*C6961 )  )  ) /C6944;
    double C7393 = C7096- (  (  ( C6941*C6939 ) *2 ) /C6932 ) ;
    double C7419 = C7393*ae;
    double C7249 = C7419*2;
    double C7267 =  ( - ( 6* ( be*C7249 )  )  ) /C6944;
    double C7463 =  (  ( - ( 4* ( be*C6955 )  )  ) /C6944 ) - (  (  ( C7419*C6939 ) *2 ) /C6932 ) ;
    double C7464 = C7463*ae;
    double C7406 = C7464*2;
    double C7455 =  ( C7406- ( 6* ( C7463*be )  )  ) /C6944;
    double C7465 = -C7406;
    double C7261 =  (  ( C7464*C6939 ) *2 ) /C6932;
    double C7414 = C7261-C7267;
    double C7269 = C7267-C7261;
    double C7428 =  ( C7269*C6939 ) /C6932;
    double C7462 = C7428-C7455;
    double C7452 =  (  (  ( ae*C7249 ) *6. ) /C6944 ) + (  (  ( C7078*C7464 ) *2 ) /C6932 ) ;
    double C7458 =  (  (  ( C7464*6 ) +C7406 ) /C6944 ) + (  ( C7078*C7269 ) /C6932 ) ;
    double C7225 =  (  ( C6955- (  ( C6929*be ) *2 )  ) /C6944 ) - (  ( C7393*C6939 ) /C6932 ) ;
    double C7266 =  (  ( C7078*C7225 ) /C6932 ) + (  ( C7255+ ( C7393*2 )  ) /C6944 ) ;
    double C7331 =  (  ( C6941*4. ) /C6944 ) + (  ( C7078*C7393 ) /C6932 ) ;
    double C7132 =  (  ( C6961*ae ) *2. ) /C6944;
    double C7098 =  (  (  ( C6941*C7078 ) *2 ) /C6932 ) +C7132;
    double C6934 = xAB*be;
    double C6992 = C6975+ (  ( C6961* ( std::pow(C6934 , 2) )  ) /C6952 ) ;
    double cnst35 = C6961*C6992;
    double C7012 =  ( ae*C6992 ) *2;
    double C7010 =  ( ae- (  (  (  ( std::pow( ( C6934/C6932 )  , 2) ) +C6960 ) *C6937 ) *2 )  ) *C6961;
    double C7017 = C7010/C6944;
    double C6973 = C6934*C6961;
    double C7285 = C6975- (  ( C6973*C6935 ) /C6952 ) ;
    double cnst42 = C7285*C6961;
    double C7020 =  (  ( C6935*C6992 ) /C6932 ) + (  ( - ( C6973*2. )  ) /C6965 ) ;
    double cnst47 = C7020*C6961;
    double C6922 = - ( C6973/C6932 ) ;
    double C6930 = C6922*ae;
    double cnst51 = cnst8*C6930;
    double C6942 = C6930*2;
    double C7139 = C7132+ (  (  ( C6930*C6935 ) *2 ) /C6932 ) ;
    double C6976 = C7096- (  (  ( C6930*C6934 ) *2 ) /C6932 ) ;
    double C6988 = ae*C6976;
    double C7022 =  (  ( - ( 4* ( be*C6942 )  )  ) /C6944 ) - (  ( 2* ( C6988*C6934 )  ) /C6932 ) ;
    double C7028 = C7022*ae;
    double C7389 = C7028*2;
    double C7404 = -C7389;
    double C7038 =  (  ( C7028*C6934 ) *2 ) /C6932;
    double C7449 =  ( C7389- (  ( C7022*be ) *6 )  ) /C6944;
    double C6998 = C6988*2;
    double C7453 =  (  (  ( C7028*C6935 ) *2 ) /C6932 ) + (  ( 6.* ( C6998*ae )  ) /C6944 ) ;
    double C7029 =  ( - ( 6* ( C6998*be )  )  ) /C6944;
    double C7040 = C7029-C7038;
    double C7456 =  (  ( C7389+ ( 6*C7028 )  ) /C6944 ) + (  ( C6935*C7040 ) /C6932 ) ;
    double C7418 =  ( C6934*C7040 ) /C6932;
    double C7460 = C7418-C7449;
    double C7411 = C7038-C7029;
    double C7004 =  (  ( C6942- (  ( be*C6922 ) *2 )  ) /C6944 ) - (  ( C6934*C6976 ) /C6932 ) ;
    double C7027 =  (  ( C7012+ ( 2*C6976 )  ) /C6944 ) + (  ( C6935*C7004 ) /C6932 ) ;
    double C7283 =  (  ( C6935*C6976 ) /C6932 ) + (  ( C6930*4. ) /C6944 ) ;
    double cnst97 = C6961*C6922;
    double C7135 =  ( C6973*ae ) *2;
    double C7152 =  (  ( C7135*ae ) /C6952 ) + (  ( C7010*C6935 ) /C6932 ) ;
    double C7030 =  (  (  ( -C7135 ) *be ) /C6952 ) - (  ( C7010*C6934 ) /C6932 ) ;
    double C7290 =  ( C7017+ (  ( C7030*C6935 ) /C6932 )  ) + (  (  (  ( C7285*be ) *ae ) *2 ) /C6932 ) ;
    double C7041 =  ( C7017- (  ( C7030*C6934 ) /C6932 )  ) + (  (  ( C7012-C6961 ) *be ) /C6932 ) ;
    double C7044 =  (  (  ( C7020*be ) *ae ) *2 ) + (  ( C7041*C6935 ) +C7030 ) ;
    double cnst115 = be*4;
    double cnst120 = cnst2* (  (  ( C6998- ( cnst115*C6976 )  ) /C6944 ) - (  ( C7022*C6934 ) /C6932 )  ) ;
    double cnst123 =  (  (  ( C7040*2 ) +cnst120 ) /C6944 ) + (  ( C6935* ( C7449-C7418 )  ) /C6932 ) ;
    double cnst130 = cnst2* (  (  ( C7249- ( C7393*cnst115 )  ) /C6944 ) - (  ( C7463*C6939 ) /C6932 )  ) ;
    double cnst133 =  (  (  ( C7269*2 ) +cnst130 ) /C6944 ) + (  ( C7078* ( C7455-C7428 )  ) /C6932 ) ;
    double C6938 = be*yAB;
    double C7111 = C6961*C6938;
    double C6927 = - ( C7111/C6932 ) ;
    double cnst156 = C6927*C6961;
    double cnst164 =  ( C6927*C6942 ) *C7336;
    double C6940 = C6927*ae;
    double C7069 = C7132+ (  (  ( C7049*C6940 ) *2 ) /C6932 ) ;
    double C6954 = C6940*2;
    double cnst182 = C6929* ( C6954*C7290 ) ;
    double C7070 = C7096- (  (  ( C6940*C6938 ) *2 ) /C6932 ) ;
    double C7148 =  (  ( C6954- (  ( C6927*be ) *2 )  ) /C6944 ) - (  ( C7070*C6938 ) /C6932 ) ;
    double C7305 =  (  ( C7070*C7049 ) /C6932 ) + (  ( C6940*4. ) /C6944 ) ;
    double C7072 = C7070*ae;
    double C7149 =  (  ( - ( 4* ( be*C6954 )  )  ) /C6944 ) - (  (  ( C6938*C7072 ) *2 ) /C6932 ) ;
    double C7153 = ae*C7149;
    double C7183 =  (  ( C7153*C6938 ) *2 ) /C6932;
    double C7401 = C7153*2;
    double C7392 = -C7401;
    double gy002100 =  (  ( C7220* ( C7152*C6954 )  ) + (  (  ( C7107*C7220 ) *C7392 ) /2.0 )  ) + (  ( C7107*C6954 ) *C7236 ) ;
    double gy101100 =  (  (  ( C7392* ( C6929*C7285 )  ) /2.0 ) +cnst182 ) + ( C7227* ( C7285*C6954 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 0] += cnst3*gy101100;
    double gy101001 =  (  (  (  ( C6922*C7330 ) *C7392 ) /2.0 ) + (  ( C7030*C6954 ) *C7330 )  ) +cnst164;
    gy[(Ai + 3) * matrix_size + Bi + 2] += gy101001*cnst3;
    double gy200001 =  (  (  ( C6954*C7041 ) *C7077 ) + (  (  ( C6992*C7077 ) *C7392 ) /2.0 )  ) + (  ( C6954*C6992 ) *C7102 ) ;
    double C7454 =  ( C7401- (  ( be*C7149 ) *6 )  ) /C6944;
    double C7171 = C7072*2;
    double C7189 =  ( - ( 6* ( C7171*be )  )  ) /C6944;
    double C7191 = C7189-C7183;
    double C7457 =  (  (  ( 6*C7153 ) +C7401 ) /C6944 ) + (  ( C7049*C7191 ) /C6932 ) ;
    double gy110010 =  ( C7009* ( C7305*C6922 )  ) + (  (  ( C7305*C7030 ) *C6961 ) - (  ( cnst97*C7457 ) /2.0 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 1] += gy110010*cnst3;
    double gy011010 =  (  ( C7305*C6961 ) *C7227 ) + (  ( C6929* ( C7305*C7010 )  ) - (  ( cnst13*C7457 ) /2.0 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 1] += gy011010*cnst3;
    double C7426 =  ( C6938*C7191 ) /C6932;
    double C7461 = C7426-C7454;
    double gy020001 =  (  (  ( cnst5*C7461 ) /2.0 ) + (  ( C7010*C7148 ) *C7077 )  ) + (  ( C7148*C6961 ) *C7102 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 2] += cc* (  ( gy200001*cnst0 ) - ( cnst0*gy020001 )  ) ;
    double gy020100 =  (  (  ( C7152*C7148 ) *C6961 ) + (  ( cnst9*C7461 ) /2.0 )  ) + ( C7009* ( C7107*C7148 )  ) ;
    double C7410 = C7183-C7189;
    double gy110001 =  (  (  (  ( C6922*C7077 ) *C7410 ) /2.0 ) + (  ( C7030*C7070 ) *C7077 )  ) + ( C7102* ( C7070*C6922 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 2] += gy110001*cnst3;
    double C7451 =  (  ( 6.* ( C7171*ae )  ) /C6944 ) + (  (  ( C7153*C7049 ) *2 ) /C6932 ) ;
    double gy101010 =  (  ( C6922*C7069 ) *C7227 ) + (  ( C6929* ( C7030*C7069 )  ) - (  (  ( C6929*C6922 ) *C7451 ) /2.0 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 1] += gy101010*cnst3;
    double gy200010 =  (  ( C6961* ( C7041*C7069 )  ) - (  ( cnst35*C7451 ) /2.0 )  ) + ( C7009* ( C6992*C7069 )  ) ;
    double gy002010 =  (  (  ( C7010*C7069 ) *C7220 ) - (  ( cnst18*C7451 ) /2.0 )  ) + (  ( C6961*C7069 ) *C7236 ) ;
    double cnst288 = cnst2* (  (  ( C7171- ( C7070*cnst115 )  ) /C6944 ) - (  ( C6938*C7149 ) /C6932 )  ) ;
    double cnst291 =  (  (  ( C7454-C7426 ) *C7049 ) /C6932 ) + (  ( cnst288+ ( C7191*2 )  ) /C6944 ) ;
    double gy011001 =  (  (  ( C7010*C7070 ) *C7330 ) + (  ( cnst20*C7410 ) /2.0 )  ) + (  ( C7070*C6961 ) *C7336 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 2] += gy011001*cnst3;
    double gy011100 =  (  (  ( C7152*C7070 ) *C6929 ) + (  ( C7410* ( C7107*C6929 )  ) /2.0 )  ) + ( C7227* ( C7107*C7070 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 0] += gy011100*cnst3;
    double gy110100 =  (  (  ( C7070*C7290 ) *C6961 ) + (  ( C7410*cnst42 ) /2.0 )  ) + ( C7009* ( C7285*C7070 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 0] += gy110100*cnst3;
    double cnst302 = cnst8*C6940;
    double gy200100 =  (  (  ( C7392*cnst47 ) /2.0 ) + (  ( cnst302*C7044 ) /C6932 )  ) + ( C7009* ( C7020*C6954 )  ) ;
    gy[(Ai + 4) * matrix_size + Bi + 0] += cc* (  ( cnst0*gy200100 ) - ( gy020100*cnst0 )  ) ;
    double gy002001 =  (  (  ( C7010*C6954 ) *C7258 ) + (  ( C7392*cnst17 ) /2.0 )  ) + (  ( cnst302*C7270 ) /C6932 ) ;
    double C7304 = C6975- (  ( C7049*C7111 ) /C6952 ) ;
    double cnst321 = C7304*C6961;
    double C7006 =  ( ae- (  (  (  ( std::pow( ( C6938/C6932 )  , 2) ) +C6960 ) *C6937 ) *2 )  ) *C6961;
    double gz101100 =  (  ( C7393* ( C7285*C7006 )  ) + ( C7393* ( C6961*C7290 )  )  ) + (  ( C7414*cnst42 ) /2.0 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 0] += gz101100*cnst3;
    double gz002100 =  (  (  ( C7107*C7006 ) *C7225 ) + (  ( C7152*C6961 ) *C7225 )  ) + (  ( cnst9*C7462 ) /2.0 ) ;
    double gz200001 =  (  ( C7098* ( C7041*C6961 )  ) + ( C7098* ( C7006*C6992 )  )  ) - (  ( cnst35*C7452 ) /2.0 ) ;
    double gx200100 =  (  (  ( C7006*C7027 ) *C6961 ) - (  ( cnst123* ( std::pow(C6961 , 2) )  ) /2.0 )  ) + (  ( C6961*C7027 ) *C7009 ) ;
    double gx200001 =  (  ( C6961*C7004 ) *C7102 ) + (  (  ( C7006*C7004 ) *C7077 ) + (  ( cnst5*C7460 ) /2.0 )  ) ;
    double gz200100 =  (  (  ( cnst14*C7044 ) /C6932 ) + (  ( C7020*C7006 ) *C6955 )  ) + (  ( C7465*cnst47 ) /2.0 ) ;
    double gx002100 =  (  ( C7220* ( C7006*C7139 )  ) - (  ( cnst18*C7453 ) /2.0 )  ) + (  ( C6961*C7139 ) *C7236 ) ;
    double gz101001 =  (  ( C7331* ( C7006*C6922 )  ) + ( C7331* ( C7030*C6961 )  )  ) - (  ( cnst97*C7458 ) /2.0 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 2] += gz101001*cnst3;
    double gx002001 =  (  (  ( C7404*cnst17 ) /2.0 ) + (  ( C6942*C7006 ) *C7258 )  ) + (  ( cnst51*C7270 ) /C6932 ) ;
    double gx101100 =  (  ( C6929* ( C7006*C7283 )  ) - (  ( cnst13*C7456 ) /2.0 )  ) + (  ( C6961*C7283 ) *C7227 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 0] += gx101100*cnst3;
    double C7073 =  (  ( C7065*ae ) /C6952 ) + (  ( C7049*C7006 ) /C6932 ) ;
    double gz101010 =  (  ( C7393* ( C6922*C7073 )  ) + ( C7393* ( C7030*C7048 )  )  ) + (  ( C7414* ( C6922*C7048 )  ) /2.0 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 1] += gz101010*cnst3;
    double gz200010 =  (  (  ( C7041*C7048 ) *C6955 ) + (  ( C6992*C7073 ) *C6955 )  ) + (  ( C7465* ( C6992*C7048 )  ) /2.0 ) ;
    double gx002010 =  (  ( C6942*C7048 ) *C7236 ) + (  ( C7220* ( C6942*C7073 )  ) + (  ( C7404* ( C7220*C7048 )  ) /2.0 )  ) ;
    double gx101010 =  (  ( C6929* ( C7073*C6976 )  ) + (  ( C7411* ( C6929*C7048 )  ) /2.0 )  ) + ( C7227* ( C7048*C6976 )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 1] += gx101010*cnst3;
    double gx200010 =  (  (  ( C7004*C7073 ) *C6961 ) + (  ( cnst7*C7460 ) /2.0 )  ) + (  ( C7004*C7048 ) *C7009 ) ;
    double gz002010 =  (  ( cnst7*C7462 ) /2.0 ) + (  (  ( C6961*C7073 ) *C7225 ) + (  ( C7010*C7048 ) *C7225 )  ) ;
    double C7150 =  (  (  ( -C7065 ) *be ) /C6952 ) - (  ( C7006*C6938 ) /C6932 ) ;
    double gz110100 =  (  (  ( C7285*C7150 ) *C6955 ) +cnst182 ) + (  ( C7465* ( C6927*C7285 )  ) /2.0 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 0] += gz110100*cnst3;
    double gx110001 =  (  (  ( C7150*C6976 ) *C7077 ) + (  ( C7411* ( C6927*C7077 )  ) /2.0 )  ) + (  ( C6927*C6976 ) *C7102 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 2] += gx110001*cnst3;
    double gx110100 =  (  (  ( C7283*C7150 ) *C6961 ) - (  ( C7456*cnst156 ) /2.0 )  ) + (  ( C6927*C7283 ) *C7009 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 0] += gx110100*cnst3;
    double gx011001 =  (  ( C7330* ( C6942*C7150 )  ) + (  (  ( C6927*C7330 ) *C7404 ) /2.0 )  ) +cnst164;
    gx[(Ai + 1) * matrix_size + Bi + 2] += gx011001*cnst3;
    double gx011100 =  (  ( C6929* ( C7139*C7150 )  ) - (  (  ( C6927*C6929 ) *C7453 ) /2.0 )  ) + ( C7227* ( C6927*C7139 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 0] += gx011100*cnst3;
    double gz011100 =  (  ( C7393* ( C7152*C6927 )  ) + ( C7393* ( C7107*C7150 )  )  ) + (  (  ( C6927*C7107 ) *C7414 ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 0] += gz011100*cnst3;
    double gz011001 =  (  ( C7331* ( C6961*C7150 )  ) + (  ( C6927*C7010 ) *C7331 )  ) - (  ( C7458*cnst156 ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 2] += gz011001*cnst3;
    double gz110001 =  (  ( C7098* ( C6927*C7030 )  ) + (  ( C6922*C7150 ) *C7098 )  ) - (  (  ( C6927*C6922 ) *C7452 ) /2.0 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 2] += gz110001*cnst3;
    double gx101001 =  (  ( C6961*C6976 ) *C7336 ) + (  (  ( C7411*cnst20 ) /2.0 ) + ( C7330* ( C7006*C6976 )  )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 2] += gx101001*cnst3;
    double C7110 = C7006/C6944;
    double C7310 =  (  (  (  ( be*C7304 ) *ae ) *2 ) /C6932 ) + ( C7110+ (  ( C7049*C7150 ) /C6932 )  ) ;
    double cnst417 = C6929* ( C6942*C7310 ) ;
    double gx011010 =  ( C7227* ( C7304*C6942 )  ) + (  (  ( C7404* ( C6929*C7304 )  ) /2.0 ) +cnst417 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 1] += gx011010*cnst3;
    double gz110010 =  (  (  ( C7030*C7304 ) *C6955 ) +cnst417 ) + (  (  ( C7304*C6922 ) *C7465 ) /2.0 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 1] += gz110010*cnst3;
    double gx110010 =  (  (  ( C6976*C7310 ) *C6961 ) + (  ( C7411*cnst321 ) /2.0 )  ) + ( C7009* ( C7304*C6976 )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 1] += gx110010*cnst3;
    double gz011010 =  (  ( C7393* ( C7010*C7304 )  ) + (  ( C6961*C7310 ) *C7393 )  ) + (  ( C7414*cnst321 ) /2.0 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 1] += cnst3*gz011010;
    double gz002001 =  (  (  ( C7010*C6961 ) *C7266 ) + (  ( C6961*C7006 ) *C7266 )  ) - (  ( cnst133*cnst6 ) /2.0 ) ;
    double C7141 = C6975+ (  (  ( std::pow(C6938 , 2) ) *C6961 ) /C6952 ) ;
    double cnst432 = C7141*C6961;
    double C7177 =  ( C7141*ae ) *2;
    double C7188 =  (  ( C7148*C7049 ) /C6932 ) + (  (  ( C7070*2 ) +C7177 ) /C6944 ) ;
    double gy020010 =  (  ( C6961* ( C7010*C7188 )  ) - (  ( cnst291*cnst6 ) /2.0 )  ) + (  ( C6961*C7188 ) *C7009 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 1] += cc* (  ( cnst0*gy200010 ) - ( gy020010*cnst0 )  ) ;
    double C7160 =  (  ( be* ( C7177-C6961 )  ) /C6932 ) + ( C7110- (  ( C6938*C7150 ) /C6932 )  ) ;
    double gx020100 =  (  (  ( C7139*C7160 ) *C6961 ) - (  ( cnst432*C7453 ) /2.0 )  ) + ( C7009* ( C7141*C7139 )  ) ;
    gx[(Ai + 4) * matrix_size + Bi + 0] += cc* (  ( cnst0*gx200100 ) - ( cnst0*gx020100 )  ) ;
    double gz020100 =  (  ( C7465* ( C7141*C7107 )  ) /2.0 ) + (  (  ( C7152*C7141 ) *C6955 ) + ( C6955* ( C7107*C7160 )  )  ) ;
    gz[(Ai + 4) * matrix_size + Bi + 0] += cc* (  ( gz200100*cnst0 ) - ( gz020100*cnst0 )  ) ;
    double C7180 =  (  ( - ( 2.*C7111 )  ) /C6965 ) + (  ( C7141*C7049 ) /C6932 ) ;
    double cnst466 = C6961*C7180;
    double C7192 =  ( C7150+ ( C7049*C7160 )  ) + (  (  ( be*C7180 ) *ae ) *2 ) ;
    double gx020010 =  ( C7009* ( C6942*C7180 )  ) + (  (  ( C7404*cnst466 ) /2.0 ) + (  ( cnst51*C7192 ) /C6932 )  ) ;
    gx[(Ai + 4) * matrix_size + Bi + 1] += cc* (  ( cnst0*gx200010 ) - ( cnst0*gx020010 )  ) ;
    double gz020010 =  (  ( C7465*cnst466 ) /2.0 ) + (  (  ( C7010*C7180 ) *C6955 ) + (  ( cnst14*C7192 ) /C6932 )  ) ;
    gz[(Ai + 4) * matrix_size + Bi + 1] += cc* (  ( gz200010*cnst0 ) - ( gz020010*cnst0 )  ) ;
    double gx020001 =  (  ( C7141*C6942 ) *C7102 ) + (  (  ( C6942*C7160 ) *C7077 ) + (  ( C7404* ( C7141*C7077 )  ) /2.0 )  ) ;
    gx[(Ai + 4) * matrix_size + Bi + 2] += cc* (  ( cnst0*gx200001 ) - ( cnst0*gx020001 )  ) ;
    double gz020001 =  (  (  ( C6961*C7160 ) *C7098 ) + ( C7098* ( C7141*C7010 )  )  ) - (  ( C7452*cnst432 ) /2.0 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 2] += cc* (  ( gz200001*cnst0 ) - ( cnst0*gz020001 )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 1] += cc* (  (  ( - ( 0.5*gz200010 )  ) - ( 0.5*gz020010 )  ) +gz002010 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 1] += cc* ( gy002010+ (  ( - ( 0.5*gy200010 )  ) - ( gy020010*0.5 )  )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 0] += cc* ( gy002100+ (  ( - ( 0.5*gy200100 )  ) - ( 0.5*gy020100 )  )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 0] += cc* (  (  ( - ( 0.5*gx200100 )  ) - ( 0.5*gx020100 )  ) +gx002100 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 0] += cc* ( gz002100+ (  ( - ( gz200100*0.5 )  ) - ( 0.5*gz020100 )  )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 2] += cc* (  (  ( - ( 0.5*gy200001 )  ) - ( 0.5*gy020001 )  ) +gy002001 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 2] += cc* (  (  ( - ( 0.5*gx200001 )  ) - ( 0.5*gx020001 )  ) +gx002001 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 2] +=  (  (  ( - ( 0.5*gz200001 )  ) - ( 0.5*gz020001 )  ) +gz002001 ) *cc;
    gx[(Ai + 2) * matrix_size + Bi + 1] +=  (  (  ( - ( 0.5*gx200010 )  ) - ( 0.5*gx020010 )  ) +gx002010 ) *cc;
}
