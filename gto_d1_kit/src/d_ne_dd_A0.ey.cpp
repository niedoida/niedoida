/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d1_kit/gto_d1.hpp"
#include <cmath>

namespace {
    static const double Pi = M_PI;
}

void vne_gradient_22_1(
double ae , 
double be , 
double xA , 
double yA , 
double zA , 
double xB , 
double yB , 
double zB , 
double xC , 
double yC , 
double zC , 
const double* bs , 
double* const gx , 
double* const gy , 
double* const gz , 
std::size_t matrix_size , 
std::size_t Ai , 
std::size_t Bi ) 
{
    double cnst0 = std::sqrt(0.1875);
    double C580 = bs[3];
    double C585 = bs[5];
    double C584 = bs[4];
    double C572 = bs[1];
    double C577 = bs[2];
    double C569 = bs[0];
    double cnst1 = std::sqrt(0.75);
    double C570 = xA-xB;
    double cnst2 = std::sqrt(0.5625);
    double cnst3 = std::sqrt(2.25);
    double C574 = zA-zB;
    double cnst4 = std::sqrt(9.);
    double C573 = yA-yB;
    double cnst5 = std::sqrt(3.0);
    double C16089 = be*C573;
    double C16014 = C570*be;
    double C571 = be*ae;
    double C645 = C571* (  ( std::pow(C574 , 2) ) + (  ( std::pow(C570 , 2) ) + ( std::pow(C573 , 2) )  )  ) ;
    double C594 = C570*C571;
    double C606 = C571*C573;
    double C608 = C574*C571;
    double C16146 = C574*be;
    double C563 = be+ae;
    double C618 =  (  ( be*yB ) + ( ae*yA )  ) /C563;
    double C635 = C618-yC;
    double C646 = ae*C635;
    double C1253 = C618-yB;
    double C674 = std::exp( ( - ( C645/C563 )  ) );
    double C16025 = C674* ( Pi*2. ) ;
    double C16376 = C584*C16025;
    double C16733 =  (  ( C16376/C563 ) *ae ) /C563;
    double C16027 = C16025*C572;
    double C16034 = C16027/C563;
    double C598 =  ( C16034*ae ) /C563;
    double C16028 = C577*C16025;
    double C16298 = C16028/C563;
    double C601 =  ( C16298*ae ) /C563;
    double C16119 =  (  ( - (  ( C16027*C16089 ) /C563 )  ) /C563 ) - (  ( C16028*C635 ) /C563 ) ;
    double C16427 = C16119+ (  ( C573*C16027 ) /C563 ) ;
    double C1278 =  ( C16427*ae ) /C563;
    double C16026 = C569*C16025;
    double C16111 =  (  ( - (  ( C16089*C16026 ) /C563 )  ) /C563 ) - (  ( C16027*C635 ) /C563 ) ;
    double C16351 = C16111-C16119;
    double C16426 = C16111+ (  ( C573*C16026 ) /C563 ) ;
    double C1275 =  ( C16426*ae ) /C563;
    double C16033 = C16026/C563;
    double C593 =  ( C16033*ae ) /C563;
    double C16369 = C16025*C580;
    double C16135 =  (  ( - (  ( C16028*C16089 ) /C563 )  ) /C563 ) - (  ( C16369*C635 ) /C563 ) ;
    double C16430 = C16135+ (  ( C16028*C573 ) /C563 ) ;
    double C1281 =  ( C16430*ae ) /C563;
    double C557 = C16369/C563;
    double C605 =  ( C557*ae ) /C563;
    double C16455 =  (  ( - (  ( C16369*C16089 ) /C563 )  ) /C563 ) - (  ( C635*C16376 ) /C563 ) ;
    double C16461 =  (  ( C16369*C573 ) /C563 ) +C16455;
    double C16748 =  ( C16461*ae ) /C563;
    double C675 = C674* ( Pi*4 ) ;
    double C682 = C675* (  ( C646*C580 ) + (  ( C606*C577 ) /C563 )  ) ;
    double C16884 =  (  (  ( C584*C606 ) /C563 ) + ( C585*C646 )  ) *C675;
    double C683 = C675* (  (  ( C606*C580 ) /C563 ) + ( C584*C646 )  ) ;
    double C1323 =  (  ( C601- (  ( C1253*C682 ) /C563 )  ) -C605 ) + (  ( C683*C635 ) /C563 ) ;
    double C16927 =  (  ( C16884*C635 ) /C563 ) + (  ( C605- (  ( C1253*C683 ) /C563 )  ) -C16733 ) ;
    double C681 = C675* (  (  ( C569*C606 ) /C563 ) + ( C646*C572 )  ) ;
    double C680 =  (  (  ( C606*C572 ) /C563 ) + ( C577*C646 )  ) *C675;
    double C1321 =  (  ( C593- (  ( C681*C1253 ) /C563 )  ) -C598 ) + (  ( C680*C635 ) /C563 ) ;
    double C1322 =  (  ( C598- (  ( C680*C1253 ) /C563 )  ) -C601 ) + (  ( C635*C682 ) /C563 ) ;
    double C4331 = C1322/C563;
    double C602 = C563*2;
    double C16852 =  ( - ( C683/C563 )  ) /C602;
    double C749 =  ( - ( C680/C563 )  ) /C602;
    double C751 =  ( - ( C682/C563 )  ) /C602;
    double C2383 = C1322/C602;
    double C614 =  ( std::pow(C563 , 2) ) *2;
    double C16490 = C682/C614;
    double C16963 =  (  (  (  (  ( C1253*C1323 ) +C1281 ) -C16490 ) -C16748 ) - ( C635*C16927 )  ) -C16852;
    double C704 = C680/C614;
    double C1355 =  (  (  (  ( C1278+ ( C1253*C1322 )  ) -C704 ) -C1281 ) - ( C1323*C635 )  ) -C751;
    double C700 = C681/C614;
    double C1354 =  (  (  (  ( C1275+ ( C1321*C1253 )  ) -C700 ) -C1278 ) - ( C1322*C635 )  ) -C749;
    double C16016 = C563*2.;
    double C16417 =  ( C16034-C16298 ) /C16016;
    double C16246 = C16417- (  ( C16135*C635 ) + (  ( C16119*C16089 ) /C563 )  ) ;
    double C16247 = C16246+ ( C16119*C573 ) ;
    double C1244 =  ( C16427*C573 ) +C16247;
    double C1272 =  ( C1244*ae ) /C563;
    double C16422 =  ( C16298-C557 ) /C16016;
    double C16473 = C16422- (  (  ( C16135*C16089 ) /C563 ) + ( C16455*C635 )  ) ;
    double C1246 =  (  ( C16135*C573 ) +C16473 ) + ( C16430*C573 ) ;
    double C16743 =  ( C1246*ae ) /C563;
    double C17050 =  (  (  ( C4331+ ( C1272+ ( C1355*C1253 )  )  ) -C16743 ) - ( C16963*C635 )  ) - ( C1323/C563 ) ;
    double cnst36 =  (  (  ( C16119-C16135 ) *2 ) /C16016 ) - (  (  ( C16246*C16089 ) /C563 ) + ( C16473*C635 )  ) ;
    double C16797 =  (  (  (  ( C573*C16247 ) + (  ( C16246*C573 ) +cnst36 )  ) + ( C1244*C573 )  ) *ae ) /C563;
    double C16042 =  ( C16033-C16034 ) /C16016;
    double C16238 = C16042- (  ( C16119*C635 ) + (  ( C16111*C16089 ) /C563 )  ) ;
    double C16239 =  ( C16111*C573 ) +C16238;
    double C1243 = C16239+ ( C16426*C573 ) ;
    double C1267 =  ( C1243*ae ) /C563;
    double C4345 =  (  (  (  ( C1354*C1253 ) +C1267 ) + ( C1321/C563 )  ) -C1272 ) - ( C1355*C635 ) ;
    double C4346 = C4345-C4331;
    double C16799 =  ( C4346-C1243 ) - ( C1354*C573 ) ;
    double cnst50 =  (  ( C16351*2 ) /C16016 ) - (  ( C16246*C635 ) + (  ( C16089*C16238 ) /C563 )  ) ;
    double C4323 =  ( cnst50+ ( C573*C16238 )  ) + ( C16239*C573 ) ;
    double C4321 = C4323+ ( C1243*C573 ) ;
    double C16796 =  ( C4321*ae ) /C563;
    double cnst55 =  (  (  (  ( C1253*C4346 ) +C16796 ) + (  ( C1354*3 ) /C602 )  ) -C16797 ) - ( C17050*C635 ) ;
    double gy020020 =  (  (  (  ( cnst55- (  ( C1355*3 ) /C602 )  ) -C4321 ) - ( C573*C4346 )  ) -C4323 ) - ( C573*C16799 ) ;
    double cnst61 = cnst0*gy020020;
    double C610 =  (  ( ae*xA ) + ( be*xB )  ) /C563;
    double C629 = C610-xC;
    double C16454 =  (  ( - (  ( C16369*C16014 ) /C563 )  ) /C563 ) - (  ( C629*C16376 ) /C563 ) ;
    double C16459 = C16454+ (  ( C570*C16369 ) /C563 ) ;
    double C16045 =  (  ( - (  ( C16014*C16026 ) /C563 )  ) /C563 ) - (  ( C16027*C629 ) /C563 ) ;
    double C16420 = C16045+ (  ( C570*C16026 ) /C563 ) ;
    double C16452 =  (  ( - (  ( C16028*C16014 ) /C563 )  ) /C563 ) - (  ( C16369*C629 ) /C563 ) ;
    double C16471 = C16422- (  ( C16454*C629 ) + (  ( C16452*C16014 ) /C563 )  ) ;
    double C556 = C16452+ (  ( C570*C16028 ) /C563 ) ;
    double C16472 =  ( C16459*C635 ) + (  ( C16089*C556 ) /C563 ) ;
    double C16479 =  ( C573*C556 ) -C16472;
    double C604 =  ( ae*C556 ) /C563;
    double C559 =  ( C16471+ ( C570*C16452 )  ) + ( C570*C556 ) ;
    double C644 = ae*C629;
    double C677 =  (  (  ( C594*C572 ) /C563 ) + ( C644*C577 )  ) *C675;
    double C694 = C677/C614;
    double C744 =  ( - ( C677/C563 )  ) /C602;
    double C676 =  (  ( C644*C572 ) + (  ( C569*C594 ) /C563 )  ) *C675;
    double C1299 =  (  ( C677*C635 ) /C563 ) - (  ( C676*C1253 ) /C563 ) ;
    double C690 = C676/C614;
    double C679 = C675* (  (  ( C594*C580 ) /C563 ) + ( C584*C644 )  ) ;
    double C16850 =  ( - ( C679/C563 )  ) /C602;
    double C678 = C675* (  (  ( C577*C594 ) /C563 ) + ( C644*C580 )  ) ;
    double C1300 =  (  ( C678*C635 ) /C563 ) - (  ( C677*C1253 ) /C563 ) ;
    double C4327 = C1300/C563;
    double C1334 =  (  (  ( C1253*C1299 ) -C690 ) - ( C1300*C635 )  ) -C744;
    double C2377 = C1300/C602;
    double C746 =  ( - ( C678/C563 )  ) /C602;
    double C1301 =  (  ( C679*C635 ) /C563 ) - (  ( C678*C1253 ) /C563 ) ;
    double C1335 =  (  (  ( C1300*C1253 ) -C694 ) - ( C1301*C635 )  ) -C746;
    double C4342 =  (  (  ( C1334*C1253 ) + ( C1299/C563 )  ) - ( C1335*C635 )  ) -C4327;
    double C16795 = C4342- ( C1334*C573 ) ;
    double C16485 = C678/C614;
    double C16883 = C675* (  ( C644*C585 ) + (  ( C584*C594 ) /C563 )  ) ;
    double C16926 =  (  ( C16883*C635 ) /C563 ) - (  ( C679*C1253 ) /C563 ) ;
    double C16962 =  (  (  ( C1301*C1253 ) -C16485 ) - ( C16926*C635 )  ) -C16850;
    double C17049 =  (  ( C4327+ ( C1335*C1253 )  ) - ( C16962*C635 )  ) - ( C1301/C563 ) ;
    double cnst85 =  (  (  ( C4342*C1253 ) + (  ( C1334*3 ) /C602 )  ) - ( C17049*C635 )  ) - (  ( 3*C1335 ) /C602 ) ;
    double gx020020 =  ( cnst85- ( C4342*C573 )  ) - ( C16795*C573 ) ;
    double cnst89 = cnst0*gx020020;
    double C16046 =  (  ( - (  ( C16027*C16014 ) /C563 )  ) /C563 ) - (  ( C16028*C629 ) /C563 ) ;
    double C16421 = C16046+ (  ( C570*C16027 ) /C563 ) ;
    double C16127 =  ( C556*C635 ) + (  ( C16421*C16089 ) /C563 ) ;
    double C16103 =  (  ( C16420*C16089 ) /C563 ) + ( C16421*C635 ) ;
    double C16380 =  ( C16420*C573 ) -C16103;
    double C16386 =  ( C16421*C573 ) -C16127;
    double C2392 =  ( C16386*ae ) /C563;
    double C600 =  ( C16421*ae ) /C563;
    double C16379 =  ( C16420-C16421 ) /C16016;
    double C5179 =  (  (  (  ( C16089*C16103 ) /C563 ) + ( C16127*C635 )  ) +C16379 ) - ( C573*C16103 ) ;
    double C1242 = C5179+ ( C16380*C573 ) ;
    double C16385 =  ( C16421-C556 ) /C16016;
    double cnst111 =  ( C16385+ (  (  ( C16127*C16089 ) /C563 ) + ( C16472*C635 )  )  ) - ( C16127*C573 ) ;
    double C16052 = C16042- (  ( C16046*C629 ) + (  ( C16045*C16014 ) /C563 )  ) ;
    double C16053 = C16052+ ( C16045*C570 ) ;
    double C16453 = C16053+ ( C16420*C570 ) ;
    double C16296 = C16045-C16046;
    double C16391 = C16296/C16016;
    double C16431 =  ( C16452*C635 ) + (  ( C16046*C16089 ) /C563 ) ;
    double C16140 =  ( C16046*C635 ) + (  ( C16045*C16089 ) /C563 ) ;
    double cnst132 =  (  (  ( C16431*C635 ) + (  ( C16140*C16089 ) /C563 )  ) +C16391 ) - ( C16140*C573 ) ;
    double C16230 =  ( C16045*C573 ) -C16140;
    double C16470 = C16417- (  (  ( C16046*C16014 ) /C563 ) + ( C16452*C629 )  ) ;
    double cnst140 =  (  ( C16296*2 ) /C16016 ) - (  (  ( C16052*C16014 ) /C563 ) + ( C629*C16470 )  ) ;
    double C562 =  ( C570*C16053 ) + (  ( C570*C16052 ) +cnst140 ) ;
    double C548 =  ( C570*C16453 ) +C562;
    double cnst147 =  (  (  ( C16046-C16452 ) *2 ) /C16016 ) - (  (  ( C16014*C16470 ) /C563 ) + ( C16471*C629 )  ) ;
    double C16082 =  ( C16046*C570 ) +C16470;
    double C555 = C16082+ ( C570*C16421 ) ;
    double C16767 =  (  (  ( C573*C555 ) - (  ( C635*C559 ) + (  ( C555*C16089 ) /C563 )  )  ) *ae ) /C563;
    double cnst156 =  (  ( C16453*C16089 ) /C563 ) + ( C555*C635 ) ;
    double C3811 = -cnst156;
    double C2364 =  ( C573*C16453 ) -cnst156;
    double C603 =  ( C555*ae ) /C563;
    double cnst164 =  ( ae* (  ( C570*C555 ) + (  ( C570*C16082 ) + (  ( C570*C16470 ) +cnst147 )  )  )  ) /C563;
    double C627 = C610-xB;
    double C1358 =  ( C1354*C627 ) - ( C1355*C629 ) ;
    double C2395 =  ( C627*C1322 ) - ( C629*C1323 ) ;
    double C772 =  (  ( C593- (  ( C627*C676 ) /C563 )  ) -C598 ) + (  ( C677*C629 ) /C563 ) ;
    double C1353 =  (  (  ( C1334*C627 ) +C1267 ) -C1272 ) - ( C1335*C629 ) ;
    double C16907 =  (  ( C1334/C602 ) + (  ( C627*C1353 ) + (  ( ae*C1242 ) /C563 )  )  ) - (  ( ae* (  ( C16386*C573 ) +cnst111 )  ) /C563 ) ;
    double C773 =  (  ( C678*C629 ) /C563 ) + (  ( C598- (  ( C627*C677 ) /C563 )  ) -C601 ) ;
    double C805 =  (  (  (  (  ( C16420*ae ) /C563 ) + ( C627*C772 )  ) -C690 ) -C600 ) - ( C773*C629 ) ;
    double C809 = C805-C744;
    double C784 = C773/C563;
    double C774 =  (  ( C601- (  ( C627*C678 ) /C563 )  ) -C605 ) + (  ( C679*C629 ) /C563 ) ;
    double C810 =  (  (  (  (  ( C627*C773 ) +C600 ) -C694 ) -C604 ) - ( C774*C629 )  ) -C746;
    double C818 =  (  (  (  (  ( C16453*ae ) /C563 ) + ( C627*C809 )  ) + ( C772/C563 )  ) -C603 ) - ( C810*C629 ) ;
    double C819 = C818-C784;
    double cnst189 =  (  (  (  ( ae*C548 ) /C563 ) + ( C627*C819 )  ) + (  ( 3*C809 ) /C602 )  ) -cnst164;
    double C2404 =  (  ( C1275+ ( C627*C1299 )  ) -C1278 ) - ( C1300*C629 ) ;
    double C16810 = C1353- ( C573*C2404 ) ;
    double C747 =  (  ( C680*C629 ) /C563 ) - (  ( C627*C681 ) /C563 ) ;
    double C750 =  (  ( C629*C683 ) /C563 ) - (  ( C627*C682 ) /C563 ) ;
    double C2394 =  ( C627*C1321 ) - ( C1322*C629 ) ;
    double C16811 =  ( C1358-C16380 ) - ( C2394*C573 ) ;
    double C2413 =  (  (  ( C627*C2394 ) + ( C1321/C602 )  ) - ( C629*C2395 )  ) -C2383;
    double C17067 = C16907- (  (  (  ( C1272+ ( C627*C1335 )  ) -C16743 ) - ( C16962*C629 )  ) *C629 ) ;
    double C17103 = C17067- ( C1335/C602 ) ;
    double gx200020 =  (  (  ( C17103-C1242 ) - ( C570*C1353 )  ) - (  ( C16230*C573 ) +cnst132 )  ) - ( C570* (  ( C1353-C1243 ) - ( C1334*C570 )  )  ) ;
    double cnst214 = cnst0*gx200020;
    double cnst221 =  (  (  ( C605- (  ( C627*C679 ) /C563 )  ) -C16733 ) + (  ( C16883*C629 ) /C563 )  ) *C629;
    double cnst223 =  (  (  (  (  ( C627*C774 ) +C604 ) -C16485 ) - (  ( C16459*ae ) /C563 )  ) -cnst221 ) -C16850;
    double cnst225 =  (  ( C784+ ( C603+ ( C627*C810 )  )  ) - (  ( ae*C559 ) /C563 )  ) - ( cnst223*C629 ) ;
    double cnst230 =  (  ( cnst189- (  ( cnst225- ( C774/C563 )  ) *C629 )  ) - (  ( C810*3 ) /C602 )  ) -C548;
    double gx200200 =  (  ( cnst230- ( C570*C819 )  ) -C562 ) - ( C570* (  ( C819-C16453 ) - ( C570*C809 )  )  ) ;
    double cnst233 = cnst0*gx200200;
    double C17068 =  (  ( C1354/C602 ) + ( C1358*C627 )  ) - (  (  ( C627*C1355 ) - ( C16963*C629 )  ) *C629 ) ;
    double C17104 = C17068- ( C1355/C602 ) ;
    double C17164 =  ( C17104-C2364 ) - ( C573*C2413 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 0] +=  ( C17164- ( C16811*C570 )  ) *cnst4;
    double gy200020 =  ( C17104- ( C1358*C570 )  ) - ( C570* ( C1358- ( C570*C1354 )  )  ) ;
    double cnst242 = cnst0*gy200020;
    double cnst249 =  (  ( C627*C750 ) -C16490 ) - ( C629* (  (  ( C16884*C629 ) /C563 ) - (  ( C627*C683 ) /C563 )  )  ) ;
    double C748 =  (  ( C629*C682 ) /C563 ) - (  ( C627*C680 ) /C563 ) ;
    double C791 =  (  (  ( C627*C747 ) -C700 ) - ( C748*C629 )  ) -C749;
    double C16792 =  ( C2413-C16453 ) - ( C791*C573 ) ;
    double gy020200 =  ( C17164-C3811 ) - ( C16792*C573 ) ;
    double cnst256 = cnst0*gy020200;
    double C765 = C748/C563;
    double C792 =  (  (  ( C627*C748 ) -C704 ) - ( C750*C629 )  ) -C751;
    double cnst264 =  (  (  ( C765+ ( C792*C627 )  ) - (  ( cnst249-C16852 ) *C629 )  ) - ( C750/C563 )  ) *C629;
    double C811 =  (  (  ( C747/C563 ) + ( C791*C627 )  ) - ( C792*C629 )  ) -C765;
    double cnst273 =  (  (  ( C811*C627 ) + (  ( C791*3 ) /C602 )  ) -cnst264 ) - (  ( C792*3 ) /C602 ) ;
    double gy200200 =  ( cnst273- ( C811*C570 )  ) - ( C570* ( C811- ( C791*C570 )  )  ) ;
    double cnst276 = cnst0*gy200200;
    gy[(Ai + 4) * matrix_size + Bi + 4] +=  ( gy020020*cnst2 ) + (  (  ( cnst2*gy200200 ) - ( gy200020*cnst2 )  ) - ( cnst2*gy020200 )  ) ;
    double C17145 =  (  (  (  ( C627*C4342 ) +C16796 ) -C16797 ) - ( C17049*C629 )  ) - ( C1353*C573 ) ;
    double gx110020 =  ( C17145-C4323 ) - ( C570*C16795 ) ;
    double gx020110 = C17145- ( C16810*C573 ) ;
    double C17014 =  (  ( C2383+ ( C627*C2395 )  ) - (  (  ( C627*C1323 ) - ( C629*C16927 )  ) *C629 )  ) - ( C1323/C602 ) ;
    double C17110 =  (  (  ( C627*C2413 ) + ( C2394/C563 )  ) - ( C629*C17014 )  ) - ( C2395/C563 ) ;
    double gy200110 =  ( C17110- ( C570*C2413 )  ) - ( C570* ( C2413- ( C570*C2394 )  )  ) ;
    double gy110200 =  (  ( C17110-C548 ) - ( C811*C573 )  ) - ( C570*C16792 ) ;
    double C2405 =  (  ( C1278+ ( C1300*C627 )  ) -C1281 ) - ( C1301*C629 ) ;
    double C16986 =  (  ( C2377+ ( C2392+ ( C627*C2405 )  )  ) - (  ( C16479*ae ) /C563 )  ) - (  (  (  ( C1281+ ( C627*C1301 )  ) -C16748 ) - ( C16926*C629 )  ) *C629 ) ;
    double C2417 =  (  (  ( C1299/C602 ) + (  ( C627*C2404 ) + (  ( C16380*ae ) /C563 )  )  ) -C2392 ) - ( C2405*C629 ) ;
    double C2418 = C2417-C2377;
    double C17142 = C17103- ( C573*C2418 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 0] += cnst4* (  ( C17142-C5179 ) - ( C570*C16810 )  ) ;
    double C16791 = C2418- ( C573*C809 ) ;
    double gx020200 = C17142- ( C573*C16791 ) ;
    double cnst302 = cnst0*gx020200;
    gx[(Ai + 4) * matrix_size + Bi + 4] +=  (  (  ( cnst2*gx200200 ) - ( gx200020*cnst2 )  ) - ( gx020200*cnst2 )  ) + ( cnst2*gx020020 ) ;
    double C17073 =  (  (  (  ( C627*C2418 ) + (  ( C2364*ae ) /C563 )  ) + ( C2404/C563 )  ) -C16767 ) - ( C629* ( C16986- ( C1301/C602 )  )  ) ;
    double C17109 = C17073- ( C2405/C563 ) ;
    double gx110200 =  (  ( C17109- ( C573*C819 )  ) -C3811 ) - ( C570*C16791 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 4] +=  ( cnst3*gx110200 ) - ( cnst3*gx110020 ) ;
    double cnst316 =  (  ( C17109-C2364 ) - ( C570*C2418 )  ) - (  ( C16053*C573 ) - (  ( C16082*C635 ) + (  ( C16053*C16089 ) /C563 )  )  ) ;
    double gx200110 = cnst316- ( C570* (  ( C2418-C16380 ) - ( C570*C2404 )  )  ) ;
    gx[(Ai + 4) * matrix_size + Bi + 0] +=  ( cnst3*gx200110 ) - ( cnst3*gx020110 ) ;
    double C17165 =  (  (  ( C627*C4346 ) - ( C17050*C629 )  ) -C1242 ) - ( C1358*C573 ) ;
    double gy020110 =  ( C17165-C5179 ) - ( C16811*C573 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 0] +=  ( gy200110*cnst3 ) - ( gy020110*cnst3 ) ;
    double gy110020 = C17165- ( C570*C16799 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 4] +=  ( cnst3*gy110200 ) - ( cnst3*gy110020 ) ;
    double C623 =  (  ( be*zB ) + ( zA*ae )  ) /C563;
    double C1792 = C623-zB;
    double C640 = C623-zC;
    double C3323 =  ( C574*C16230 ) - (  (  ( C16146*C16230 ) /C563 ) + ( C640* (  ( C16046*C573 ) -C16431 )  )  ) ;
    double cnst333 =  ( C640*C1244 ) + (  ( C16146*C1243 ) /C563 ) ;
    double C6929 = -cnst333;
    double C5543 =  ( C574*C1243 ) -cnst333;
    double C16813 =  ( C5543*ae ) /C563;
    double C1843 =  (  ( C640*C683 ) /C563 ) - (  ( C1792*C682 ) /C563 ) ;
    double C16576 = C1843/C602;
    double C16184 =  (  ( - (  ( C16146*C16028 ) /C563 )  ) /C563 ) - (  ( C16369*C640 ) /C563 ) ;
    double C16436 =  (  ( C574*C16028 ) /C563 ) +C16184;
    double C1826 =  ( C16436*ae ) /C563;
    double C16814 =  ( ae* (  ( C574*C1244 ) - (  ( C640*C1246 ) + (  ( C16146*C1244 ) /C563 )  )  )  ) /C563;
    double C16189 =  ( C16046*C640 ) + (  ( C16045*C16146 ) /C563 ) ;
    double C1841 =  (  ( C640*C680 ) /C563 ) - (  ( C681*C1792 ) /C563 ) ;
    double C2901 = C1841/C602;
    double C16253 =  (  ( C16146*C16426 ) /C563 ) + ( C640*C16427 ) ;
    double C3319 =  ( C16426*C574 ) -C16253;
    double C3338 =  ( ae*C3319 ) /C563;
    double C647 = C640*ae;
    double C16885 = C675* (  ( C647*C585 ) + (  ( C584*C608 ) /C563 )  ) ;
    double C684 = C675* (  (  ( C608*C572 ) /C563 ) + ( C647*C577 )  ) ;
    double C754 =  ( - ( C684/C563 )  ) /C602;
    double C714 = C684/C614;
    double C685 = C675* (  ( C647*C572 ) + (  ( C569*C608 ) /C563 )  ) ;
    double C752 =  (  ( C684*C629 ) /C563 ) - (  ( C627*C685 ) /C563 ) ;
    double C1862 =  (  ( C593- (  ( C685*C1792 ) /C563 )  ) -C598 ) + (  ( C640*C684 ) /C563 ) ;
    double C2907 = C1862/C602;
    double C710 = C685/C614;
    double C1305 =  (  ( C684*C635 ) /C563 ) - (  ( C685*C1253 ) /C563 ) ;
    double C686 = C675* (  (  ( C608*C577 ) /C563 ) + ( C647*C580 )  ) ;
    double C16494 = C686/C614;
    double C756 =  ( - ( C686/C563 )  ) /C602;
    double C1863 =  (  ( C598- (  ( C684*C1792 ) /C563 )  ) -C601 ) + (  ( C686*C640 ) /C563 ) ;
    double C2917 =  ( C627*C1862 ) - ( C1863*C629 ) ;
    double C3344 =  ( C1862*C1253 ) - ( C1863*C635 ) ;
    double C2910 = C1863/C602;
    double C7453 = C1863/C563;
    double C1306 =  (  ( C686*C635 ) /C563 ) - (  ( C684*C1253 ) /C563 ) ;
    double C1338 =  (  (  ( C1305*C1253 ) -C710 ) - ( C1306*C635 )  ) -C754;
    double C2396 =  ( C627*C1305 ) - ( C1306*C629 ) ;
    double C2389 = C1306/C602;
    double C4335 = C1306/C563;
    double C753 =  (  ( C686*C629 ) /C563 ) - (  ( C627*C684 ) /C563 ) ;
    double C771 = C753/C563;
    double C793 =  (  (  ( C752*C627 ) -C710 ) - ( C753*C629 )  ) -C754;
    double C687 = C675* (  ( C584*C647 ) + (  ( C608*C580 ) /C563 )  ) ;
    double C1307 =  (  ( C687*C635 ) /C563 ) - (  ( C686*C1253 ) /C563 ) ;
    double C1339 =  (  (  ( C1306*C1253 ) -C714 ) - ( C1307*C635 )  ) -C756;
    double C1349 =  ( C1338*C627 ) - ( C1339*C629 ) ;
    double C16812 = C1349- ( C2396*C573 ) ;
    double C4344 =  (  (  ( C1305/C563 ) + ( C1338*C1253 )  ) - ( C1339*C635 )  ) -C4335;
    double C16801 = C4344- ( C1338*C573 ) ;
    double C2397 =  ( C627*C1306 ) - ( C1307*C629 ) ;
    double C2414 =  (  (  ( C1305/C602 ) + ( C627*C2396 )  ) - ( C2397*C629 )  ) -C2389;
    double C16793 = C2414- ( C573*C793 ) ;
    double C1864 =  (  ( C601- (  ( C686*C1792 ) /C563 )  ) -C605 ) + (  ( C640*C687 ) /C563 ) ;
    double C3345 =  ( C1863*C1253 ) - ( C635*C1864 ) ;
    double C6026 =  (  ( C2907+ ( C3344*C1253 )  ) - ( C3345*C635 )  ) -C2910;
    double C16825 = C6026- ( C3344*C573 ) ;
    double C16831 =  ( C6026-C1243 ) - ( C1338*C574 ) ;
    double C3355 =  ( C627*C3344 ) - ( C3345*C629 ) ;
    double C16820 = C3355- ( C573*C2917 ) ;
    double C16842 =  ( C3355-C16380 ) - ( C574*C2396 ) ;
    double C2918 =  ( C627*C1863 ) - ( C629*C1864 ) ;
    double C2935 =  (  ( C2907+ ( C627*C2917 )  ) - ( C2918*C629 )  ) -C2910;
    double C16828 =  ( C2935-C16453 ) - ( C574*C793 ) ;
    double C16582 = C1864/C602;
    double C16854 =  ( - ( C687/C563 )  ) /C602;
    double C755 =  (  ( C687*C629 ) /C563 ) - (  ( C686*C627 ) /C563 ) ;
    double C794 =  (  (  ( C753*C627 ) -C714 ) - ( C755*C629 )  ) -C756;
    double C812 =  (  (  ( C752/C563 ) + ( C627*C793 )  ) - ( C629*C794 )  ) -C771;
    double C16928 =  (  ( C16885*C635 ) /C563 ) - (  ( C687*C1253 ) /C563 ) ;
    double C17015 =  (  ( C2389+ ( C627*C2397 )  ) - (  (  ( C627*C1307 ) - ( C16928*C629 )  ) *C629 )  ) - ( C1307/C602 ) ;
    double C17111 =  (  (  ( C627*C2414 ) + ( C2396/C563 )  ) - ( C17015*C629 )  ) - ( C2397/C563 ) ;
    double gz110200 =  ( C17111- ( C812*C573 )  ) - ( C570*C16793 ) ;
    double gz200110 =  ( C17111- ( C570*C2414 )  ) - ( C570* ( C2414- ( C570*C2396 )  )  ) ;
    double C16964 =  (  (  ( C1307*C1253 ) -C16494 ) - ( C16928*C635 )  ) -C16854;
    double C17051 =  (  (  ( C1339*C1253 ) +C4335 ) - ( C16964*C635 )  ) - ( C1307/C563 ) ;
    double C17147 =  (  ( C627*C4344 ) - ( C17051*C629 )  ) - ( C1349*C573 ) ;
    double gz020110 = C17147- ( C16812*C573 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 0] +=  ( cnst3*gz200110 ) - ( cnst3*gz020110 ) ;
    double gz110020 = C17147- ( C570*C16801 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 4] +=  ( cnst3*gz110200 ) - ( cnst3*gz110020 ) ;
    double cnst422 =  (  (  ( C1253*C4344 ) + (  ( C1338*3 ) /C602 )  ) - ( C17051*C635 )  ) - (  ( C1339*3 ) /C602 ) ;
    double gz020020 =  ( cnst422- ( C573*C4344 )  ) - ( C16801*C573 ) ;
    double cnst425 = cnst0*gz020020;
    double C17069 =  (  ( C1338/C602 ) + ( C1349*C627 )  ) - (  (  ( C627*C1339 ) - ( C16964*C629 )  ) *C629 ) ;
    double C17105 = C17069- ( C1339/C602 ) ;
    double C17144 = C17105- ( C2414*C573 ) ;
    double gz020200 = C17144- ( C16793*C573 ) ;
    double cnst427 = cnst0*gz020200;
    gz[(Ai + 0) * matrix_size + Bi + 0] +=  ( C17144- ( C570*C16812 )  ) *cnst4;
    double gz200020 =  ( C17105- ( C1349*C570 )  ) - ( C570* ( C1349- ( C570*C1338 )  )  ) ;
    double cnst433 = gz200020*cnst0;
    double cnst438 =  (  ( C627*C755 ) -C16494 ) - (  (  (  ( C16885*C629 ) /C563 ) - (  ( C627*C687 ) /C563 )  ) *C629 ) ;
    double cnst443 =  (  (  ( C771+ ( C627*C794 )  ) - (  ( cnst438-C16854 ) *C629 )  ) - ( C755/C563 )  ) *C629;
    double cnst445 =  (  (  ( C627*C812 ) + (  ( 3*C793 ) /C602 )  ) -cnst443 ) - (  ( 3*C794 ) /C602 ) ;
    double gz200200 =  ( cnst445- ( C570*C812 )  ) - ( C570* ( C812- ( C570*C793 )  )  ) ;
    gz[(Ai + 4) * matrix_size + Bi + 4] +=  ( gz020020*cnst2 ) + (  (  ( cnst2*gz200200 ) - ( gz200020*cnst2 )  ) - ( cnst2*gz020200 )  ) ;
    double cnst450 = cnst0*gz200200;
    double C16931 =  (  ( C605- (  ( C687*C1792 ) /C563 )  ) -C16733 ) + (  ( C640*C16885 ) /C563 ) ;
    double C17018 =  (  (  ( C2918*C627 ) +C2910 ) - (  (  ( C627*C1864 ) - ( C16931*C629 )  ) *C629 )  ) -C16582;
    double C17114 =  (  (  ( C2917/C563 ) + ( C627*C2935 )  ) - ( C17018*C629 )  ) - ( C2918/C563 ) ;
    double gz200101 =  ( C17114- ( C570*C2935 )  ) - ( C570* ( C2935- ( C570*C2917 )  )  ) ;
    double gz101200 =  (  ( C17114-C548 ) - ( C574*C812 )  ) - ( C570*C16828 ) ;
    double C16961 =  ( C1253*C1864 ) - ( C16931*C635 ) ;
    double C17030 =  (  ( C2910+ ( C3345*C1253 )  ) - ( C16961*C635 )  ) -C16582;
    double C17126 =  (  (  ( C3344/C563 ) + ( C6026*C1253 )  ) - ( C635*C17030 )  ) - ( C3345/C563 ) ;
    double gz011020 =  (  ( C17126-C4321 ) - ( C574*C4344 )  ) - ( C16831*C573 ) ;
    double gz020011 =  ( C17126- ( C6026*C573 )  ) - ( C16825*C573 ) ;
    double C17090 =  ( C627*C6026 ) - ( C629*C17030 ) ;
    double C17162 =  ( C17090-C1242 ) - ( C1349*C574 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 0] +=  ( C17162- ( C573*C16842 )  ) *cnst4;
    double gz101020 = C17162- ( C570*C16831 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 4] +=  ( cnst3*gz101200 ) - ( cnst3*gz101020 ) ;
    double C17123 = C17090- ( C573*C3355 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 1] +=  ( C17123- ( C570*C16825 )  ) *cnst4;
    double gz020101 = C17123- ( C573*C16820 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 3] +=  ( cnst3*gz200101 ) - ( gz020101*cnst3 ) ;
    double C17048 =  (  ( C627*C3355 ) + ( C3344/C602 )  ) - (  (  ( C627*C3345 ) - ( C16961*C629 )  ) *C629 ) ;
    double C17081 = C17048- ( C3345/C602 ) ;
    double gz200011 =  ( C17081- ( C570*C3355 )  ) - (  ( C3355- ( C570*C3344 )  ) *C570 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 1] +=  ( cnst3*gz200011 ) - ( cnst3*gz020011 ) ;
    double C17163 =  ( C17081-C2364 ) - ( C574*C2414 ) ;
    double gz011200 = C17163- ( C573*C16828 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 4] +=  ( cnst3*gz011200 ) - ( cnst3*gz011020 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 0] +=  ( C17163- ( C570*C16842 )  ) *cnst4;
    gz[(Ai + 0) * matrix_size + Bi + 3] +=  (  ( C17081- ( C2935*C573 )  ) - ( C570*C16820 )  ) *cnst4;
    double C1838 =  (  ( C640*C677 ) /C563 ) - (  ( C676*C1792 ) /C563 ) ;
    double C2894 = C1838/C602;
    double C16476 =  (  ( C16146*C16430 ) /C563 ) + ( C16461*C640 ) ;
    double C16787 =  (  (  ( C574*C16430 ) -C16476 ) *ae ) /C563;
    double C16163 =  (  ( - (  ( C16146*C16026 ) /C563 )  ) /C563 ) - (  ( C640*C16027 ) /C563 ) ;
    double C16432 =  (  ( C574*C16026 ) /C563 ) +C16163;
    double C1820 =  ( ae*C16432 ) /C563;
    double C16474 =  (  ( C16146*C556 ) /C563 ) + ( C640*C16459 ) ;
    double C5545 =  (  ( C640*C16127 ) + (  ( C16146*C16103 ) /C563 )  ) - ( C574*C16103 ) ;
    double C16176 =  (  ( C16146*C16421 ) /C563 ) + ( C640*C556 ) ;
    double C16399 =  ( C574*C16421 ) -C16176;
    double C2913 =  ( C16399*ae ) /C563;
    double cnst498 =  (  (  (  ( C16146*C16176 ) /C563 ) + ( C16474*C640 )  ) +C16385 ) - ( C574*C16176 ) ;
    double C1840 =  (  ( C640*C679 ) /C563 ) - (  ( C678*C1792 ) /C563 ) ;
    double C16570 = C1840/C602;
    double C16776 =  (  (  ( C574*C555 ) - (  ( C640*C559 ) + (  ( C16146*C555 ) /C563 )  )  ) *ae ) /C563;
    double C1839 =  (  ( C640*C678 ) /C563 ) - (  ( C677*C1792 ) /C563 ) ;
    double C3341 =  ( C1839*C1253 ) - ( C1840*C635 ) ;
    double C1873 =  (  (  ( C1838*C1792 ) -C690 ) - ( C640*C1839 )  ) -C744;
    double C16522 = C1873/C602;
    double C2898 = C1839/C602;
    double C3339 =  ( C1838*C1253 ) - ( C1839*C635 ) ;
    double C6024 =  (  ( C2894+ ( C1253*C3339 )  ) - ( C3341*C635 )  ) -C2898;
    double C16829 = C6024- ( C1334*C574 ) ;
    double C16822 = C6024- ( C3339*C573 ) ;
    double C1874 =  (  (  ( C1839*C1792 ) -C694 ) - ( C640*C1840 )  ) -C746;
    double C4778 =  ( C1253*C1873 ) - ( C1874*C635 ) ;
    double C16846 = C4778- ( C574*C3339 ) ;
    double C16803 = C4778- ( C573*C1873 ) ;
    double C16528 = C1874/C602;
    double C7445 = C1839/C563;
    double C7460 =  (  (  ( C1792*C1873 ) + ( C1838/C563 )  ) - ( C640*C1874 )  ) -C7445;
    double C16833 = C7460- ( C574*C1873 ) ;
    double C16263 =  (  ( C16111*C16146 ) /C563 ) + ( C640*C16119 ) ;
    double C16258 =  ( C640*C16430 ) + (  ( C16146*C16427 ) /C563 ) ;
    double cnst532 =  (  (  ( C16146*C16253 ) /C563 ) + ( C640*C16258 )  ) + (  ( C16426-C16427 ) /C16016 ) ;
    double C8593 = cnst532- ( C574*C16253 ) ;
    double C4769 = C8593+ ( C574*C3319 ) ;
    double C16804 =  ( C4769*ae ) /C563;
    double C3320 =  ( C574*C16427 ) -C16258;
    double C3340 =  ( ae*C3320 ) /C563;
    double C3359 =  (  ( C3338+ ( C627*C3339 )  ) -C3340 ) - ( C629*C3341 ) ;
    double C16840 = C3359- ( C574*C2404 ) ;
    double cnst545 =  (  ( C16427-C16430 ) /C16016 ) + (  (  ( C16146*C16258 ) /C563 ) + ( C640*C16476 )  ) ;
    double C16805 =  ( ae* (  ( cnst545- ( C574*C16258 )  ) + ( C574*C3320 )  )  ) /C563;
    double cnst550 =  (  ( C16146*C16189 ) /C563 ) + (  (  (  ( C16046*C16146 ) /C563 ) + ( C640*C16452 )  ) *C640 ) ;
    double C1786 =  (  ( cnst550+C16391 ) - ( C574*C16189 )  ) + ( C574* (  ( C16045*C574 ) -C16189 )  ) ;
    double cnst556 =  (  ( C16146*C16263 ) /C563 ) + ( C640* (  (  ( C16146*C16119 ) /C563 ) + ( C640*C16135 )  )  ) ;
    double C4771 =  ( C574* (  ( C16111*C574 ) -C16263 )  ) + (  ( cnst556+ ( C16351/C16016 )  ) - ( C574*C16263 )  ) ;
    double C16587 =  (  ( C574*C16386 ) - (  ( C640*C16479 ) + (  ( C16146*C16386 ) /C563 )  )  ) *ae;
    double C16456 =  (  ( - (  ( C16146*C16369 ) /C563 )  ) /C563 ) - (  ( C640*C16376 ) /C563 ) ;
    double C16764 =  ( ae* ( C16456+ (  ( C16369*C574 ) /C563 )  )  ) /C563;
    double C16967 =  (  (  (  (  ( C1792*C1864 ) +C1826 ) -C16494 ) -C16764 ) - ( C16931*C640 )  ) -C16854;
    double C16475 = C16422- (  ( C640*C16456 ) + (  ( C16146*C16184 ) /C563 )  ) ;
    double C16756 =  (  (  ( C574*C16436 ) + (  ( C574*C16184 ) +C16475 )  ) *ae ) /C563;
    double C1842 =  (  ( C640*C682 ) /C563 ) - (  ( C680*C1792 ) /C563 ) ;
    double C2915 =  ( C627*C1841 ) - ( C1842*C629 ) ;
    double C7449 = C1842/C563;
    double C2904 = C1842/C602;
    double C2916 =  ( C627*C1842 ) - ( C1843*C629 ) ;
    double C2934 =  (  (  ( C2915*C627 ) +C2901 ) - ( C2916*C629 )  ) -C2904;
    double C16827 = C2934- ( C791*C574 ) ;
    double C1876 =  (  (  ( C1842*C1792 ) -C704 ) - ( C640*C1843 )  ) -C751;
    double C16534 = C1876/C602;
    double C1875 =  (  (  ( C1841*C1792 ) -C700 ) - ( C640*C1842 )  ) -C749;
    double C16530 = C1875/C602;
    double C1886 =  ( C1875*C627 ) - ( C629*C1876 ) ;
    double C16844 = C1886- ( C574*C2915 ) ;
    double C7461 =  (  (  ( C1841/C563 ) + ( C1875*C1792 )  ) - ( C640*C1876 )  ) -C7449;
    double C16835 = C7461- ( C574*C1875 ) ;
    double cnst590 =  (  ( C16146*C16380 ) /C563 ) + ( C640*C16386 ) ;
    double C3318 =  ( C574*C16380 ) -cnst590;
    double C16917 =  (  ( C3339/C602 ) + (  (  ( ae*C3318 ) /C563 ) + ( C627*C3359 )  )  ) - ( C16587/C563 ) ;
    double C7801 = -cnst590;
    double C6011 =  ( C574*C16239 ) - (  (  ( C16146*C16239 ) /C563 ) + ( C640*C16247 )  ) ;
    double C16437 =  ( C640*C555 ) + (  ( C16146*C16453 ) /C563 ) ;
    double C6479 = -C16437;
    double C2885 =  ( C574*C16453 ) -C16437;
    double C16155 =  ( C640*C16421 ) + (  ( C16420*C16146 ) /C563 ) ;
    double C16394 =  ( C16420*C574 ) -C16155;
    double C8197 =  (  (  ( C640*C16176 ) + (  ( C16146*C16155 ) /C563 )  ) +C16379 ) - ( C574*C16155 ) ;
    double C1781 = C8197+ ( C574*C16394 ) ;
    double C16171 =  (  ( - (  ( C16146*C16027 ) /C563 )  ) /C563 ) - (  ( C640*C16028 ) /C563 ) ;
    double C16433 = C16171+ (  ( C574*C16027 ) /C563 ) ;
    double C1823 =  ( C16433*ae ) /C563;
    double C1894 =  (  (  (  ( C1823+ ( C1863*C1792 )  ) -C714 ) -C1826 ) - ( C640*C1864 )  ) -C756;
    double C16541 = C1894/C602;
    double C17027 =  ( C1253*C1894 ) - ( C16967*C635 ) ;
    double C1893 =  (  (  (  ( C1820+ ( C1862*C1792 )  ) -C710 ) -C1823 ) - ( C640*C1863 )  ) -C754;
    double C1897 =  ( C1893*C627 ) - ( C1894*C629 ) ;
    double C16845 =  ( C1897-C16394 ) - ( C574*C2917 ) ;
    double C4780 =  ( C1893*C1253 ) - ( C1894*C635 ) ;
    double C17096 =  ( C627*C4780 ) - ( C17027*C629 ) ;
    double C17155 =  ( C17096-C3318 ) - ( C574*C3355 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 3] +=  ( C17155- ( C16845*C573 )  ) *cnst4;
    gz[(Ai + 2) * matrix_size + Bi + 0] +=  ( cnst5* (  ( C17155-C7801 ) - ( C574*C16842 )  )  ) - (  ( gz200110*cnst1 ) + ( gz020110*cnst1 )  ) ;
    double C16848 =  ( C4780-C3319 ) - ( C574*C3344 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 1] +=  ( C17155- ( C570*C16848 )  ) *cnst4;
    double C16809 = C4780- ( C1893*C573 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 2] +=  ( cnst5* (  ( C17096- ( C573*C1897 )  ) - ( C570*C16809 )  )  ) - (  ( gz110200*cnst1 ) + ( gz110020*cnst1 )  ) ;
    double C16536 = C1893/C602;
    double C17072 =  ( C16536+ ( C627*C1897 )  ) - (  (  ( C627*C1894 ) - ( C16967*C629 )  ) *C629 ) ;
    double C17108 = C17072-C16541;
    double gz200002 =  ( C17108- ( C570*C1897 )  ) - ( C570* ( C1897- ( C1893*C570 )  )  ) ;
    double cnst619 =  ( 0.25*gz020200 ) + (  (  ( 0.25*gz200200 ) + ( 0.25*gz200020 )  ) - ( 0.5*gz200002 )  ) ;
    double C17166 =  ( C17108-C2885 ) - ( C574*C2935 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 3] +=  ( C17166- ( C570*C16845 )  ) *cnst4;
    double gz002200 =  ( C17166-C6479 ) - ( C574*C16828 ) ;
    double C17117 =  (  (  ( C1253*C4780 ) +C16536 ) - ( C17027*C635 )  ) -C16541;
    double gz020002 =  ( C17117- ( C573*C4780 )  ) - ( C16809*C573 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 2] +=  (  (  (  ( gz200002*cnst1 ) - ( cnst450+cnst433 )  ) +cnst427 ) +cnst425 ) - ( gz020002*cnst1 ) ;
    double C17167 =  ( C17117-C5543 ) - ( C574*C6026 ) ;
    double gz002020 =  ( C17167-C6929 ) - ( C574*C16831 ) ;
    double cnst636 =  (  (  (  ( 0.25*gz020020 ) +cnst619 ) - ( 0.5*gz020002 )  ) - ( 0.5*gz002200 )  ) - ( 0.5*gz002020 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 4] +=  (  ( cnst425+ (  ( cnst433-cnst450 ) -cnst427 )  ) + ( gz002200*cnst1 )  ) - ( gz002020*cnst1 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 1] +=  ( C17167- ( C16848*C573 )  ) *cnst4;
    double C3354 =  (  ( C1823+ ( C1842*C1253 )  ) -C1826 ) - ( C1843*C635 ) ;
    double C3353 =  (  ( C1820+ ( C1841*C1253 )  ) -C1823 ) - ( C1842*C635 ) ;
    double C3360 =  ( C3353*C627 ) - ( C629*C3354 ) ;
    double C16841 = C3360- ( C574*C2394 ) ;
    double C16818 =  ( C3360-C16394 ) - ( C2915*C573 ) ;
    double C6028 =  (  (  (  (  ( C3353*C1253 ) +C3338 ) +C2901 ) -C3340 ) - ( C3354*C635 )  ) -C2904;
    double C16830 = C6028- ( C574*C1354 ) ;
    double C16823 =  ( C6028-C3319 ) - ( C3353*C573 ) ;
    double C2925 =  (  ( C1820+ ( C627*C1838 )  ) -C1823 ) - ( C1839*C629 ) ;
    double C16816 = C3359- ( C573*C2925 ) ;
    double C2926 =  (  ( C1823+ ( C627*C1839 )  ) -C1826 ) - ( C1840*C629 ) ;
    double C2938 =  (  ( C2894+ (  ( C627*C2925 ) + (  ( ae*C16394 ) /C563 )  )  ) -C2913 ) - ( C629*C2926 ) ;
    double C2939 = C2938-C2898;
    double C16826 = C2939- ( C574*C809 ) ;
    double C16895 =  ( C2898+ (  ( C627*C2926 ) +C2913 )  ) - (  (  (  ( C574*C556 ) -C16474 ) *ae ) /C563 ) ;
    double C16281 = C16042- (  (  ( C16146*C16163 ) /C563 ) + ( C16171*C640 )  ) ;
    double C16282 = C16281+ ( C574*C16163 ) ;
    double C1782 = C16282+ ( C574*C16432 ) ;
    double C1806 =  ( ae*C1782 ) /C563;
    double C16289 = C16417- (  (  ( C16171*C16146 ) /C563 ) + ( C640*C16184 )  ) ;
    double cnst675 =  (  (  ( C16171-C16184 ) *2 ) /C16016 ) - (  (  ( C16146*C16289 ) /C563 ) + ( C640*C16475 )  ) ;
    double C16290 = C16289+ ( C16171*C574 ) ;
    double C1783 =  ( C574*C16433 ) +C16290;
    double C1811 =  ( ae*C1783 ) /C563;
    double C4782 =  (  ( C1806+ ( C1875*C1253 )  ) -C1811 ) - ( C1876*C635 ) ;
    double C16847 = C4782- ( C574*C3353 ) ;
    double C16807 =  ( C4782-C1782 ) - ( C1875*C573 ) ;
    double C17063 =  (  (  ( C7453+ ( C1811+ ( C1792*C1894 )  )  ) -C16756 ) - ( C16967*C640 )  ) - ( C1864/C563 ) ;
    double C1892 =  (  ( C1806+ ( C627*C1873 )  ) -C1811 ) - ( C1874*C629 ) ;
    double C16843 = C1892- ( C574*C2925 ) ;
    double C16911 =  (  (  ( C1892*C627 ) + (  ( ae*C1781 ) /C563 )  ) +C16522 ) - (  (  ( cnst498+ ( C574*C16399 )  ) *ae ) /C563 ) ;
    double C7463 =  (  (  ( C1862/C563 ) + ( C1806+ ( C1893*C1792 )  )  ) -C1811 ) - ( C640*C1894 ) ;
    double C7464 = C7463-C7453;
    double C17169 =  (  (  ( C7464*C1253 ) - ( C17063*C635 )  ) -C4769 ) - ( C574*C4780 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 1] +=  ( cnst5* (  ( C17169-C8593 ) - ( C574*C16848 )  )  ) - (  ( gz200011*cnst1 ) + ( gz020011*cnst1 )  ) ;
    double C16839 =  ( C7464-C1782 ) - ( C1893*C574 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 2] +=  ( cnst5* ( C17169- ( C16839*C573 )  )  ) - (  ( cnst1*gz011200 ) + ( gz011020*cnst1 )  ) ;
    double C17168 =  (  (  ( C627*C7464 ) - ( C17063*C629 )  ) -C1781 ) - ( C574*C1897 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 2] +=  ( cnst5* ( C17168- ( C570*C16839 )  )  ) - (  ( gz101020*cnst1 ) + ( cnst1*gz101200 )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 3] +=  ( cnst5* (  ( C17168-C8197 ) - ( C574*C16845 )  )  ) - (  ( cnst1*gz200101 ) + ( gz020101*cnst1 )  ) ;
    double C16692 = ae* (  (  (  ( C16289*C574 ) +cnst675 ) + ( C574*C16290 )  ) + ( C574*C1783 )  ) ;
    double C16837 = C16692/C563;
    double cnst707 =  (  (  ( C16163-C16171 ) *2 ) /C16016 ) - (  (  ( C16146*C16281 ) /C563 ) + ( C16289*C640 )  ) ;
    double C7441 =  (  ( C574*C16281 ) +cnst707 ) + ( C574*C16282 ) ;
    double C7439 =  ( C574*C1782 ) +C7441;
    double C16836 =  ( ae*C7439 ) /C563;
    double cnst712 =  (  (  (  ( C1893*3 ) /C602 ) + (  ( C7464*C1792 ) +C16836 )  ) -C16837 ) - ( C640*C17063 ) ;
    double gz002002 =  (  (  (  ( cnst712- (  ( 3*C1894 ) /C602 )  ) -C7439 ) - ( C574*C7464 )  ) -C7441 ) - ( C574*C16839 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 2] += gz002002+cnst636;
    double C16930 =  (  ( C640*C16884 ) /C563 ) - (  ( C1792*C683 ) /C563 ) ;
    double C17017 =  (  (  ( C2916*C627 ) +C2904 ) - (  (  ( C627*C1843 ) - ( C16930*C629 )  ) *C629 )  ) -C16576;
    double C17113 =  (  (  ( C627*C2934 ) + ( C2915/C563 )  ) - ( C17017*C629 )  ) - ( C2916/C563 ) ;
    double gy101200 =  ( C17113- ( C811*C574 )  ) - ( C16827*C570 ) ;
    double gy200101 =  ( C17113- ( C570*C2934 )  ) - ( C570* ( C2934- ( C570*C2915 )  )  ) ;
    double C16960 =  (  (  ( C1843*C1253 ) +C1826 ) -C16764 ) - ( C16930*C635 ) ;
    double C17029 =  (  (  (  (  ( C1253*C3354 ) +C3340 ) +C2904 ) -C16787 ) - ( C16960*C635 )  ) -C16576;
    double C17089 =  ( C627*C6028 ) - ( C17029*C629 ) ;
    double C17148 =  ( C17089-C3318 ) - ( C3360*C573 ) ;
    double gy020101 =  ( C17148-C5545 ) - ( C16818*C573 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 3] +=  ( gy200101*cnst3 ) - ( cnst3*gy020101 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 1] +=  ( C17148- ( C570*C16823 )  ) *cnst4;
    double C17137 = C17089- ( C1358*C574 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 0] +=  (  ( C17137-C7801 ) - ( C16841*C573 )  ) *cnst4;
    double gy101020 = C17137- ( C570*C16830 ) ;
    gy[(Ai + 3) * matrix_size + Bi + 4] +=  ( cnst3*gy101200 ) - ( cnst3*gy101020 ) ;
    double C17092 =  (  (  (  ( C6028*C1253 ) +C16813 ) + ( C3353/C563 )  ) -C16814 ) - ( C17029*C635 ) ;
    double C17125 = C17092- ( C3354/C563 ) ;
    double gy011020 =  (  ( C17125- ( C574*C4346 )  ) -C6929 ) - ( C16830*C573 ) ;
    double gy020011 =  (  (  ( C17125-C5543 ) - ( C6028*C573 )  ) -C6011 ) - ( C573*C16823 ) ;
    double C17047 =  (  ( C627*C3360 ) + ( C3353/C602 )  ) - (  (  ( C627*C3354 ) - ( C16960*C629 )  ) *C629 ) ;
    double C17080 = C17047- ( C3354/C602 ) ;
    double gy200011 =  ( C17080- ( C570*C3360 )  ) - ( C570* ( C3360- ( C570*C3353 )  )  ) ;
    gy[(Ai + 4) * matrix_size + Bi + 1] +=  ( gy200011*cnst3 ) - ( cnst3*gy020011 ) ;
    double C17140 = C17080- ( C574*C2413 ) ;
    gy[(Ai + 3) * matrix_size + Bi + 0] += cnst4* ( C17140- ( C570*C16841 )  ) ;
    double gy011200 =  ( C17140-C6479 ) - ( C16827*C573 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 4] +=  ( cnst3*gy011200 ) - ( cnst3*gy011020 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 3] +=  (  (  ( C17080-C2885 ) - ( C2934*C573 )  ) - ( C570*C16818 )  ) *cnst4;
    double C16966 =  (  (  ( C1843*C1792 ) -C16490 ) - ( C16930*C640 )  ) -C16852;
    double C17062 =  (  ( C7449+ ( C1792*C1876 )  ) - ( C640*C16966 )  ) - ( C1843/C563 ) ;
    double cnst752 =  (  (  ( C7461*C1792 ) + (  ( C1875*3 ) /C602 )  ) - ( C640*C17062 )  ) - (  ( 3*C1876 ) /C602 ) ;
    double C17157 =  (  ( C627*C7461 ) - ( C17062*C629 )  ) - ( C1886*C574 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 3] +=  ( cnst5* ( C17157- ( C574*C16844 )  )  ) - (  ( gy200101*cnst1 ) + ( gy020101*cnst1 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 2] +=  ( cnst5* ( C17157- ( C570*C16835 )  )  ) - (  ( gy101020*cnst1 ) + ( gy101200*cnst1 )  ) ;
    double C17160 =  (  (  (  ( C7461*C1253 ) +C16836 ) -C16837 ) - ( C17062*C635 )  ) - ( C574*C4782 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 1] +=  ( cnst5* ( C17160- ( C574*C16847 )  )  ) - (  ( gy200011*cnst1 ) + ( gy020011*cnst1 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 2] +=  ( cnst5* (  ( C17160-C7441 ) - ( C573*C16835 )  )  ) - (  ( cnst1*gy011200 ) + ( gy011020*cnst1 )  ) ;
    double C17071 =  ( C16530+ ( C1886*C627 )  ) - (  (  ( C627*C1876 ) - ( C629*C16966 )  ) *C629 ) ;
    double C17107 = C17071-C16534;
    double C17150 = C17107- ( C574*C2934 ) ;
    gy[(Ai + 3) * matrix_size + Bi + 3] +=  ( C17150- ( C570*C16844 )  ) *cnst4;
    double gy002200 = C17150- ( C16827*C574 ) ;
    double gy200002 =  ( C17107- ( C1886*C570 )  ) - ( C570* ( C1886- ( C570*C1875 )  )  ) ;
    double cnst765 =  (  (  ( 0.25*gy200200 ) + ( 0.25*gy200020 )  ) - ( 0.5*gy200002 )  ) + ( 0.25*gy020200 ) ;
    double C17026 =  (  ( C1811+ ( C1253*C1876 )  ) -C16756 ) - ( C635*C16966 ) ;
    double C17095 =  ( C627*C4782 ) - ( C629*C17026 ) ;
    double C17128 = C17095- ( C574*C3360 ) ;
    gy[(Ai + 3) * matrix_size + Bi + 1] += cnst4* ( C17128- ( C570*C16847 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 3] +=  (  ( C17128-C8197 ) - ( C16844*C573 )  ) *cnst4;
    gy[(Ai + 2) * matrix_size + Bi + 0] +=  ( cnst5* ( C17128- ( C574*C16841 )  )  ) - (  ( gy020110*cnst1 ) + ( gy200110*cnst1 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 2] +=  (  (  (  ( C17095-C1781 ) - ( C1886*C573 )  ) - ( C16807*C570 )  ) *cnst5 ) - (  ( cnst1*gy110200 ) + ( gy110020*cnst1 )  ) ;
    double C17116 =  (  (  ( C16530+ ( C16804+ ( C1253*C4782 )  )  ) -C16805 ) - ( C17026*C635 )  ) -C16534;
    double C17153 = C17116- ( C574*C6028 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 1] += cnst4* (  ( C17153-C8593 ) - ( C573*C16847 )  ) ;
    double gy002020 = C17153- ( C574*C16830 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 4] +=  (  (  (  ( cnst242-cnst276 ) -cnst256 ) +cnst61 ) + ( gy002200*cnst1 )  ) - ( gy002020*cnst1 ) ;
    double gy020002 =  (  (  ( C17116-C4769 ) - ( C573*C4782 )  ) -C4771 ) - ( C16807*C573 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 2] +=  (  (  (  ( gy200002*cnst1 ) - ( cnst276+cnst242 )  ) +cnst256 ) +cnst61 ) - ( cnst1*gy020002 ) ;
    double cnst786 =  (  (  ( cnst765+ ( 0.25*gy020020 )  ) - ( 0.5*gy020002 )  ) - ( gy002200*0.5 )  ) - ( 0.5*gy002020 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 2] +=  (  ( cnst752- ( C574*C7461 )  ) - ( C574*C16835 )  ) +cnst786;
    double C16929 =  (  ( C640*C16883 ) /C563 ) - (  ( C679*C1792 ) /C563 ) ;
    double C16959 =  ( C1840*C1253 ) - ( C16929*C635 ) ;
    double C17028 =  (  ( C2898+ ( C1253*C3341 )  ) - ( C16959*C635 )  ) -C16570;
    double C17088 =  (  (  ( C627*C6024 ) +C16813 ) -C16814 ) - ( C17028*C629 ) ;
    double C17136 = C17088- ( C574*C1353 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 0] +=  ( C17136- ( C573*C16840 )  ) *cnst4;
    double gx101020 =  ( C17136-C6929 ) - ( C570*C16829 ) ;
    double C17121 = C17088- ( C573*C3359 ) ;
    double gx020101 = C17121- ( C16816*C573 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 1] += cnst4* (  ( C17121-C6011 ) - ( C570*C16822 )  ) ;
    double C17124 =  (  (  ( C6024*C1253 ) + ( C3339/C563 )  ) - ( C17028*C635 )  ) - ( C3341/C563 ) ;
    double gx020011 =  ( C17124- ( C6024*C573 )  ) - ( C16822*C573 ) ;
    double gx011020 =  ( C17124- ( C574*C4342 )  ) - ( C16829*C573 ) ;
    double C17046 = C16917- (  (  (  (  ( C627*C3341 ) +C3340 ) -C16787 ) - ( C16959*C629 )  ) *C629 ) ;
    double C17079 = C17046- ( C3341/C602 ) ;
    double gx200011 =  (  (  ( C17079-C3318 ) - ( C570*C3359 )  ) -C3323 ) - ( C570* (  ( C3359-C3319 ) - ( C570*C3339 )  )  ) ;
    gx[(Ai + 4) * matrix_size + Bi + 1] +=  ( cnst3*gx200011 ) - ( cnst3*gx020011 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 3] += cnst4* (  (  ( C17079- ( C2939*C573 )  ) -C5545 ) - ( C570*C16816 )  ) ;
    double C17139 = C17079- ( C574*C2418 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 0] += cnst4* (  ( C17139-C7801 ) - ( C570*C16840 )  ) ;
    double gx011200 = C17139- ( C573*C16826 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 4] +=  ( cnst3*gx011200 ) - ( cnst3*gx011020 ) ;
    double C16989 = C16895- ( C629* (  (  (  ( C627*C1840 ) +C1826 ) -C16764 ) - ( C16929*C629 )  )  ) ;
    double C17076 =  (  (  (  (  ( ae*C2885 ) /C563 ) + ( C2939*C627 )  ) + ( C2925/C563 )  ) -C16776 ) - (  ( C16989-C16570 ) *C629 ) ;
    double C17112 = C17076- ( C2926/C563 ) ;
    double cnst813 =  (  ( C17112-C2885 ) - ( C2939*C570 )  ) - (  ( C574*C16053 ) - (  ( C640*C16082 ) + (  ( C16146*C16053 ) /C563 )  )  ) ;
    double gx200101 = cnst813- ( C570* (  ( C2939-C16394 ) - ( C570*C2925 )  )  ) ;
    gx[(Ai + 4) * matrix_size + Bi + 3] +=  ( cnst3*gx200101 ) - ( cnst3*gx020101 ) ;
    double gx101200 =  (  ( C17112- ( C574*C819 )  ) -C6479 ) - ( C570*C16826 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 4] +=  ( cnst3*gx101200 ) - ( cnst3*gx101020 ) ;
    double C16965 =  (  (  ( C1840*C1792 ) -C16485 ) - ( C640*C16929 )  ) -C16850;
    double C17061 =  (  (  ( C1874*C1792 ) +C7445 ) - ( C640*C16965 )  ) - ( C1840/C563 ) ;
    double C17156 =  (  (  (  ( C627*C7460 ) +C16836 ) -C16837 ) - ( C17061*C629 )  ) - ( C574*C1892 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 3] +=  ( cnst5* ( C17156- ( C574*C16843 )  )  ) - (  ( gx020101*cnst1 ) + ( gx200101*cnst1 )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 2] +=  ( cnst5* (  ( C17156-C7441 ) - ( C570*C16833 )  )  ) - (  ( gx101200*cnst1 ) + ( cnst1*gx101020 )  ) ;
    double cnst827 =  (  (  ( C1792*C7460 ) + (  ( 3*C1873 ) /C602 )  ) - ( C640*C17061 )  ) - (  ( C1874*3 ) /C602 ) ;
    double C17159 =  (  ( C1253*C7460 ) - ( C17061*C635 )  ) - ( C574*C4778 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 2] +=  ( cnst5* ( C17159- ( C16833*C573 )  )  ) - (  ( gx011020*cnst1 ) + ( gx011200*cnst1 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 1] +=  ( cnst5* ( C17159- ( C574*C16846 )  )  ) - (  ( gx020011*cnst1 ) + ( gx200011*cnst1 )  ) ;
    double C17025 =  ( C1874*C1253 ) - ( C16965*C635 ) ;
    double C17115 =  (  (  ( C4778*C1253 ) +C16522 ) - ( C17025*C635 )  ) -C16528;
    double gx020002 =  ( C17115- ( C4778*C573 )  ) - ( C573*C16803 ) ;
    double C17152 = C17115- ( C574*C6024 ) ;
    double gx002020 = C17152- ( C574*C16829 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 1] += cnst4* ( C17152- ( C16846*C573 )  ) ;
    double C17094 =  (  ( C16804+ ( C627*C4778 )  ) -C16805 ) - ( C17025*C629 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 2] +=  ( cnst5* (  (  ( C17094- ( C1892*C573 )  ) -C4771 ) - ( C570*C16803 )  )  ) - (  ( gx110020*cnst1 ) + ( gx110200*cnst1 )  ) ;
    double C17127 = C17094- ( C574*C3359 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 3] += cnst4* ( C17127- ( C16843*C573 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 0] +=  ( cnst5* ( C17127- ( C574*C16840 )  )  ) - (  ( gx200110*cnst1 ) + ( gx020110*cnst1 )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 1] += cnst4* (  ( C17127-C8593 ) - ( C570*C16846 )  ) ;
    double C17070 = C16911- (  (  (  ( C1811+ ( C627*C1874 )  ) -C16756 ) - ( C16965*C629 )  ) *C629 ) ;
    double C17106 = C17070-C16528;
    double C17149 = C17106- ( C2939*C574 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 3] +=  (  ( C17149-C8197 ) - ( C570*C16843 )  ) *cnst4;
    double gx002200 = C17149- ( C574*C16826 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 4] +=  (  ( cnst89+ (  ( cnst214-cnst233 ) -cnst302 )  ) + ( gx002200*cnst1 )  ) - ( cnst1*gx002020 ) ;
    double gx200002 =  (  (  ( C17106-C1781 ) - ( C570*C1892 )  ) -C1786 ) - ( C570* (  ( C1892-C1782 ) - ( C570*C1873 )  )  ) ;
    double cnst850 =  (  (  ( 0.25*gx200200 ) + ( 0.25*gx200020 )  ) - ( 0.5*gx200002 )  ) + ( 0.25*gx020200 ) ;
    double cnst854 =  (  (  ( cnst850+ ( 0.25*gx020020 )  ) - ( 0.5*gx020002 )  ) - ( gx002200*0.5 )  ) - ( 0.5*gx002020 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 2] +=  (  ( cnst827- ( C574*C7460 )  ) - ( C574*C16833 )  ) +cnst854;
    gx[(Ai + 4) * matrix_size + Bi + 2] +=  (  (  (  ( cnst1*gx200002 ) - ( cnst214+cnst233 )  ) +cnst302 ) +cnst89 ) - ( gx020002*cnst1 ) ;
}
