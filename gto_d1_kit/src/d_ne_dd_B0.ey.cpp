/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d1_kit/gto_d1.hpp"
#include <cmath>

namespace {
    static const double Pi = M_PI;
}

void vne_gradient_22_2(
double ae , 
double be , 
double xA , 
double yA , 
double zA , 
double xB , 
double yB , 
double zB , 
double xC , 
double yC , 
double zC , 
const double* bs , 
double* const gx , 
double* const gy , 
double* const gz , 
std::size_t matrix_size , 
std::size_t Ai , 
std::size_t Bi ) 
{
    double cnst0 = std::sqrt(0.1875);
    double C577 = bs[3];
    double C582 = bs[5];
    double C581 = bs[4];
    double C566 = bs[1];
    double C574 = bs[2];
    double C567 = bs[0];
    double cnst1 = std::sqrt(0.75);
    double C568 = xA-xB;
    double cnst2 = std::sqrt(0.5625);
    double cnst3 = std::sqrt(2.25);
    double C571 = zA-zB;
    double cnst4 = std::sqrt(9.);
    double C570 = yA-yB;
    double cnst5 = std::sqrt(3.0);
    double C563 = be+ae;
    double C605 =  ( be/C563 ) -1;
    double C597 = 2*C563;
    double C16013 = 2.*C563;
    double C610 =  ( std::pow(C563 , 2) ) *2;
    double C16143 = C571*be;
    double C569 = be*ae;
    double C602 = C570*C569;
    double C647 =  (  ( std::pow(C571 , 2) ) + (  ( std::pow(C568 , 2) ) + ( std::pow(C570 , 2) )  )  ) *C569;
    double C676 = std::exp( ( - ( C647/C563 )  ) );
    double C677 = C676* ( Pi*4 ) ;
    double C16022 = C676* ( Pi*2. ) ;
    double C16024 = C16022*C566;
    double C16031 = C16024/C563;
    double C593 =  ( be*C16031 ) /C563;
    double C631 = C605*C16031;
    double C16373 = C581*C16022;
    double C16738 =  ( be* ( C16373/C563 )  ) /C563;
    double C16023 = C567*C16022;
    double C16030 = C16023/C563;
    double C626 = C16030*C605;
    double C16039 =  ( C16030-C16031 ) /C16013;
    double C16025 = C16022*C574;
    double C16295 = C16025/C563;
    double C16414 =  ( C16031-C16295 ) /C16013;
    double C634 = C605*C16295;
    double C596 =  ( be*C16295 ) /C563;
    double C16366 = C16022*C577;
    double C557 = C16366/C563;
    double C16419 =  ( C16295-C557 ) /C16013;
    double C600 =  ( be*C557 ) /C563;
    double C16483 = C557*C605;
    double C604 = C571*C569;
    double C589 = C568*C569;
    double C618 =  (  ( be*zB ) + ( zA*ae )  ) /C563;
    double C641 = C618-zC;
    double C649 = C641*be;
    double C688 = C677* (  ( C649*C577 ) - (  ( C574*C604 ) /C563 )  ) ;
    double C758 =  ( - ( C688/C563 )  ) /C597;
    double C16492 = C688/C610;
    double C689 = C677* (  ( C581*C649 ) - (  ( C604*C577 ) /C563 )  ) ;
    double C16862 =  ( - ( C689/C563 )  ) /C597;
    double C687 =  (  ( C566*C649 ) - (  ( C567*C604 ) /C563 )  ) *C677;
    double C712 = C687/C610;
    double C16893 = C677* (  ( C582*C649 ) - (  ( C581*C604 ) /C563 )  ) ;
    double C686 =  (  ( C574*C649 ) - (  ( C604*C566 ) /C563 )  ) *C677;
    double C716 = C686/C610;
    double C756 =  ( - ( C686/C563 )  ) /C597;
    double C16453 =  (  ( - (  ( C16366*C16143 ) /C563 )  ) /C563 ) - (  ( C641*C16373 ) /C563 ) ;
    double C16769 =  ( be* (  (  ( C16366*C571 ) /C563 ) +C16453 )  ) /C563;
    double C16168 =  (  ( - (  ( C16024*C16143 ) /C563 )  ) /C563 ) - (  ( C641*C16025 ) /C563 ) ;
    double C16430 =  (  ( C16024*C571 ) /C563 ) +C16168;
    double C1805 = C16430*C605;
    double C1823 =  ( be*C16430 ) /C563;
    double C16181 =  (  ( - (  ( C16025*C16143 ) /C563 )  ) /C563 ) - (  ( C16366*C641 ) /C563 ) ;
    double C16433 =  (  ( C571*C16025 ) /C563 ) +C16181;
    double C16539 = C16433*C605;
    double C1826 =  ( be*C16433 ) /C563;
    double C16286 = C16414- (  ( C641*C16181 ) + (  ( C16168*C16143 ) /C563 )  ) ;
    double C16287 = C16286+ ( C571*C16168 ) ;
    double C1784 =  ( C571*C16430 ) +C16287;
    double C1812 =  ( be*C1784 ) /C563;
    double C16524 = C1784*C605;
    double C16472 = C16419- (  ( C641*C16453 ) + (  ( C16181*C16143 ) /C563 )  ) ;
    double C16761 =  ( be* (  ( C571*C16433 ) + (  ( C571*C16181 ) +C16472 )  )  ) /C563;
    double cnst22 =  (  (  ( C16168-C16181 ) *2 ) /C16013 ) - (  (  ( C16286*C16143 ) /C563 ) + ( C641*C16472 )  ) ;
    double C16842 =  (  (  ( C571*C1784 ) + (  ( cnst22+ ( C571*C16286 )  ) + ( C571*C16287 )  )  ) *be ) /C563;
    double C16160 =  (  ( - (  ( C16023*C16143 ) /C563 )  ) /C563 ) - (  ( C16024*C641 ) /C563 ) ;
    double C16429 = C16160+ (  ( C571*C16023 ) /C563 ) ;
    double C1801 = C605*C16429;
    double C16278 = C16039- (  ( C641*C16168 ) + (  ( C16160*C16143 ) /C563 )  ) ;
    double C16279 =  ( C571*C16160 ) +C16278;
    double C1783 = C16279+ ( C571*C16429 ) ;
    double C1792 = C1783*C605;
    double cnst27 =  (  (  ( C16160-C16168 ) *2 ) /C16013 ) - (  (  ( C16278*C16143 ) /C563 ) + ( C641*C16286 )  ) ;
    double C7438 =  ( cnst27+ ( C571*C16278 )  ) + ( C571*C16279 ) ;
    double C7436 =  ( C571*C1783 ) +C7438;
    double C16696 = C605*C7436;
    double C1793 = C618-zB;
    double C16927 =  (  ( C16483- (  ( C689*C1793 ) /C563 )  ) -C16738 ) + (  ( C641*C16893 ) /C563 ) ;
    double C1864 =  (  ( C634- (  ( C688*C1793 ) /C563 )  ) -C600 ) + (  ( C689*C641 ) /C563 ) ;
    double C16963 =  (  (  (  (  ( C1793*C1864 ) +C16539 ) -C16492 ) -C16769 ) - ( C641*C16927 )  ) -C16862;
    double C16586 = C1864/C597;
    double C1863 =  (  ( C688*C641 ) /C563 ) + (  ( C631- (  ( C1793*C686 ) /C563 )  ) -C596 ) ;
    double C7450 = C1863/C563;
    double C2909 = C1863/C597;
    double C1894 =  (  (  (  (  ( C1793*C1863 ) +C1805 ) -C716 ) -C1826 ) - ( C641*C1864 )  ) -C758;
    double C17059 =  (  (  (  ( C16524+ ( C1793*C1894 )  ) +C7450 ) -C16761 ) - ( C641*C16963 )  ) - ( C1864/C563 ) ;
    double C16543 = C1894/C597;
    double C1862 =  (  ( C626- (  ( C687*C1793 ) /C563 )  ) -C593 ) + (  ( C641*C686 ) /C563 ) ;
    double C1893 =  (  (  (  ( C1801+ ( C1793*C1862 )  ) -C712 ) -C1823 ) - ( C641*C1863 )  ) -C756;
    double C16537 = C1893/C597;
    double C7460 =  (  (  (  ( C1793*C1893 ) +C1792 ) + ( C1862/C563 )  ) -C1812 ) - ( C641*C1894 ) ;
    double C7461 = C7460-C7450;
    double C16844 =  ( C7461+C1783 ) - ( C571*C1893 ) ;
    double cnst42 =  (  (  (  ( C1793*C7461 ) +C16696 ) + (  ( C1893*3 ) /C597 )  ) -C16842 ) - ( C17059*C641 ) ;
    double gz002002 =  (  (  ( C7436+ ( cnst42- (  ( 3*C1894 ) /C597 )  )  ) - ( C571*C7461 )  ) +C7438 ) - ( C571*C16844 ) ;
    double C2906 = C1862/C597;
    double C606 =  (  ( ae*xA ) + ( be*xB )  ) /C563;
    double C627 = C606-xC;
    double C646 = be*C627;
    double C678 =  (  ( C646*C566 ) - (  ( C567*C589 ) /C563 )  ) *C677;
    double C692 = C678/C610;
    double C679 = C677* (  ( C574*C646 ) - (  ( C589*C566 ) /C563 )  ) ;
    double C746 =  ( - ( C679/C563 )  ) /C597;
    double C1838 =  (  ( C641*C679 ) /C563 ) - (  ( C1793*C678 ) /C563 ) ;
    double C2893 = C1838/C597;
    double C696 = C679/C610;
    double C680 =  (  ( C646*C577 ) - (  ( C589*C574 ) /C563 )  ) *C677;
    double C1839 =  (  ( C641*C680 ) /C563 ) - (  ( C1793*C679 ) /C563 ) ;
    double C7442 = C1839/C563;
    double C1873 =  (  (  ( C1793*C1838 ) -C692 ) - ( C641*C1839 )  ) -C746;
    double C16522 = C1873/C597;
    double C2897 = C1839/C597;
    double C16482 = C680/C610;
    double C748 =  ( - ( C680/C563 )  ) /C597;
    double C16891 = C677* (  ( C582*C646 ) - (  ( C581*C589 ) /C563 )  ) ;
    double C681 = C677* (  ( C581*C646 ) - (  ( C589*C577 ) /C563 )  ) ;
    double C1840 =  (  ( C641*C681 ) /C563 ) - (  ( C1793*C680 ) /C563 ) ;
    double C1874 =  (  (  ( C1793*C1839 ) -C696 ) - ( C641*C1840 )  ) -C748;
    double C7457 =  (  (  ( C1873*C1793 ) + ( C1838/C563 )  ) - ( C641*C1874 )  ) -C7442;
    double C16839 = C7457- ( C1873*C571 ) ;
    double C16529 = C1874/C597;
    double C16574 = C1840/C597;
    double C16858 =  ( - ( C681/C563 )  ) /C597;
    double C16925 =  (  ( C641*C16891 ) /C563 ) - (  ( C1793*C681 ) /C563 ) ;
    double C16961 =  (  (  ( C1793*C1840 ) -C16482 ) - ( C641*C16925 )  ) -C16858;
    double C17057 =  (  (  ( C1793*C1874 ) +C7442 ) - ( C641*C16961 )  ) - ( C1840/C563 ) ;
    double cnst63 =  (  (  ( C1793*C7457 ) + (  ( C1873*3 ) /C597 )  ) - ( C641*C17057 )  ) - (  ( 3*C1874 ) /C597 ) ;
    double C623 = C606-xB;
    double C774 =  (  ( C627*C679 ) /C563 ) + (  ( C626- (  ( C623*C678 ) /C563 )  ) -C593 ) ;
    double C775 =  (  ( C680*C627 ) /C563 ) + (  ( C631- (  ( C623*C679 ) /C563 )  ) -C596 ) ;
    double C786 = C775/C563;
    double C755 =  (  ( C688*C627 ) /C563 ) - (  ( C623*C686 ) /C563 ) ;
    double C773 = C755/C563;
    double C2915 =  ( C623*C1862 ) - ( C627*C1863 ) ;
    double C2924 =  (  (  ( C623*C1839 ) +C1805 ) -C1826 ) - ( C627*C1840 ) ;
    double C2923 =  (  ( C1801+ ( C623*C1838 )  ) -C1823 ) - ( C627*C1839 ) ;
    double C757 =  (  ( C689*C627 ) /C563 ) - (  ( C688*C623 ) /C563 ) ;
    double C796 =  (  (  ( C755*C623 ) -C716 ) - ( C627*C757 )  ) -C758;
    double C754 =  (  ( C627*C686 ) /C563 ) - (  ( C623*C687 ) /C563 ) ;
    double C795 =  (  (  ( C623*C754 ) -C712 ) - ( C755*C627 )  ) -C756;
    double C814 =  (  (  ( C754/C563 ) + ( C623*C795 )  ) - ( C796*C627 )  ) -C773;
    double C776 =  (  ( C627*C681 ) /C563 ) + (  ( C634- (  ( C623*C680 ) /C563 )  ) -C600 ) ;
    double C1897 =  ( C623*C1893 ) - ( C627*C1894 ) ;
    double C17068 =  (  ( C623*C1897 ) +C16537 ) - (  (  ( C623*C1894 ) - ( C16963*C627 )  ) *C627 ) ;
    double C17104 = C17068-C16543;
    double gz200002 =  ( C17104- ( C568*C1897 )  ) - ( C568* ( C1897- ( C568*C1893 )  )  ) ;
    double C1892 =  (  (  ( C623*C1873 ) +C1792 ) -C1812 ) - ( C627*C1874 ) ;
    double C16850 = C1892- ( C571*C2923 ) ;
    double C17152 =  (  (  ( C16696+ ( C623*C7457 )  ) -C16842 ) - ( C627*C17057 )  ) - ( C1892*C571 ) ;
    double cnst110 =  (  ( C627*C16891 ) /C563 ) + (  ( C16483- (  ( C623*C681 ) /C563 )  ) -C16738 ) ;
    double C2916 =  ( C623*C1863 ) - ( C1864*C627 ) ;
    double C17014 =  (  (  ( C623*C2916 ) +C2909 ) - ( C627* (  ( C623*C1864 ) - ( C627*C16927 )  )  )  ) -C16586;
    double C2933 =  (  ( C2906+ ( C623*C2915 )  ) - ( C627*C2916 )  ) -C2909;
    double C17110 =  (  (  ( C623*C2933 ) + ( C2915/C563 )  ) - ( C17014*C627 )  ) - ( C2916/C563 ) ;
    double gz200101 =  ( C17110- ( C568*C2933 )  ) - ( C568* ( C2933- ( C568*C2915 )  )  ) ;
    double cnst123 =  (  ( C623*C757 ) -C16492 ) - (  (  (  ( C16893*C627 ) /C563 ) - (  ( C689*C623 ) /C563 )  ) *C627 ) ;
    double cnst128 = C627* (  (  (  ( C623*C796 ) +C773 ) - ( C627* ( cnst123-C16862 )  )  ) - ( C757/C563 )  ) ;
    double cnst130 =  (  (  ( C623*C814 ) + (  ( 3*C795 ) /C597 )  ) -cnst128 ) - (  ( C796*3 ) /C597 ) ;
    double gz200200 =  ( cnst130- ( C568*C814 )  ) - ( C568* ( C814- ( C568*C795 )  )  ) ;
    double cnst132 = gz200200*cnst0;
    double C16011 = C568*be;
    double C16042 =  (  ( - (  ( C16023*C16011 ) /C563 )  ) /C563 ) - (  ( C16024*C627 ) /C563 ) ;
    double C16417 = C16042+ (  ( C568*C16023 ) /C563 ) ;
    double C16043 =  (  ( - (  ( C16024*C16011 ) /C563 )  ) /C563 ) - (  ( C16025*C627 ) /C563 ) ;
    double C16049 = C16039- (  (  ( C16042*C16011 ) /C563 ) + ( C627*C16043 )  ) ;
    double C16050 = C16049+ ( C568*C16042 ) ;
    double C16450 =  ( C568*C16417 ) +C16050;
    double C16834 =  ( C16450+C2933 ) - ( C571*C795 ) ;
    double C16293 = C16042-C16043;
    double C16388 = C16293/C16013;
    double C16186 =  ( C641*C16043 ) + (  ( C16042*C16143 ) /C563 ) ;
    double C16418 =  (  ( C16024*C568 ) /C563 ) +C16043;
    double C16152 =  (  ( C16417*C16143 ) /C563 ) + ( C641*C16418 ) ;
    double C16391 =  ( C571*C16417 ) -C16152;
    double C16852 =  ( C16391+C1897 ) - ( C571*C2915 ) ;
    double C16376 =  ( C16417-C16418 ) /C16013;
    double C807 =  (  (  (  ( C16417*C605 ) + ( C623*C774 )  ) -C692 ) - (  ( C16418*be ) /C563 )  ) - ( C775*C627 ) ;
    double C811 = C807-C746;
    double C16451 =  (  ( - (  ( C16366*C16011 ) /C563 )  ) /C563 ) - (  ( C627*C16373 ) /C563 ) ;
    double C16456 =  (  ( C568*C16366 ) /C563 ) +C16451;
    double C16449 =  (  ( - (  ( C16025*C16011 ) /C563 )  ) /C563 ) - (  ( C16366*C627 ) /C563 ) ;
    double cnst166 =  (  ( C16186*C16143 ) /C563 ) + ( C641* (  (  ( C16043*C16143 ) /C563 ) + ( C641*C16449 )  )  ) ;
    double C1787 =  (  ( C16388+cnst166 ) - ( C571*C16186 )  ) + ( C571* (  ( C571*C16042 ) -C16186 )  ) ;
    double C16468 = C16419- (  ( C627*C16451 ) + (  ( C16011*C16449 ) /C563 )  ) ;
    double C16467 = C16414- (  (  ( C16011*C16043 ) /C563 ) + ( C627*C16449 )  ) ;
    double cnst176 =  (  ( 2* ( C16043-C16449 )  ) /C16013 ) - (  ( C627*C16468 ) + (  ( C16467*C16011 ) /C563 )  ) ;
    double cnst179 =  (  ( C16293*2 ) /C16013 ) - (  (  ( C16049*C16011 ) /C563 ) + ( C16467*C627 )  ) ;
    double C562 =  (  ( C568*C16049 ) +cnst179 ) + ( C568*C16050 ) ;
    double C548 = C562+ ( C568*C16450 ) ;
    double gz101200 =  (  ( C17110+C548 ) - ( C571*C814 )  ) - ( C568*C16834 ) ;
    double C16079 = C16467+ ( C568*C16043 ) ;
    double C555 =  ( C568*C16418 ) +C16079;
    double C16434 =  (  ( C16450*C16143 ) /C563 ) + ( C641*C555 ) ;
    double C6476 = -C16434;
    double C2884 =  ( C16450*C571 ) -C16434;
    double C17162 =  ( C2884+C17104 ) - ( C571*C2933 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 3] +=  ( C17162- ( C568*C16852 )  ) *cnst4;
    double gz002200 =  ( C17162+C6476 ) - ( C571*C16834 ) ;
    double C819 =  (  (  ( C16450*C605 ) + ( C623*C811 )  ) + ( C774/C563 )  ) - (  ( be*C555 ) /C563 ) ;
    double cnst202 =  ( be* (  (  ( C568*C16079 ) + (  ( C568*C16467 ) +cnst176 )  ) + ( C568*C555 )  )  ) /C563;
    double C556 = C16449+ (  ( C568*C16025 ) /C563 ) ;
    double C16382 =  ( C16418-C556 ) /C16013;
    double C16173 =  (  ( C16418*C16143 ) /C563 ) + ( C641*C556 ) ;
    double C8194 =  (  (  ( C641*C16173 ) + (  ( C16152*C16143 ) /C563 )  ) +C16376 ) - ( C16152*C571 ) ;
    double C1782 =  ( C571*C16391 ) +C8194;
    double C17164 =  (  (  ( C623*C7461 ) - ( C17059*C627 )  ) +C1782 ) - ( C571*C1897 ) ;
    double C16396 =  ( C571*C16418 ) -C16173;
    double C2936 =  (  ( C2893+ (  ( C16391*C605 ) + ( C623*C2923 )  )  ) - (  ( be*C16396 ) /C563 )  ) - ( C627*C2924 ) ;
    double C2937 = C2936-C2897;
    double C16832 = C2937- ( C571*C811 ) ;
    double cnst225 =  (  (  (  ( C623*C776 ) + ( C556*C605 )  ) -C16482 ) - (  ( C16456*be ) /C563 )  ) - ( C627*cnst110 ) ;
    double C16471 =  (  ( C556*C16143 ) /C563 ) + ( C16456*C641 ) ;
    double cnst231 =  (  (  ( C16471*C641 ) + (  ( C16173*C16143 ) /C563 )  ) +C16382 ) - ( C571*C16173 ) ;
    double C16897 =  (  (  ( C1782*C605 ) + ( C1892*C623 )  ) +C16522 ) - (  ( be* ( cnst231+ ( C571*C16396 )  )  ) /C563 ) ;
    double C17066 = C16897- ( C627* (  (  ( C16524+ ( C623*C1874 )  ) -C16761 ) - ( C16961*C627 )  )  ) ;
    double C17102 = C17066-C16529;
    double gx200002 =  (  (  ( C17102+C1782 ) - ( C1892*C568 )  ) +C1787 ) - ( C568* (  ( C1892+C1783 ) - ( C568*C1873 )  )  ) ;
    double C17145 = C17102- ( C2937*C571 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 3] +=  (  ( C17145+C8194 ) - ( C568*C16850 )  ) *cnst4;
    double gx002200 = C17145- ( C571*C16832 ) ;
    double C808 =  (  (  (  ( C623*C775 ) + ( C16418*C605 )  ) -C696 ) - (  ( C556*be ) /C563 )  ) - ( C627*C776 ) ;
    double C812 = C808-C748;
    double C821 =  ( C819- ( C812*C627 )  ) -C786;
    double C16903 =  ( C2897+ (  ( C623*C2924 ) + ( C16396*C605 )  )  ) - (  (  (  ( C571*C556 ) -C16471 ) *be ) /C563 ) ;
    double C16985 = C16903- ( C627* (  (  (  ( C623*C1840 ) +C16539 ) -C16769 ) - ( C627*C16925 )  )  ) ;
    double C559 =  ( C568*C556 ) + (  ( C568*C16449 ) +C16468 ) ;
    double C16781 =  (  (  ( C571*C555 ) - (  (  ( C555*C16143 ) /C563 ) + ( C641*C559 )  )  ) *be ) /C563;
    double C17072 =  (  (  ( C2923/C563 ) + (  ( C2884*C605 ) + ( C2937*C623 )  )  ) -C16781 ) - (  ( C16985-C16574 ) *C627 ) ;
    double C17108 = C17072- ( C2924/C563 ) ;
    double cnst260 =  (  ( C571*C16050 ) - (  ( C641*C16079 ) + (  ( C16050*C16143 ) /C563 )  )  ) + (  ( C2884+C17108 ) - ( C2937*C568 )  ) ;
    double gx200101 = cnst260- ( C568* (  ( C2937+C16391 ) - ( C568*C2923 )  )  ) ;
    double gx101200 =  (  ( C17108- ( C571*C821 )  ) +C6476 ) - ( C568*C16832 ) ;
    double cnst270 =  (  ( C786+ (  ( C555*C605 ) + ( C812*C623 )  )  ) - (  ( be*C559 ) /C563 )  ) - ( C627* ( cnst225-C16858 )  ) ;
    double cnst273 =  (  (  (  ( C811*3 ) /C597 ) + (  ( C623*C821 ) + ( C605*C548 )  )  ) -cnst202 ) - ( C627* ( cnst270- ( C776/C563 )  )  ) ;
    double gx200200 =  ( C562+ (  (  ( cnst273- (  ( C812*3 ) /C597 )  ) +C548 ) - ( C568*C821 )  )  ) - ( C568* (  ( C16450+C821 ) - ( C568*C811 )  )  ) ;
    double cnst280 = cnst0*gx200200;
    double C16086 = be*C570;
    double C613 =  (  ( ae*yA ) + ( be*yB )  ) /C563;
    double C636 = C613-yC;
    double C16452 =  (  ( - (  ( C16366*C16086 ) /C563 )  ) /C563 ) - (  ( C16373*C636 ) /C563 ) ;
    double C16458 =  (  ( C16366*C570 ) /C563 ) +C16452;
    double C16753 =  ( C16458*be ) /C563;
    double C16132 =  (  ( - (  ( C16025*C16086 ) /C563 )  ) /C563 ) - (  ( C16366*C636 ) /C563 ) ;
    double C16470 = C16419- (  (  ( C16086*C16132 ) /C563 ) + ( C16452*C636 )  ) ;
    double C16427 =  (  ( C16025*C570 ) /C563 ) +C16132;
    double C16473 =  (  ( C16427*C16143 ) /C563 ) + ( C16458*C641 ) ;
    double C1248 =  (  ( C570*C16132 ) +C16470 ) + ( C570*C16427 ) ;
    double C16748 =  ( C1248*be ) /C563;
    double C16509 = C605*C16427;
    double C16792 =  ( be* (  ( C571*C16427 ) -C16473 )  ) /C563;
    double C1282 =  ( be*C16427 ) /C563;
    double C16108 =  (  ( - (  ( C16086*C16023 ) /C563 )  ) /C563 ) - (  ( C16024*C636 ) /C563 ) ;
    double C16423 =  (  ( C16023*C570 ) /C563 ) +C16108;
    double C1260 = C16423*C605;
    double C16137 =  (  ( C16042*C16086 ) /C563 ) + ( C636*C16043 ) ;
    double C16227 =  ( C16042*C570 ) -C16137;
    double C16469 =  ( C16456*C636 ) + (  ( C16086*C556 ) /C563 ) ;
    double C16476 =  ( C556*C570 ) -C16469;
    double C16100 =  (  ( C16417*C16086 ) /C563 ) + ( C16418*C636 ) ;
    double C16377 =  ( C16417*C570 ) -C16100;
    double C16428 =  ( C16449*C636 ) + (  ( C16086*C16043 ) /C563 ) ;
    double C3321 =  ( C571*C16227 ) - (  ( C641* (  ( C570*C16043 ) -C16428 )  ) + (  ( C16227*C16143 ) /C563 )  ) ;
    double cnst312 =  ( C16388+ (  (  ( C16086*C16137 ) /C563 ) + ( C16428*C636 )  )  ) - ( C570*C16137 ) ;
    double C16116 =  (  ( - (  ( C16024*C16086 ) /C563 )  ) /C563 ) - (  ( C16025*C636 ) /C563 ) ;
    double C16348 = C16108-C16116;
    double C16243 = C16414- (  (  ( C16086*C16116 ) /C563 ) + ( C16132*C636 )  ) ;
    double C16260 =  ( C641*C16116 ) + (  ( C16108*C16143 ) /C563 ) ;
    double cnst326 =  (  ( C16260*C16143 ) /C563 ) + ( C641* (  ( C641*C16132 ) + (  ( C16116*C16143 ) /C563 )  )  ) ;
    double C4768 =  (  (  ( C16348/C16013 ) +cnst326 ) - ( C571*C16260 )  ) + ( C571* (  ( C571*C16108 ) -C16260 )  ) ;
    double C16235 = C16039- (  (  ( C16086*C16108 ) /C563 ) + ( C16116*C636 )  ) ;
    double C16236 =  ( C16108*C570 ) +C16235;
    double C1245 =  ( C16423*C570 ) +C16236;
    double C1254 = C1245*C605;
    double cnst337 =  (  ( 2*C16348 ) /C16013 ) - (  (  ( C16086*C16235 ) /C563 ) + ( C16243*C636 )  ) ;
    double C4320 =  ( C570*C16236 ) + ( cnst337+ ( C16235*C570 )  ) ;
    double C4318 = C4320+ ( C1245*C570 ) ;
    double C16617 = C4318*C605;
    double C16424 = C16116+ (  ( C16024*C570 ) /C563 ) ;
    double C16250 =  ( C641*C16424 ) + (  ( C16423*C16143 ) /C563 ) ;
    double C3317 =  ( C16423*C571 ) -C16250;
    double C3322 = C3317*C605;
    double C1279 =  ( be*C16424 ) /C563;
    double C16255 =  ( C641*C16427 ) + (  ( C16424*C16143 ) /C563 ) ;
    double cnst344 =  (  ( C16423-C16424 ) /C16013 ) + (  ( C641*C16255 ) + (  ( C16250*C16143 ) /C563 )  ) ;
    double C8590 = cnst344- ( C571*C16250 ) ;
    double C4766 = C8590+ ( C571*C3317 ) ;
    double C16629 = C4766*C605;
    double cnst349 =  (  ( C16424-C16427 ) /C16013 ) + (  ( C641*C16473 ) + (  ( C16143*C16255 ) /C563 )  ) ;
    double C3318 =  ( C571*C16424 ) -C16255;
    double C16809 =  ( be* (  ( cnst349- ( C571*C16255 )  ) + ( C571*C3318 )  )  ) /C563;
    double C16592 = C605*C3318;
    double C3337 =  ( be*C3318 ) /C563;
    double C1264 = C16424*C605;
    double cnst355 =  (  (  ( C16116-C16132 ) *2 ) /C16013 ) - (  ( C16470*C636 ) + (  ( C16086*C16243 ) /C563 )  ) ;
    double C16244 =  ( C570*C16116 ) +C16243;
    double C6008 =  ( C571*C16236 ) - (  ( C641*C16244 ) + (  ( C16236*C16143 ) /C563 )  ) ;
    double C1246 = C16244+ ( C570*C16424 ) ;
    double C1274 =  ( C1246*be ) /C563;
    double cnst363 =  (  ( C1245*C16143 ) /C563 ) + ( C641*C1246 ) ;
    double C5540 =  ( C571*C1245 ) -cnst363;
    double C16648 = C5540*C605;
    double C6926 = -cnst363;
    double C16618 = be* (  ( C1246*C570 ) + (  ( cnst355+ ( C570*C16243 )  ) + ( C16244*C570 )  )  ) ;
    double C16801 = C16618/C563;
    double C16500 = C1246*C605;
    double C16819 =  (  (  ( C571*C1246 ) - (  ( C641*C1248 ) + (  ( C1246*C16143 ) /C563 )  )  ) *be ) /C563;
    double C16772 =  (  (  ( C570*C555 ) - (  (  ( C16086*C555 ) /C563 ) + ( C559*C636 )  )  ) *be ) /C563;
    double cnst373 =  ( C555*C636 ) + (  ( C16450*C16086 ) /C563 ) ;
    double C3808 = -cnst373;
    double C2364 =  ( C16450*C570 ) -cnst373;
    double C648 = be*C636;
    double C16892 =  (  ( C648*C582 ) - (  ( C581*C602 ) /C563 )  ) *C677;
    double C682 =  (  ( C574*C648 ) - (  ( C566*C602 ) /C563 )  ) *C677;
    double C751 =  ( - ( C682/C563 )  ) /C597;
    double C706 = C682/C610;
    double C685 =  (  ( C581*C648 ) - (  ( C602*C577 ) /C563 )  ) *C677;
    double C16926 =  (  ( C641*C16892 ) /C563 ) - (  ( C1793*C685 ) /C563 ) ;
    double C16860 =  ( - ( C685/C563 )  ) /C597;
    double C683 = C677* (  ( C648*C566 ) - (  ( C567*C602 ) /C563 )  ) ;
    double C749 =  (  ( C627*C682 ) /C563 ) - (  ( C623*C683 ) /C563 ) ;
    double C1841 =  (  ( C641*C682 ) /C563 ) - (  ( C1793*C683 ) /C563 ) ;
    double C2900 = C1841/C597;
    double C702 = C683/C610;
    double C684 = C677* (  ( C648*C577 ) - (  ( C574*C602 ) /C563 )  ) ;
    double C750 =  (  ( C627*C684 ) /C563 ) - (  ( C623*C682 ) /C563 ) ;
    double C767 = C750/C563;
    double C793 =  (  (  ( C623*C749 ) -C702 ) - ( C627*C750 )  ) -C751;
    double C16488 = C684/C610;
    double C752 =  (  ( C627*C685 ) /C563 ) - (  ( C623*C684 ) /C563 ) ;
    double cnst385 =  (  ( C623*C752 ) -C16488 ) - ( C627* (  (  ( C627*C16892 ) /C563 ) - (  ( C623*C685 ) /C563 )  )  ) ;
    double C1843 =  (  ( C641*C685 ) /C563 ) - (  ( C1793*C684 ) /C563 ) ;
    double C16580 = C1843/C597;
    double C16962 =  (  (  ( C1793*C1843 ) -C16488 ) - ( C641*C16926 )  ) -C16860;
    double C1842 =  (  ( C641*C684 ) /C563 ) - (  ( C1793*C682 ) /C563 ) ;
    double C1875 =  (  (  ( C1793*C1841 ) -C702 ) - ( C641*C1842 )  ) -C751;
    double C16531 = C1875/C597;
    double C2903 = C1842/C597;
    double C7446 = C1842/C563;
    double C2913 =  ( C623*C1841 ) - ( C627*C1842 ) ;
    double C2914 =  ( C623*C1842 ) - ( C1843*C627 ) ;
    double C17013 =  (  (  ( C623*C2914 ) +C2903 ) - ( C627* (  ( C623*C1843 ) - ( C627*C16926 )  )  )  ) -C16580;
    double C2932 =  (  ( C2900+ ( C623*C2913 )  ) - ( C627*C2914 )  ) -C2903;
    double C16833 = C2932- ( C571*C793 ) ;
    double C17109 =  (  (  ( C623*C2932 ) + ( C2913/C563 )  ) - ( C627*C17013 )  ) - ( C2914/C563 ) ;
    double gy200101 =  ( C17109- ( C568*C2932 )  ) - ( C568* ( C2932- ( C568*C2913 )  )  ) ;
    double C753 =  ( - ( C684/C563 )  ) /C597;
    double C794 =  (  (  ( C623*C750 ) -C706 ) - ( C627*C752 )  ) -C753;
    double cnst407 = C627* (  (  ( C767+ ( C623*C794 )  ) - ( C627* ( cnst385-C16860 )  )  ) - ( C752/C563 )  ) ;
    double C813 =  (  (  ( C623*C793 ) + ( C749/C563 )  ) - ( C627*C794 )  ) -C767;
    double gy101200 =  ( C17109- ( C571*C813 )  ) - ( C568*C16833 ) ;
    double cnst421 =  (  (  ( C623*C813 ) + (  ( C793*3 ) /C597 )  ) -cnst407 ) - (  ( 3*C794 ) /C597 ) ;
    double gy200200 =  ( cnst421- ( C568*C813 )  ) - ( C568* ( C813- ( C568*C793 )  )  ) ;
    double cnst423 = gy200200*cnst0;
    double C1876 =  (  (  ( C1793*C1842 ) -C706 ) - ( C641*C1843 )  ) -C753;
    double C7458 =  (  (  ( C1793*C1875 ) + ( C1841/C563 )  ) - ( C641*C1876 )  ) -C7446;
    double C16841 = C7458- ( C571*C1875 ) ;
    double C17058 =  (  ( C7446+ ( C1793*C1876 )  ) - ( C641*C16962 )  ) - ( C1843/C563 ) ;
    double cnst436 =  (  (  ( C1793*C7458 ) + (  ( 3*C1875 ) /C597 )  ) - ( C641*C17058 )  ) - (  ( C1876*3 ) /C597 ) ;
    double C1886 =  ( C623*C1875 ) - ( C627*C1876 ) ;
    double C17153 =  (  ( C623*C7458 ) - ( C627*C17058 )  ) - ( C571*C1886 ) ;
    double C17067 =  (  ( C623*C1886 ) +C16531 ) - ( C627* (  ( C623*C1876 ) - ( C627*C16962 )  )  ) ;
    double C16851 = C1886- ( C571*C2913 ) ;
    double C16535 = C1876/C597;
    double C17103 = C17067-C16535;
    double C17146 = C17103- ( C571*C2932 ) ;
    gy[(Ai + 3) * matrix_size + Bi + 3] +=  ( C17146- ( C568*C16851 )  ) *cnst4;
    double gy002200 = C17146- ( C571*C16833 ) ;
    double gy200002 =  ( C17103- ( C568*C1886 )  ) - ( C568* ( C1886- ( C568*C1875 )  )  ) ;
    double C16124 =  ( C556*C636 ) + (  ( C16418*C16086 ) /C563 ) ;
    double C16383 =  ( C16418*C570 ) -C16124;
    double C16591 = be* (  ( C571*C16383 ) - (  (  ( C16383*C16143 ) /C563 ) + ( C641*C16476 )  )  ) ;
    double cnst458 =  ( C641*C16383 ) + (  ( C16377*C16143 ) /C563 ) ;
    double C3316 =  ( C16377*C571 ) -cnst458;
    double C7798 = -cnst458;
    double C5542 =  (  (  ( C16100*C16143 ) /C563 ) + ( C16124*C641 )  ) - ( C571*C16100 ) ;
    double cnst466 =  (  (  (  ( C16124*C16086 ) /C563 ) + ( C16469*C636 )  ) +C16382 ) - ( C16124*C570 ) ;
    double C5176 =  (  (  ( C16124*C636 ) + (  ( C16086*C16100 ) /C563 )  ) +C16376 ) - ( C16100*C570 ) ;
    double C1244 =  ( C16377*C570 ) +C5176;
    double C1255 = C613-yB;
    double C3338 =  ( C1839*C1255 ) - ( C1840*C636 ) ;
    double C3351 =  (  (  ( C1255*C1842 ) +C1805 ) -C1826 ) - ( C1843*C636 ) ;
    double C1301 =  (  ( C680*C636 ) /C563 ) - (  ( C679*C1255 ) /C563 ) ;
    double C2377 = C1301/C597;
    double C4324 = C1301/C563;
    double C17022 =  (  ( C16524+ ( C1876*C1255 )  ) -C16761 ) - ( C636*C16962 ) ;
    double C17021 =  ( C1874*C1255 ) - ( C16961*C636 ) ;
    double C1307 =  (  ( C688*C636 ) /C563 ) - (  ( C686*C1255 ) /C563 ) ;
    double C2389 = C1307/C597;
    double C4332 = C1307/C563;
    double C16957 =  ( C1864*C1255 ) - ( C16927*C636 ) ;
    double C16955 =  ( C1840*C1255 ) - ( C16925*C636 ) ;
    double C17024 =  (  ( C2897+ ( C3338*C1255 )  ) - ( C16955*C636 )  ) -C16574;
    double C1322 =  (  ( C626- (  ( C683*C1255 ) /C563 )  ) -C593 ) + (  ( C682*C636 ) /C563 ) ;
    double C16922 =  (  ( C636*C16891 ) /C563 ) - (  ( C1255*C681 ) /C563 ) ;
    double C1306 =  (  ( C686*C636 ) /C563 ) - (  ( C687*C1255 ) /C563 ) ;
    double C1339 =  (  (  ( C1306*C1255 ) -C712 ) - ( C636*C1307 )  ) -C756;
    double C2395 =  ( C623*C1306 ) - ( C627*C1307 ) ;
    double C4777 =  ( C1893*C1255 ) - ( C1894*C636 ) ;
    double C16813 = C4777- ( C1893*C570 ) ;
    double C3341 =  ( C1255*C1862 ) - ( C636*C1863 ) ;
    double C16856 =  ( C4777+C3317 ) - ( C571*C3341 ) ;
    double C4775 =  ( C1873*C1255 ) - ( C1874*C636 ) ;
    double C16807 = C4775- ( C1873*C570 ) ;
    double C17090 =  (  ( C16629+ ( C623*C4775 )  ) -C16809 ) - ( C627*C17021 ) ;
    double C17111 =  (  (  ( C4775*C1255 ) +C16522 ) - ( C17021*C636 )  ) -C16529;
    double gx020002 =  ( C17111- ( C4775*C570 )  ) - ( C16807*C570 ) ;
    double C17155 =  (  ( C1255*C7457 ) - ( C17057*C636 )  ) - ( C571*C4775 ) ;
    double C16924 =  (  ( C16893*C636 ) /C563 ) - (  ( C689*C1255 ) /C563 ) ;
    double C3336 =  ( C1838*C1255 ) - ( C1839*C636 ) ;
    double C16853 = C4775- ( C571*C3336 ) ;
    double C3356 =  (  ( C3322+ ( C623*C3336 )  ) -C3337 ) - ( C3338*C627 ) ;
    double C17123 = C17090- ( C571*C3356 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 1] +=  (  ( C17123+C8590 ) - ( C568*C16853 )  ) *cnst4;
    gx[(Ai + 1) * matrix_size + Bi + 3] +=  ( C17123- ( C570*C16850 )  ) *cnst4;
    double C16821 = C3356- ( C2923*C570 ) ;
    double C6021 =  (  ( C2893+ ( C1255*C3336 )  ) - ( C3338*C636 )  ) -C2897;
    double C17084 =  (  ( C16648+ ( C623*C6021 )  ) -C16819 ) - ( C17024*C627 ) ;
    double C17117 = C17084- ( C570*C3356 ) ;
    double gx020101 = C17117- ( C16821*C570 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 3] +=  ( cnst3*gx200101 ) - ( cnst3*gx020101 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 3] +=  ( cnst5* ( C17152- ( C571*C16850 )  )  ) - (  ( gx200101*cnst1 ) + ( gx020101*cnst1 )  ) ;
    double C17148 = C17111- ( C571*C6021 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 1] +=  ( C17148- ( C16853*C570 )  ) *cnst4;
    double C17120 =  (  (  ( C3336/C563 ) + ( C1255*C6021 )  ) - ( C17024*C636 )  ) - ( C3338/C563 ) ;
    double C17042 =  (  (  ( C3336/C597 ) + (  ( C623*C3356 ) + ( C605*C3316 )  )  ) - ( C16591/C563 )  ) - ( C627* (  (  ( C16592+ ( C623*C3338 )  ) -C16792 ) - ( C627*C16955 )  )  ) ;
    double C17075 = C17042- ( C3338/C597 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 3] +=  (  (  ( C17075- ( C2937*C570 )  ) +C5542 ) - ( C16821*C568 )  ) *cnst4;
    double C16827 = C6021- ( C570*C3336 ) ;
    double gx020011 =  ( C17120- ( C570*C6021 )  ) - ( C570*C16827 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 1] +=  (  ( C6008+C17117 ) - ( C568*C16827 )  ) *cnst4;
    double gx200011 =  (  (  ( C17075+C3316 ) - ( C568*C3356 )  ) +C3321 ) - ( C568* (  ( C3317+C3356 ) - ( C568*C3336 )  )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 1] +=  ( cnst5* ( C17155- ( C571*C16853 )  )  ) - (  ( gx020011*cnst1 ) + ( gx200011*cnst1 )  ) ;
    gx[(Ai + 4) * matrix_size + Bi + 1] +=  ( cnst3*gx200011 ) - ( cnst3*gx020011 ) ;
    double C17165 =  ( C4766+ (  ( C7461*C1255 ) - ( C17059*C636 )  )  ) - ( C571*C4777 ) ;
    double C1302 =  (  ( C636*C681 ) /C563 ) - (  ( C680*C1255 ) /C563 ) ;
    double C16958 =  (  (  ( C1255*C1302 ) -C16482 ) - ( C16922*C636 )  ) -C16858;
    double C1336 =  (  (  ( C1255*C1301 ) -C696 ) - ( C636*C1302 )  ) -C748;
    double C2404 =  (  ( C1264+ ( C623*C1301 )  ) -C1282 ) - ( C627*C1302 ) ;
    double C16982 =  (  (  (  ( C16383*C605 ) + ( C623*C2404 )  ) +C2377 ) - (  ( be*C16476 ) /C563 )  ) - ( C627* (  (  (  ( C623*C1302 ) +C16509 ) -C16753 ) - ( C16922*C627 )  )  ) ;
    double C17045 =  (  (  ( C1336*C1255 ) +C4324 ) - ( C16958*C636 )  ) - ( C1302/C563 ) ;
    double C1323 =  (  ( C684*C636 ) /C563 ) + (  ( C631- (  ( C682*C1255 ) /C563 )  ) -C596 ) ;
    double C4328 = C1323/C563;
    double C2383 = C1323/C597;
    double C1355 =  (  (  (  (  ( C1255*C1322 ) +C1260 ) -C702 ) -C1279 ) - ( C1323*C636 )  ) -C751;
    double C2393 =  ( C623*C1322 ) - ( C627*C1323 ) ;
    double C1308 =  (  ( C689*C636 ) /C563 ) - (  ( C688*C1255 ) /C563 ) ;
    double C1340 =  (  (  ( C1255*C1307 ) -C716 ) - ( C1308*C636 )  ) -C758;
    double C1350 =  ( C623*C1339 ) - ( C1340*C627 ) ;
    double C16817 = C1350- ( C2395*C570 ) ;
    double C4341 =  (  (  ( C1306/C563 ) + ( C1255*C1339 )  ) - ( C1340*C636 )  ) -C4332;
    double C16805 = C4341- ( C570*C1339 ) ;
    double C16960 =  (  (  ( C1308*C1255 ) -C16492 ) - ( C16924*C636 )  ) -C16862;
    double C17047 =  (  ( C4332+ ( C1340*C1255 )  ) - ( C16960*C636 )  ) - ( C1308/C563 ) ;
    double cnst546 =  (  (  (  ( 3*C1339 ) /C597 ) + ( C1255*C4341 )  ) - ( C636*C17047 )  ) - (  ( C1340*3 ) /C597 ) ;
    double gz020020 =  ( cnst546- ( C570*C4341 )  ) - ( C570*C16805 ) ;
    double cnst550 = cnst0*gz020020;
    double C17143 =  (  ( C623*C4341 ) - ( C627*C17047 )  ) - ( C1350*C570 ) ;
    double gz020110 = C17143- ( C16817*C570 ) ;
    double gz110020 = C17143- ( C568*C16805 ) ;
    double C17065 =  (  ( C1339/C597 ) + ( C1350*C623 )  ) - (  (  ( C623*C1340 ) - ( C16960*C627 )  ) *C627 ) ;
    double C17101 = C17065- ( C1340/C597 ) ;
    double gz200020 =  ( C17101- ( C1350*C568 )  ) - ( C568* ( C1350- ( C568*C1339 )  )  ) ;
    double cnst561 = cnst0*gz200020;
    double C2396 =  ( C623*C1307 ) - ( C1308*C627 ) ;
    double C2413 =  (  (  ( C2395*C623 ) + ( C1306/C597 )  ) - ( C2396*C627 )  ) -C2389;
    double C16798 = C2413- ( C795*C570 ) ;
    double C17140 = C17101- ( C570*C2413 ) ;
    double gz020200 = C17140- ( C16798*C570 ) ;
    double cnst568 =  (  (  ( gz200200*0.25 ) + ( 0.25*gz200020 )  ) - ( 0.5*gz200002 )  ) + ( 0.25*gz020200 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 4] +=  ( gz020020*cnst2 ) + (  (  ( gz200200*cnst2 ) - ( gz200020*cnst2 )  ) - ( cnst2*gz020200 )  ) ;
    double cnst572 = cnst0*gz020200;
    gz[(Ai + 0) * matrix_size + Bi + 0] +=  ( C17140- ( C568*C16817 )  ) *cnst4;
    double C17011 =  (  (  ( C623*C2396 ) +C2389 ) - ( C627* (  ( C623*C1308 ) - ( C627*C16924 )  )  )  ) - ( C1308/C597 ) ;
    double C17107 =  (  (  ( C2395/C563 ) + ( C623*C2413 )  ) - ( C627*C17011 )  ) - ( C2396/C563 ) ;
    double gz110200 =  ( C17107- ( C814*C570 )  ) - ( C568*C16798 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 4] +=  ( gz110200*cnst3 ) - ( cnst3*gz110020 ) ;
    double gz200110 =  ( C17107- ( C568*C2413 )  ) - ( C568* ( C2413- ( C2395*C568 )  )  ) ;
    gz[(Ai + 4) * matrix_size + Bi + 0] +=  ( cnst3*gz200110 ) - ( cnst3*gz020110 ) ;
    double C1324 =  (  ( C634- (  ( C684*C1255 ) /C563 )  ) -C600 ) + (  ( C685*C636 ) /C563 ) ;
    double C1356 =  (  (  (  ( C1264+ ( C1323*C1255 )  ) -C706 ) -C1282 ) - ( C1324*C636 )  ) -C753;
    double C4342 =  (  (  ( C1322/C563 ) + ( C1254+ ( C1355*C1255 )  )  ) -C1274 ) - ( C1356*C636 ) ;
    double C4343 = C4342-C4328;
    double C16803 =  ( C1245+C4343 ) - ( C1355*C570 ) ;
    double C1359 =  ( C623*C1355 ) - ( C627*C1356 ) ;
    double C16816 =  ( C16377+C1359 ) - ( C570*C2393 ) ;
    double C2394 =  ( C623*C1323 ) - ( C627*C1324 ) ;
    double C2412 =  (  (  ( C1322/C597 ) + ( C623*C2393 )  ) - ( C2394*C627 )  ) -C2383;
    double C16797 =  ( C16450+C2412 ) - ( C793*C570 ) ;
    double C3350 =  (  (  ( C1841*C1255 ) +C1801 ) -C1823 ) - ( C636*C1842 ) ;
    double C6025 =  (  (  ( C2900+ ( C3322+ ( C1255*C3350 )  )  ) -C3337 ) - ( C3351*C636 )  ) -C2903;
    double C16836 = C6025- ( C571*C1355 ) ;
    double C3357 =  ( C623*C3350 ) - ( C627*C3351 ) ;
    double C16823 =  ( C16391+C3357 ) - ( C570*C2913 ) ;
    double C16847 = C3357- ( C571*C2393 ) ;
    double C16829 =  ( C3317+C6025 ) - ( C570*C3350 ) ;
    double C16923 =  (  ( C636*C16892 ) /C563 ) + (  ( C16483- (  ( C685*C1255 ) /C563 )  ) -C16738 ) ;
    double C17010 =  (  (  ( C2394*C623 ) +C2383 ) - (  (  ( C623*C1324 ) - ( C627*C16923 )  ) *C627 )  ) - ( C1324/C597 ) ;
    double C17106 =  (  (  ( C623*C2412 ) + ( C2393/C563 )  ) - ( C627*C17010 )  ) - ( C2394/C563 ) ;
    double gy200110 =  ( C17106- ( C568*C2412 )  ) - ( C568* ( C2412- ( C568*C2393 )  )  ) ;
    double gy110200 =  (  ( C17106+C548 ) - ( C813*C570 )  ) - ( C568*C16797 ) ;
    double C16959 =  (  (  (  ( C16509+ ( C1255*C1324 )  ) -C16488 ) -C16753 ) - ( C16923*C636 )  ) -C16860;
    double C17046 =  (  (  ( C4328+ (  ( C1356*C1255 ) +C16500 )  ) -C16748 ) - ( C16959*C636 )  ) - ( C1324/C563 ) ;
    double cnst632 =  (  (  (  ( C1255*C4343 ) +C16617 ) + (  ( C1355*3 ) /C597 )  ) -C16801 ) - ( C17046*C636 ) ;
    double gy020020 =  ( C4320+ (  ( C4318+ ( cnst632- (  ( C1356*3 ) /C597 )  )  ) - ( C570*C4343 )  )  ) - ( C16803*C570 ) ;
    double cnst638 = cnst0*gy020020;
    double C17161 =  (  (  ( C623*C4343 ) - ( C17046*C627 )  ) +C1244 ) - ( C570*C1359 ) ;
    double gy020110 =  ( C17161+C5176 ) - ( C570*C16816 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 0] +=  ( cnst3*gy200110 ) - ( cnst3*gy020110 ) ;
    double gy110020 = C17161- ( C568*C16803 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 4] +=  ( cnst3*gy110200 ) - ( gy110020*cnst3 ) ;
    double C17064 =  (  ( C623*C1359 ) + ( C1355/C597 )  ) - (  (  ( C623*C1356 ) - ( C627*C16959 )  ) *C627 ) ;
    double C17100 = C17064- ( C1356/C597 ) ;
    double C17160 =  ( C2364+C17100 ) - ( C2412*C570 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 0] +=  ( C17160- ( C568*C16816 )  ) *cnst4;
    double gy020200 =  ( C17160+C3808 ) - ( C16797*C570 ) ;
    double cnst650 = cnst0*gy020200;
    double gy200020 =  ( C17100- ( C568*C1359 )  ) - ( C568* ( C1359- ( C568*C1355 )  )  ) ;
    double cnst652 = gy200020*cnst0;
    gy[(Ai + 4) * matrix_size + Bi + 4] +=  ( cnst2*gy020020 ) + (  (  ( gy200200*cnst2 ) - ( gy200020*cnst2 )  ) - ( cnst2*gy020200 )  ) ;
    double cnst667 =  (  (  ( gy200020*0.25 ) + ( 0.25*gy200200 )  ) - ( 0.5*gy200002 )  ) + ( 0.25*gy020200 ) ;
    double C16956 =  (  (  ( C1843*C1255 ) +C16539 ) -C16769 ) - ( C16926*C636 ) ;
    double C17025 =  (  (  ( C2903+ (  ( C1255*C3351 ) +C16592 )  ) -C16792 ) - ( C16956*C636 )  ) -C16580;
    double C17085 =  ( C623*C6025 ) - ( C627*C17025 ) ;
    double C17144 =  ( C17085+C3316 ) - ( C3357*C570 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 1] += cnst4* ( C17144- ( C16829*C568 )  ) ;
    double gy020101 =  ( C17144+C5542 ) - ( C570*C16823 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 3] +=  ( gy200101*cnst3 ) - ( gy020101*cnst3 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 3] +=  ( cnst5* ( C17153- ( C571*C16851 )  )  ) - (  ( gy200101*cnst1 ) + ( gy020101*cnst1 )  ) ;
    double C17133 = C17085- ( C571*C1359 ) ;
    double gy101020 = C17133- ( C568*C16836 ) ;
    gy[(Ai + 3) * matrix_size + Bi + 2] +=  (  ( C17153- ( C568*C16841 )  ) *cnst5 ) - (  ( gy101200*cnst1 ) + ( gy101020*cnst1 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 4] +=  ( cnst3*gy101200 ) - ( cnst3*gy101020 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 0] += cnst4* (  ( C17133+C7798 ) - ( C570*C16847 )  ) ;
    double C17088 =  (  (  (  ( C1255*C6025 ) +C16648 ) + ( C3350/C563 )  ) -C16819 ) - ( C636*C17025 ) ;
    double C17121 = C17088- ( C3351/C563 ) ;
    double gy020011 =  (  (  ( C5540+C17121 ) - ( C570*C6025 )  ) +C6008 ) - ( C16829*C570 ) ;
    double gy011020 =  (  ( C17121- ( C571*C4343 )  ) +C6926 ) - ( C16836*C570 ) ;
    double C17043 =  (  ( C623*C3357 ) + ( C3350/C597 )  ) - (  (  ( C623*C3351 ) - ( C627*C16956 )  ) *C627 ) ;
    double C17076 = C17043- ( C3351/C597 ) ;
    double gy200011 =  ( C17076- ( C568*C3357 )  ) - (  ( C3357- ( C568*C3350 )  ) *C568 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 1] +=  ( cnst3*gy200011 ) - ( cnst3*gy020011 ) ;
    double C17136 = C17076- ( C571*C2412 ) ;
    double gy011200 =  ( C6476+C17136 ) - ( C16833*C570 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 4] +=  ( gy011200*cnst3 ) - ( cnst3*gy011020 ) ;
    gy[(Ai + 3) * matrix_size + Bi + 0] +=  ( C17136- ( C568*C16847 )  ) *cnst4;
    gy[(Ai + 0) * matrix_size + Bi + 3] += cnst4* (  (  ( C2884+C17076 ) - ( C2932*C570 )  ) - ( C568*C16823 )  ) ;
    double C4779 =  (  (  ( C1255*C1875 ) +C1792 ) -C1812 ) - ( C1876*C636 ) ;
    double C17156 =  (  (  (  ( C7458*C1255 ) +C16696 ) -C16842 ) - ( C17058*C636 )  ) - ( C571*C4779 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 2] +=  ( cnst5* (  ( C17156+C7438 ) - ( C16841*C570 )  )  ) - (  ( gy011200*cnst1 ) + ( gy011020*cnst1 )  ) ;
    double C17091 =  ( C623*C4779 ) - ( C627*C17022 ) ;
    double C17124 = C17091- ( C571*C3357 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 3] +=  (  ( C17124+C8194 ) - ( C16851*C570 )  ) *cnst4;
    gy[(Ai + 2) * matrix_size + Bi + 0] +=  ( cnst5* ( C17124- ( C571*C16847 )  )  ) - (  ( gy200110*cnst1 ) + ( gy020110*cnst1 )  ) ;
    double C16811 =  ( C4779+C1783 ) - ( C570*C1875 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 2] +=  ( cnst5* (  (  ( C17091+C1782 ) - ( C1886*C570 )  ) - ( C568*C16811 )  )  ) - (  ( gy110020*cnst1 ) + ( gy110200*cnst1 )  ) ;
    double C16855 = C4779- ( C571*C3350 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 1] +=  ( cnst5* ( C17156- ( C571*C16855 )  )  ) - (  ( gy200011*cnst1 ) + ( cnst1*gy020011 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 1] += cnst4* ( C17124- ( C568*C16855 )  ) ;
    double C17112 =  (  (  (  (  ( C4779*C1255 ) +C16629 ) +C16531 ) -C16809 ) - ( C636*C17022 )  ) -C16535;
    double gy020002 =  (  (  ( C4766+C17112 ) - ( C4779*C570 )  ) +C4768 ) - ( C570*C16811 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 2] +=  (  ( cnst650+ (  ( gy200002*cnst1 ) - ( cnst652+cnst423 )  )  ) +cnst638 ) - ( gy020002*cnst1 ) ;
    double C17149 = C17112- ( C571*C6025 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 1] += cnst4* (  ( C17149+C8590 ) - ( C16855*C570 )  ) ;
    double gy002020 = C17149- ( C571*C16836 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 4] +=  (  ( gy002200*cnst1 ) + (  (  ( cnst652-cnst423 ) -cnst650 ) +cnst638 )  ) - ( gy002020*cnst1 ) ;
    double cnst720 =  (  (  ( cnst667+ ( 0.25*gy020020 )  ) - ( gy020002*0.5 )  ) - ( gy002200*0.5 )  ) - ( 0.5*gy002020 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 2] += cnst720+ (  ( cnst436- ( C571*C7458 )  ) - ( C571*C16841 )  ) ;
    double C1300 =  (  ( C679*C636 ) /C563 ) - (  ( C1255*C678 ) /C563 ) ;
    double C1335 =  (  (  ( C1300*C1255 ) -C692 ) - ( C1301*C636 )  ) -C746;
    double C16835 = C6021- ( C571*C1335 ) ;
    double gx002020 = C17148- ( C16835*C571 ) ;
    double C1354 =  (  ( C1254+ ( C623*C1335 )  ) -C1274 ) - ( C627*C1336 ) ;
    double C17132 = C17084- ( C1354*C571 ) ;
    double gx101020 =  ( C17132+C6926 ) - ( C568*C16835 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 4] +=  ( cnst3*gx101200 ) - ( cnst3*gx101020 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 2] +=  (  (  ( C17152+C7438 ) - ( C568*C16839 )  ) *cnst5 ) - (  ( gx101020*cnst1 ) + ( gx101200*cnst1 )  ) ;
    double C16894 =  (  (  ( C623*C1354 ) + ( C1244*C605 )  ) + ( C1335/C597 )  ) - (  ( be* ( cnst466+ ( C570*C16383 )  )  ) /C563 ) ;
    double C17063 = C16894- (  (  (  ( C16500+ ( C623*C1336 )  ) -C16748 ) - ( C16958*C627 )  ) *C627 ) ;
    double C17099 = C17063- ( C1336/C597 ) ;
    double gx200020 =  (  (  ( C17099+C1244 ) - ( C568*C1354 )  ) + (  ( C570*C16227 ) +cnst312 )  ) - ( C568* (  ( C1354+C1245 ) - ( C568*C1335 )  )  ) ;
    double cnst745 = gx200020*cnst0;
    double C2403 =  (  ( C1260+ ( C623*C1300 )  ) -C1279 ) - ( C627*C1301 ) ;
    double C2415 =  (  (  ( C16377*C605 ) + ( C623*C2403 )  ) + ( C1300/C597 )  ) - (  ( be*C16383 ) /C563 ) ;
    double C2417 =  ( C2415- ( C2404*C627 )  ) -C2377;
    double C16796 = C2417- ( C811*C570 ) ;
    double C17138 = C17099- ( C2417*C570 ) ;
    double gx020200 = C17138- ( C570*C16796 ) ;
    double cnst752 = gx020200*cnst0;
    double cnst756 =  ( 0.25*gx020200 ) + (  (  ( 0.25*gx200200 ) + ( gx200020*0.25 )  ) - ( 0.5*gx200002 )  ) ;
    double C17135 = C17075- ( C571*C2417 ) ;
    double gx011200 = C17135- ( C570*C16832 ) ;
    double C16846 = C3356- ( C571*C2403 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 0] +=  (  ( C17135+C7798 ) - ( C568*C16846 )  ) *cnst4;
    gx[(Ai + 1) * matrix_size + Bi + 0] += cnst4* ( C17132- ( C570*C16846 )  ) ;
    double C17069 =  (  (  ( C2403/C563 ) + (  ( C623*C2417 ) + ( C2364*C605 )  )  ) -C16772 ) - (  ( C16982- ( C1302/C597 )  ) *C627 ) ;
    double C17105 = C17069- ( C2404/C563 ) ;
    double cnst773 =  (  ( C2364+C17105 ) - ( C568*C2417 )  ) + (  ( C570*C16050 ) - (  ( C16079*C636 ) + (  ( C16086*C16050 ) /C563 )  )  ) ;
    double gx200110 = cnst773- ( C568* (  ( C16377+C2417 ) - ( C568*C2403 )  )  ) ;
    double gx110200 =  (  ( C17105- ( C570*C821 )  ) +C3808 ) - ( C568*C16796 ) ;
    double C16815 = C1354- ( C2403*C570 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 0] +=  (  ( C17138+C5176 ) - ( C568*C16815 )  ) *cnst4;
    double C4339 =  (  (  ( C1300/C563 ) + ( C1255*C1335 )  ) - ( C1336*C636 )  ) -C4324;
    double gx011020 =  ( C17120- ( C571*C4339 )  ) - ( C16835*C570 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 4] +=  ( cnst3*gx011200 ) - ( cnst3*gx011020 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 2] +=  ( cnst5* ( C17155- ( C16839*C570 )  )  ) - (  ( gx011020*cnst1 ) + ( gx011200*cnst1 )  ) ;
    double C16800 = C4339- ( C570*C1335 ) ;
    double cnst793 =  (  (  ( C4339*C1255 ) + (  ( 3*C1335 ) /C597 )  ) - ( C17045*C636 )  ) - (  ( 3*C1336 ) /C597 ) ;
    double gx020020 =  ( cnst793- ( C4339*C570 )  ) - ( C16800*C570 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 4] +=  (  (  ( cnst2*gx200200 ) - ( gx200020*cnst2 )  ) - ( gx020200*cnst2 )  ) + ( gx020020*cnst2 ) ;
    double cnst800 =  (  (  ( cnst756+ ( 0.25*gx020020 )  ) - ( 0.5*gx020002 )  ) - ( gx002200*0.5 )  ) - ( 0.5*gx002020 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 2] += cnst800+ (  ( cnst63- ( C571*C7457 )  ) - ( C571*C16839 )  ) ;
    double cnst801 = gx020020*cnst0;
    gx[(Ai + 2) * matrix_size + Bi + 4] +=  (  ( gx002200*cnst1 ) + (  (  ( cnst745-cnst280 ) -cnst752 ) +cnst801 )  ) - ( gx002020*cnst1 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 2] +=  (  ( cnst752+ (  ( gx200002*cnst1 ) - ( cnst280+cnst745 )  )  ) +cnst801 ) - ( gx020002*cnst1 ) ;
    double C17141 =  (  (  (  ( C623*C4339 ) +C16617 ) -C16801 ) - ( C17045*C627 )  ) - ( C1354*C570 ) ;
    double gx110020 =  ( C4320+C17141 ) - ( C568*C16800 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 2] +=  ( cnst5* (  ( C4768+ ( C17090- ( C1892*C570 )  )  ) - ( C568*C16807 )  )  ) - (  ( gx110200*cnst1 ) + ( gx110020*cnst1 )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 4] +=  ( cnst3*gx110200 ) - ( cnst3*gx110020 ) ;
    double gx020110 = C17141- ( C16815*C570 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 0] +=  ( cnst5* ( C17123- ( C571*C16846 )  )  ) - (  ( gx200110*cnst1 ) + ( gx020110*cnst1 )  ) ;
    gx[(Ai + 4) * matrix_size + Bi + 0] +=  ( gx200110*cnst3 ) - ( cnst3*gx020110 ) ;
    double C17023 =  ( C1894*C1255 ) - ( C16963*C636 ) ;
    double C17113 =  (  ( C16537+ ( C4777*C1255 )  ) - ( C17023*C636 )  ) -C16543;
    double gz020002 =  ( C17113- ( C4777*C570 )  ) - ( C16813*C570 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 2] +=  ( cnst550+ ( cnst572+ (  ( gz200002*cnst1 ) - ( cnst561+cnst132 )  )  )  ) - ( gz020002*cnst1 ) ;
    double C17092 =  ( C623*C4777 ) - ( C17023*C627 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 2] +=  ( cnst5* (  ( C17092- ( C570*C1897 )  ) - ( C16813*C568 )  )  ) - (  ( cnst1*gz110020 ) + ( gz110200*cnst1 )  ) ;
    double C3342 =  ( C1255*C1863 ) - ( C1864*C636 ) ;
    double C3352 =  ( C623*C3341 ) - ( C3342*C627 ) ;
    double C17151 =  ( C17092+C3316 ) - ( C571*C3352 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 1] +=  ( C17151- ( C16856*C568 )  ) *cnst4;
    gz[(Ai + 1) * matrix_size + Bi + 3] +=  ( C17151- ( C570*C16852 )  ) *cnst4;
    double C16825 = C3352- ( C2915*C570 ) ;
    double C16848 =  ( C16377+C3352 ) - ( C2395*C571 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 0] +=  (  (  ( C7798+C17151 ) - ( C571*C16848 )  ) *cnst5 ) - (  ( gz020110*cnst1 ) + ( cnst1*gz200110 )  ) ;
    double C17044 =  (  ( C623*C3352 ) + ( C3341/C597 )  ) - ( C627* (  ( C623*C3342 ) - ( C627*C16957 )  )  ) ;
    double C6023 =  (  ( C2906+ ( C3341*C1255 )  ) - ( C3342*C636 )  ) -C2909;
    double C16831 = C6023- ( C570*C3341 ) ;
    double C17163 =  ( C17113+C5540 ) - ( C571*C6023 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 1] += cnst4* ( C17163- ( C16856*C570 )  ) ;
    double C16837 =  ( C1245+C6023 ) - ( C571*C1339 ) ;
    double gz002020 =  ( C6926+C17163 ) - ( C571*C16837 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 4] +=  (  ( gz002200*cnst1 ) + ( cnst550+ (  ( cnst561-cnst132 ) -cnst572 )  )  ) - ( gz002020*cnst1 ) ;
    double cnst838 =  (  (  (  ( 0.25*gz020020 ) +cnst568 ) - ( gz020002*0.5 )  ) - ( gz002200*0.5 )  ) - ( 0.5*gz002020 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 2] += cnst838+gz002002;
    double C17026 =  (  ( C2909+ ( C3342*C1255 )  ) - ( C16957*C636 )  ) -C16586;
    double C17086 =  ( C623*C6023 ) - ( C17026*C627 ) ;
    double C17119 = C17086- ( C3352*C570 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 1] += cnst4* ( C17119- ( C568*C16831 )  ) ;
    double gz020101 = C17119- ( C570*C16825 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 3] +=  ( cnst3*gz200101 ) - ( cnst3*gz020101 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 3] +=  ( cnst5* (  ( C8194+C17164 ) - ( C571*C16852 )  )  ) - (  ( gz020101*cnst1 ) + ( gz200101*cnst1 )  ) ;
    double C17158 =  ( C17086+C1244 ) - ( C1350*C571 ) ;
    double gz101020 = C17158- ( C568*C16837 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 4] +=  ( cnst3*gz101200 ) - ( cnst3*gz101020 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 2] +=  ( cnst5* ( C17164- ( C568*C16844 )  )  ) - (  ( gz101020*cnst1 ) + ( cnst1*gz101200 )  ) ;
    gz[(Ai + 1) * matrix_size + Bi + 0] +=  ( C17158- ( C16848*C570 )  ) *cnst4;
    double C17077 = C17044- ( C3342/C597 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 3] +=  (  ( C17077- ( C570*C2933 )  ) - ( C568*C16825 )  ) *cnst4;
    double C17159 =  ( C17077+C2364 ) - ( C571*C2413 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 0] +=  ( C17159- ( C568*C16848 )  ) *cnst4;
    double gz011200 = C17159- ( C16834*C570 ) ;
    double gz200011 =  ( C17077- ( C568*C3352 )  ) - ( C568* ( C3352- ( C568*C3341 )  )  ) ;
    double C17122 =  (  (  ( C1255*C6023 ) + ( C3341/C563 )  ) - ( C17026*C636 )  ) - ( C3342/C563 ) ;
    double gz020011 =  ( C17122- ( C570*C6023 )  ) - ( C16831*C570 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 1] +=  ( cnst3*gz200011 ) - ( cnst3*gz020011 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 1] +=  ( cnst5* (  ( C17165+C8590 ) - ( C16856*C571 )  )  ) - (  ( gz020011*cnst1 ) + ( cnst1*gz200011 )  ) ;
    double gz011020 =  (  ( C17122+C4318 ) - ( C571*C4341 )  ) - ( C16837*C570 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 2] +=  ( cnst5* ( C17165- ( C570*C16844 )  )  ) - (  ( gz011020*cnst1 ) + ( gz011200*cnst1 )  ) ;
    gz[(Ai + 1) * matrix_size + Bi + 4] +=  ( cnst3*gz011200 ) - ( cnst3*gz011020 ) ;
}
