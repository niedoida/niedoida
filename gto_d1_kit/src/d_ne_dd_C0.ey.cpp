/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d1_kit/gto_d1.hpp"
#include <cmath>

namespace {
    static const double Pi = M_PI;
}

void vne_gradient_22_3(
double ae , 
double be , 
double xA , 
double yA , 
double zA , 
double xB , 
double yB , 
double zB , 
double xC , 
double yC , 
double zC , 
const double* bs , 
double* const gx , 
double* const gy , 
double* const gz , 
std::size_t matrix_size , 
std::size_t Ai , 
std::size_t Bi ) 
{
    double cnst0 = std::sqrt(0.5625);
    double cnst1 = std::sqrt(0.1875);
    double C442 = zA-zB;
    double cnst2 = std::sqrt(2.25);
    double C445 = bs[3];
    double C439 = bs[1];
    double C447 = bs[5];
    double C444 = bs[2];
    double C446 = bs[4];
    double C441 = yA-yB;
    double cnst3 = std::sqrt(0.75);
    double cnst4 = std::sqrt(9.);
    double C440 = xA-xB;
    double C12472 = C442*be;
    double C468 =  ( be*ae ) * (  ( std::pow(C442 , 2) ) + (  ( std::pow(C441 , 2) ) + ( std::pow(C440 , 2) )  )  ) ;
    double C438 = be+ae;
    double C12413 = C438*2.;
    double C471 = std::exp( ( - ( C468/C438 )  ) );
    double C472 = C471*Pi;
    double C12389 = C471* ( Pi*2. ) ;
    double C12578 = C12389*C445;
    double C431 = C12578/C438;
    double C12583 = C446*C12389;
    double C435 = C12583/C438;
    double C12575 = C444*C12389;
    double C428 = C12575/C438;
    double C12603 =  ( C428-C431 ) /C12413;
    double C12390 = C439*C12389;
    double C426 = C12390/C438;
    double C12424 =  ( C426-C428 ) /C12413;
    double C459 =  (  ( be*xB ) + ( ae*xA )  ) /C438;
    double C465 = C459-xC;
    double C476 =  ( C472*C465 ) *4;
    double C482 = C446*C476;
    double C479 = C476*C439;
    double C481 = C476*C445;
    double C480 = C476*C444;
    double C12653 = C476*C447;
    double C463 = C459-xB;
    double C527 =  (  ( C463*C479 ) +C426 ) - ( C480*C465 ) ;
    double C528 =  (  ( C480*C463 ) +C428 ) - ( C481*C465 ) ;
    double C547 = C528/C438;
    double C529 =  ( C431+ ( C463*C481 )  ) - ( C465*C482 ) ;
    double C456 = C438*2;
    double C493 = C479/C456;
    double C496 = C480/C456;
    double C499 = C481/C456;
    double C12654 = C482/C456;
    double C462 =  (  ( be*zB ) + ( zA*ae )  ) /C438;
    double C1317 = C462-zB;
    double C467 = C462-zC;
    double C12484 =  (  ( - (  ( C12390*C12472 ) /C438 )  ) /C438 ) - (  ( C467*C12575 ) /C438 ) ;
    double C12610 = C12484+ (  ( C442*C12390 ) /C438 ) ;
    double C12497 =  (  ( - (  ( C12575*C12472 ) /C438 )  ) /C438 ) - (  ( C467*C12578 ) /C438 ) ;
    double C12613 = C12497+ (  ( C442*C12575 ) /C438 ) ;
    double C12542 = C12424- (  ( C467*C12497 ) + (  ( C12484*C12472 ) /C438 )  ) ;
    double C12543 = C12542+ ( C442*C12484 ) ;
    double C1311 = C12543+ ( C442*C12610 ) ;
    double C12871 = C467*C12653;
    double C12961 =  ( C1317*C482 ) -C12871;
    double C12627 =  (  ( - (  ( C12472*C12578 ) /C438 )  ) /C438 ) - (  ( C467*C12583 ) /C438 ) ;
    double C1316 =  (  ( C442*C12578 ) /C438 ) +C12627;
    double C12643 = C12603- (  ( C467*C12627 ) + (  ( C12497*C12472 ) /C438 )  ) ;
    double cnst27 =  (  (  ( C12484-C12497 ) *2 ) /C12413 ) - (  ( C467*C12643 ) + (  ( C12542*C12472 ) /C438 )  ) ;
    double C5699 =  ( C442*C1311 ) + (  ( cnst27+ ( C442*C12542 )  ) + ( C442*C12543 )  ) ;
    double C1313 =  ( C12643+ ( C442*C12497 )  ) + ( C442*C12613 ) ;
    double C478 =  ( C467*C472 ) *4;
    double C490 = C446*C478;
    double C12658 = C490/C456;
    double C1320 = C490*C465;
    double C1338 =  ( C481*C1317 ) -C1320;
    double C12717 = C1338/C456;
    double C13008 =  (  ( C499+ ( C1338*C1317 )  ) - ( C467*C12961 )  ) -C12654;
    double C12964 =  ( C435+ ( C1317*C490 )  ) - ( C467* ( C447*C478 )  ) ;
    double C488 = C444*C478;
    double C1318 = C488*C465;
    double C1336 =  ( C1317*C479 ) -C1318;
    double C2172 = C1336/C456;
    double C514 = C488/C456;
    double C489 = C478*C445;
    double C1319 = C489*C465;
    double C1337 =  ( C480*C1317 ) -C1319;
    double C1370 =  (  ( C493+ ( C1317*C1336 )  ) - ( C467*C1337 )  ) -C496;
    double C12678 = C1370/C456;
    double C2175 = C1337/C456;
    double C5703 = C1337/C438;
    double C1371 =  (  ( C496+ ( C1337*C1317 )  ) - ( C1338*C467 )  ) -C499;
    double C1386 =  (  ( C463*C1370 ) +C1311 ) - ( C465*C1371 ) ;
    double C12682 = C1371/C456;
    double C5718 =  (  (  ( C1336/C438 ) + ( C1317*C1370 )  ) - ( C467*C1371 )  ) -C5703;
    double C12938 = C5718- ( C442*C1370 ) ;
    double C13104 =  (  (  ( C1317*C1371 ) +C5703 ) - ( C467*C13008 )  ) - ( C1338/C438 ) ;
    double C13197 =  (  (  ( C463*C5718 ) +C5699 ) - ( C465*C13104 )  ) - ( C442*C1386 ) ;
    double cnst51 =  (  (  (  ( 3*C1370 ) /C456 ) + ( C5718*C1317 )  ) - ( C467*C13104 )  ) - (  ( 3*C1371 ) /C456 ) ;
    double C2195 =  (  ( C463*C1337 ) +C12613 ) - ( C1338*C465 ) ;
    double C2194 =  (  ( C463*C1336 ) +C12610 ) - ( C1337*C465 ) ;
    double C12948 = C1386- ( C442*C2194 ) ;
    double C525 =  ( C463*C488 ) -C1319;
    double C541 = C525/C438;
    double C517 = C489/C456;
    double C526 =  ( C489*C463 ) -C1320;
    double cnst61 =  (  (  ( C517+ ( C526*C463 )  ) - (  (  ( C463*C490 ) -C12871 ) *C465 )  ) -C12658 ) *C465;
    double C563 =  (  (  ( C525*C463 ) +C514 ) - ( C526*C465 )  ) -C517;
    double C1355 =  ( C431+ ( C489*C1317 )  ) - ( C467*C490 ) ;
    double C12729 = C1355/C456;
    double C13010 =  (  (  ( C517+ ( C1355*C1317 )  ) +C1316 ) - ( C467*C12964 )  ) -C12658;
    double C1354 =  (  ( C488*C1317 ) +C428 ) - ( C467*C489 ) ;
    double C2187 = C1354/C456;
    double C2193 =  ( C1354*C463 ) - ( C1355*C465 ) ;
    double C13061 =  (  (  ( C2193*C463 ) +C2187 ) - ( C465* (  ( C1355*C463 ) - ( C12964*C465 )  )  )  ) -C12729;
    double C1385 =  (  ( C12613+ ( C514+ ( C1354*C1317 )  )  ) - ( C467*C1355 )  ) -C517;
    double C12694 = C1385/C456;
    double C5711 = C1354/C438;
    double C13106 =  (  ( C1313+ (  ( C1385*C1317 ) +C5711 )  ) - ( C467*C13010 )  ) - ( C1355/C438 ) ;
    double C487 = C478*C439;
    double C524 =  ( C487*C463 ) -C1318;
    double C1353 =  (  ( C487*C1317 ) +C426 ) - ( C467*C488 ) ;
    double C2184 = C1353/C456;
    double C2192 =  ( C1353*C463 ) - ( C1354*C465 ) ;
    double C2209 =  (  (  ( C463*C2192 ) +C2184 ) - ( C2193*C465 )  ) -C2187;
    double C13157 =  (  (  ( C463*C2209 ) + ( C2192/C438 )  ) - ( C13061*C465 )  ) - ( C2193/C438 ) ;
    double gz200101 =  ( C13157- ( C440*C2209 )  ) - (  ( C2209- ( C440*C2192 )  ) *C440 ) ;
    double C511 = C487/C456;
    double C1384 =  (  (  ( C511+ ( C1353*C1317 )  ) +C12610 ) - ( C467*C1354 )  ) -C514;
    double C12690 = C1384/C456;
    double C1389 =  ( C1384*C463 ) - ( C1385*C465 ) ;
    double C12950 = C1389- ( C442*C2192 ) ;
    double C13115 =  (  ( C463*C1389 ) +C12690 ) - (  (  ( C1385*C463 ) - ( C13010*C465 )  ) *C465 ) ;
    double C13151 = C13115-C12694;
    double C13193 = C13151- ( C442*C2209 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 3] +=  ( C13193- ( C440*C12950 )  ) *cnst4;
    double C5721 =  (  ( C1311+ (  ( C1384*C1317 ) + ( C1353/C438 )  )  ) - ( C467*C1385 )  ) -C5711;
    double cnst93 =  (  ( C5699+ (  (  ( C1384*3 ) /C456 ) + ( C5721*C1317 )  )  ) - ( C467*C13106 )  ) - (  ( C1385*3 ) /C456 ) ;
    double C13199 =  (  ( C5721*C463 ) - ( C465*C13106 )  ) - ( C442*C1389 ) ;
    double C12942 = C5721- ( C442*C1384 ) ;
    double gz200002 =  ( C13151- ( C440*C1389 )  ) - ( C440* ( C1389- ( C1384*C440 )  )  ) ;
    double C562 =  (  ( C511+ ( C524*C463 )  ) - ( C525*C465 )  ) -C514;
    double C580 =  (  (  ( C562*C463 ) + ( C524/C438 )  ) - ( C563*C465 )  ) -C541;
    double C12933 = C2209- ( C442*C562 ) ;
    double gz002200 = C13193- ( C442*C12933 ) ;
    double gz101200 =  ( C13157- ( C442*C580 )  ) - ( C12933*C440 ) ;
    double cnst120 =  (  (  ( C562*3 ) /C456 ) + ( C580*C463 )  ) - (  (  (  ( C541+ ( C563*C463 )  ) -cnst61 ) - ( C526/C438 )  ) *C465 ) ;
    double gz200200 =  (  ( cnst120- (  ( C563*3 ) /C456 )  ) - ( C580*C440 )  ) - ( C440* ( C580- ( C562*C440 )  )  ) ;
    double cnst123 = gz200200*cnst1;
    double C461 =  (  ( ae*yA ) + ( be*yB )  ) /C438;
    double C914 = C461-yB;
    double C466 = C461-yC;
    double C1321 = C466*C488;
    double C939 =  ( C487*C914 ) -C1321;
    double C13068 =  ( C914*C1371 ) - ( C466*C13008 ) ;
    double C3636 =  ( C914*C1370 ) - ( C466*C1371 ) ;
    double C13200 =  (  ( C5718*C914 ) - ( C466*C13104 )  ) - ( C442*C3636 ) ;
    double C12908 = C3636- ( C441*C1370 ) ;
    double C13158 =  (  (  ( C3636*C914 ) +C12678 ) - ( C466*C13068 )  ) -C12682;
    double gx020002 =  ( C13158- ( C441*C3636 )  ) - ( C12908*C441 ) ;
    double C2533 =  ( C1353*C914 ) - ( C466*C1354 ) ;
    double C3638 =  ( C1384*C914 ) - ( C466*C1385 ) ;
    double C12913 = C3638- ( C1384*C441 ) ;
    double C12954 = C3638- ( C442*C2533 ) ;
    double C13202 =  (  ( C5721*C914 ) - ( C466*C13106 )  ) - ( C442*C3638 ) ;
    double C12860 = C466*C12653;
    double C12956 =  ( C914*C482 ) -C12860;
    double C477 = 4* ( C466*C472 ) ;
    double C486 = C446*C477;
    double C12656 = C486/C456;
    double C917 = C465*C486;
    double C935 =  ( C481*C914 ) -C917;
    double C13005 =  (  ( C499+ ( C935*C914 )  ) - ( C466*C12956 )  ) -C12654;
    double C485 = C477*C445;
    double C916 = C485*C465;
    double C934 =  ( C480*C914 ) -C916;
    double C968 =  (  (  ( C934*C914 ) +C496 ) - ( C466*C935 )  ) -C499;
    double C1764 = C934/C456;
    double C3286 = C934/C438;
    double C13092 =  (  (  ( C914*C968 ) +C3286 ) - ( C13005*C466 )  ) - ( C935/C438 ) ;
    double C948 =  ( C431+ ( C914*C485 )  ) - ( C466*C486 ) ;
    double C508 = C485/C456;
    double C523 =  ( C463*C485 ) -C917;
    double cnst147 =  (  (  ( C508+ ( C463*C523 )  ) - (  (  ( C463*C486 ) -C12860 ) *C465 )  ) -C12656 ) *C465;
    double C12655 = C477*C447;
    double C12867 = C467*C12655;
    double C12962 =  ( C1317*C486 ) -C12867;
    double C12959 =  ( C914*C490 ) -C12867;
    double C12958 =  ( C435+ ( C914*C486 )  ) - ( C466*C12655 ) ;
    double C484 = C444*C477;
    double C522 =  ( C484*C463 ) -C916;
    double C535 = C522/C438;
    double C505 = C484/C456;
    double C561 =  (  (  ( C522*C463 ) +C505 ) - ( C465*C523 )  ) -C508;
    double C915 = C484*C465;
    double C933 =  ( C914*C479 ) -C915;
    double C967 =  (  ( C493+ ( C914*C933 )  ) - ( C466*C934 )  ) -C496;
    double C3301 =  (  (  ( C967*C914 ) + ( C933/C438 )  ) - ( C466*C968 )  ) -C3286;
    double C12902 = C3301- ( C967*C441 ) ;
    double cnst165 =  (  (  (  ( C967*3 ) /C456 ) + ( C3301*C914 )  ) - ( C466*C13092 )  ) - (  ( 3*C968 ) /C456 ) ;
    double gx020020 =  ( cnst165- ( C441*C3301 )  ) - ( C441*C12902 ) ;
    double cnst169 = gx020020*cnst1;
    double C947 =  (  ( C484*C914 ) +C428 ) - ( C466*C485 ) ;
    double C1780 =  ( C947*C463 ) - ( C948*C465 ) ;
    double C1770 = C947/C456;
    double C13057 =  (  (  ( C1780*C463 ) +C1770 ) - ( C465* (  ( C463*C948 ) - ( C12958*C465 )  )  )  ) - ( C948/C456 ) ;
    double C3290 = C947/C438;
    double C483 = C477*C439;
    double C946 =  ( C426+ ( C483*C914 )  ) - ( C466*C484 ) ;
    double C1779 =  ( C946*C463 ) - ( C947*C465 ) ;
    double C1797 =  (  (  ( C1779*C463 ) + ( C946/C456 )  ) - ( C1780*C465 )  ) -C1770;
    double C13153 =  (  (  ( C463*C1797 ) + ( C1779/C438 )  ) - ( C13057*C465 )  ) - ( C1780/C438 ) ;
    double gy200110 =  ( C13153- ( C440*C1797 )  ) - ( C440* ( C1797- ( C1779*C440 )  )  ) ;
    double C502 = C483/C456;
    double C521 =  ( C483*C463 ) -C915;
    double C560 =  (  (  ( C521*C463 ) +C502 ) - ( C522*C465 )  ) -C505;
    double C12899 = C1797- ( C441*C560 ) ;
    double C579 =  (  (  ( C560*C463 ) + ( C521/C438 )  ) - ( C561*C465 )  ) -C535;
    double gy110200 =  ( C13153- ( C441*C579 )  ) - ( C12899*C440 ) ;
    double cnst191 =  (  ( C579*C463 ) + (  ( C560*3 ) /C456 )  ) - (  (  (  ( C535+ ( C561*C463 )  ) -cnst147 ) - ( C523/C438 )  ) *C465 ) ;
    double gy200200 =  (  ( cnst191- (  ( C561*3 ) /C456 )  ) - ( C579*C440 )  ) - (  ( C579- ( C560*C440 )  ) *C440 ) ;
    double cnst196 = cnst1*gy200200;
    double C1339 =  ( C483*C1317 ) -C1321;
    double C2178 = C1339/C456;
    double C1323 = C466*C490;
    double C1341 =  ( C1317*C485 ) -C1323;
    double C2520 = C465*C1341;
    double C2530 =  ( C1337*C914 ) -C2520;
    double C13003 =  (  ( C914*C1341 ) +C1316 ) - ( C466*C12962 ) ;
    double C13009 =  (  ( C508+ ( C1317*C1341 )  ) - ( C467*C12962 )  ) -C12656;
    double C12723 = C1341/C456;
    double C941 =  ( C489*C914 ) -C1323;
    double C13007 =  (  ( C517+ ( C941*C914 )  ) - ( C466*C12959 )  ) -C12658;
    double C2534 =  ( C1354*C914 ) - ( C466*C1355 ) ;
    double C4615 =  (  (  ( C914*C2533 ) +C2184 ) - ( C466*C2534 )  ) -C2187;
    double C12930 = C4615- ( C441*C2533 ) ;
    double C2544 =  ( C463*C2533 ) - ( C2534*C465 ) ;
    double C12924 = C2544- ( C441*C2192 ) ;
    double C1322 = C466*C489;
    double C940 =  ( C488*C914 ) -C1322;
    double C1776 = C940/C456;
    double C1781 =  ( C939*C463 ) - ( C940*C465 ) ;
    double C12946 = C2544- ( C442*C1781 ) ;
    double C3294 = C940/C438;
    double C971 =  (  ( C511+ ( C939*C914 )  ) - ( C466*C940 )  ) -C514;
    double C12936 = C4615- ( C442*C971 ) ;
    double C1782 =  ( C940*C463 ) - ( C941*C465 ) ;
    double C13058 =  (  (  ( C463*C1782 ) +C1776 ) - (  (  ( C941*C463 ) - ( C12959*C465 )  ) *C465 )  ) - ( C941/C456 ) ;
    double C1798 =  (  (  ( C1781*C463 ) + ( C939/C456 )  ) - ( C1782*C465 )  ) -C1776;
    double C12900 = C1798- ( C441*C562 ) ;
    double C13154 =  (  (  ( C463*C1798 ) + ( C1781/C438 )  ) - ( C13058*C465 )  ) - ( C1782/C438 ) ;
    double gz200110 =  ( C13154- ( C440*C1798 )  ) - (  ( C1798- ( C1781*C440 )  ) *C440 ) ;
    double gz110200 =  ( C13154- ( C441*C580 )  ) - ( C12900*C440 ) ;
    double C972 =  (  (  ( C940*C914 ) +C514 ) - ( C466*C941 )  ) -C517;
    double C13094 =  (  ( C3294+ ( C914*C972 )  ) - ( C466*C13007 )  ) - ( C941/C438 ) ;
    double C982 =  ( C971*C463 ) - ( C465*C972 ) ;
    double C12917 = C982- ( C441*C1781 ) ;
    double C13112 =  (  ( C463*C982 ) + ( C971/C456 )  ) - (  (  ( C463*C972 ) - ( C13007*C465 )  ) *C465 ) ;
    double C13148 = C13112- ( C972/C456 ) ;
    double gz200020 =  ( C13148- ( C440*C982 )  ) - (  ( C982- ( C971*C440 )  ) *C440 ) ;
    double cnst237 = gz200020*cnst1;
    double C13187 = C13148- ( C441*C1798 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 0] +=  ( C13187- ( C12917*C440 )  ) *cnst4;
    double gz020200 = C13187- ( C441*C12900 ) ;
    double cnst241 = gz020200*cnst1;
    double C3303 =  (  (  ( C971*C914 ) + ( C939/C438 )  ) - ( C466*C972 )  ) -C3294;
    double C13190 =  (  ( C3303*C463 ) - ( C13094*C465 )  ) - ( C441*C982 ) ;
    double gz020110 = C13190- ( C441*C12917 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 0] +=  ( gz200110*cnst2 ) - ( gz020110*cnst2 ) ;
    double C12906 = C3303- ( C971*C441 ) ;
    double gz110020 = C13190- ( C12906*C440 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 4] +=  ( gz110200*cnst2 ) - ( gz110020*cnst2 ) ;
    double cnst259 =  (  (  (  ( C971*3 ) /C456 ) + ( C3303*C914 )  ) - ( C466*C13094 )  ) - (  ( 3*C972 ) /C456 ) ;
    double gz020020 =  ( cnst259- ( C3303*C441 )  ) - ( C441*C12906 ) ;
    double cnst261 = cnst1*gz020020;
    gz[(Ai + 4) * matrix_size + Bi + 4] +=  ( cnst0*gz020020 ) + (  (  ( cnst0*gz200200 ) - ( cnst0*gz200020 )  ) - ( gz020200*cnst0 )  ) ;
    double C1340 =  ( C484*C1317 ) -C1322;
    double C5707 = C1340/C438;
    double C2537 =  (  ( C914*C1339 ) +C12610 ) - ( C466*C1340 ) ;
    double C1373 =  (  (  ( C1340*C1317 ) +C505 ) - ( C467*C1341 )  ) -C508;
    double C13069 =  ( C1313+ ( C1373*C914 )  ) - ( C466*C13009 ) ;
    double C13105 =  (  (  ( C1373*C1317 ) +C5707 ) - ( C467*C13009 )  ) - ( C1341/C438 ) ;
    double C12688 = C1373/C456;
    double C2518 = C1340*C465;
    double C2529 =  ( C914*C1336 ) -C2518;
    double C4613 =  (  ( C2172+ ( C2529*C914 )  ) - ( C2530*C466 )  ) -C2175;
    double C12934 = C4613- ( C442*C967 ) ;
    double C13194 = C13158- ( C442*C4613 ) ;
    double gx002020 = C13194- ( C442*C12934 ) ;
    double C12926 = C4613- ( C441*C2529 ) ;
    double C12951 = C3636- ( C442*C2529 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 1] +=  ( C13194- ( C12951*C441 )  ) *cnst4;
    double C2190 =  ( C463*C1339 ) -C2518;
    double C2181 = C1340/C456;
    double C2191 =  ( C1340*C463 ) -C2520;
    double C2208 =  (  (  ( C2190*C463 ) +C2178 ) - ( C2191*C465 )  ) -C2181;
    double C12932 = C2208- ( C442*C560 ) ;
    double C2538 =  ( C12613+ ( C1340*C914 )  ) - ( C466*C1341 ) ;
    double C2546 =  ( C463*C2537 ) - ( C465*C2538 ) ;
    double C12945 = C2546- ( C442*C1779 ) ;
    double C12922 = C2546- ( C2190*C441 ) ;
    double C13090 =  (  ( C2546*C463 ) + ( C2537/C456 )  ) - (  (  ( C463*C2538 ) - ( C465*C13003 )  ) *C465 ) ;
    double C13123 = C13090- ( C2538/C456 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 3] +=  (  ( C13123- ( C441*C2208 )  ) - ( C12922*C440 )  ) *cnst4;
    double C13183 = C13123- ( C442*C1797 ) ;
    double gy011200 = C13183- ( C441*C12932 ) ;
    gy[(Ai + 3) * matrix_size + Bi + 0] +=  ( C13183- ( C12945*C440 )  ) *cnst4;
    double gy200011 =  ( C13123- ( C2546*C440 )  ) - ( C440* ( C2546- ( C440*C2537 )  )  ) ;
    double C1372 =  (  ( C502+ ( C1317*C1339 )  ) - ( C467*C1340 )  ) -C505;
    double C5719 =  (  (  ( C1339/C438 ) + ( C1372*C1317 )  ) - ( C467*C1373 )  ) -C5707;
    double cnst309 =  (  (  ( C5719*C1317 ) + (  ( C1372*3 ) /C456 )  ) - ( C467*C13105 )  ) - (  ( C1373*3 ) /C456 ) ;
    double C12940 = C5719- ( C442*C1372 ) ;
    double C1383 =  ( C1372*C463 ) - ( C1373*C465 ) ;
    double C13198 =  (  ( C5719*C463 ) - ( C465*C13105 )  ) - ( C442*C1383 ) ;
    double C12949 = C1383- ( C442*C2190 ) ;
    double C12684 = C1372/C456;
    double C13114 =  (  ( C463*C1383 ) +C12684 ) - (  (  ( C1373*C463 ) - ( C465*C13009 )  ) *C465 ) ;
    double C13150 = C13114-C12688;
    double gy200002 =  ( C13150- ( C1383*C440 )  ) - ( C440* ( C1383- ( C1372*C440 )  )  ) ;
    double C13192 = C13150- ( C442*C2208 ) ;
    double gy002200 = C13192- ( C442*C12932 ) ;
    gy[(Ai + 3) * matrix_size + Bi + 3] +=  ( C13192- ( C440*C12949 )  ) *cnst4;
    double C3639 =  ( C1311+ ( C1372*C914 )  ) - ( C466*C1373 ) ;
    double C13138 =  ( C463*C3639 ) - ( C465*C13069 ) ;
    double C13171 = C13138- ( C442*C2546 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 3] +=  ( C13171- ( C441*C12949 )  ) *cnst4;
    double C12953 = C3639- ( C442*C2537 ) ;
    gy[(Ai + 3) * matrix_size + Bi + 1] +=  ( C13171- ( C12953*C440 )  ) *cnst4;
    double C13201 =  (  (  ( C5719*C914 ) +C5699 ) - ( C466*C13105 )  ) - ( C442*C3639 ) ;
    double C12911 = C3639- ( C441*C1372 ) ;
    double C13004 =  ( C1355*C914 ) - ( C466*C12964 ) ;
    double C13091 =  (  ( C463*C2544 ) + ( C2533/C456 )  ) - (  (  ( C463*C2534 ) - ( C465*C13004 )  ) *C465 ) ;
    double C13124 = C13091- ( C2534/C456 ) ;
    double gz200011 =  ( C13124- ( C2544*C440 )  ) - (  ( C2544- ( C440*C2533 )  ) *C440 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 3] +=  (  ( C13124- ( C441*C2209 )  ) - ( C440*C12924 )  ) *cnst4;
    double C13184 = C13124- ( C442*C1798 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 0] += cnst4* ( C13184- ( C12946*C440 )  ) ;
    double gz011200 = C13184- ( C12933*C441 ) ;
    double C13073 =  (  ( C2187+ ( C2534*C914 )  ) - ( C466*C13004 )  ) -C12729;
    double C13169 =  (  (  ( C2533/C438 ) + ( C4615*C914 )  ) - ( C466*C13073 )  ) - ( C2534/C438 ) ;
    double gz020011 =  ( C13169- ( C441*C4615 )  ) - ( C441*C12930 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 1] +=  ( cnst2*gz200011 ) - ( gz020011*cnst2 ) ;
    double gz011020 =  ( C13169- ( C442*C3303 )  ) - ( C12936*C441 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 4] +=  ( gz011200*cnst2 ) - ( cnst2*gz011020 ) ;
    double C13133 =  ( C4615*C463 ) - ( C13073*C465 ) ;
    double C13166 = C13133- ( C441*C2544 ) ;
    double gz020101 = C13166- ( C441*C12924 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 3] +=  ( gz200101*cnst2 ) - ( cnst2*gz020101 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 1] +=  ( C13166- ( C12930*C440 )  ) *cnst4;
    double C13181 = C13133- ( C442*C982 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 0] +=  ( C13181- ( C441*C12946 )  ) *cnst4;
    double gz101020 = C13181- ( C12936*C440 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 4] +=  ( gz101200*cnst2 ) - ( gz101020*cnst2 ) ;
    double C12985 = C466*C12961;
    double C13002 =  ( C1338*C914 ) -C12985;
    double C13071 =  (  ( C2175+ ( C2530*C914 )  ) - ( C466*C13002 )  ) -C12717;
    double C13167 =  (  (  ( C2529/C438 ) + ( C4613*C914 )  ) - ( C466*C13071 )  ) - ( C2530/C438 ) ;
    double gx011020 =  ( C13167- ( C442*C3301 )  ) - ( C441*C12934 ) ;
    double gx020011 =  ( C13167- ( C441*C4613 )  ) - ( C441*C12926 ) ;
    double C13060 =  (  (  ( C2191*C463 ) +C2181 ) - (  (  ( C463*C1341 ) -C12985 ) *C465 )  ) -C12723;
    double C13156 =  (  (  ( C2190/C438 ) + ( C2208*C463 )  ) - ( C13060*C465 )  ) - ( C2191/C438 ) ;
    double gy101200 =  ( C13156- ( C442*C579 )  ) - ( C12932*C440 ) ;
    double gy200101 =  ( C13156- ( C2208*C440 )  ) - (  ( C2208- ( C2190*C440 )  ) *C440 ) ;
    double C13070 =  ( C1385*C914 ) - ( C466*C13010 ) ;
    double C13139 =  ( C3638*C463 ) - ( C13070*C465 ) ;
    double C13172 = C13139- ( C442*C2544 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 1] +=  ( C13172- ( C12954*C440 )  ) *cnst4;
    gz[(Ai + 1) * matrix_size + Bi + 3] +=  ( C13172- ( C441*C12950 )  ) *cnst4;
    double C13160 =  (  (  ( C3638*C914 ) +C12690 ) - ( C466*C13070 )  ) -C12694;
    double gz020002 =  ( C13160- ( C441*C3638 )  ) - ( C12913*C441 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 2] +=  (  (  (  ( cnst3*gz200002 ) - ( cnst237+cnst123 )  ) +cnst241 ) +cnst261 ) - ( cnst3*gz020002 ) ;
    double C13196 = C13160- ( C442*C4615 ) ;
    double gz002020 = C13196- ( C442*C12936 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 4] +=  (  (  (  ( cnst237-cnst123 ) -cnst241 ) +cnst261 ) + ( cnst3*gz002200 )  ) - ( cnst3*gz002020 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 1] +=  ( C13196- ( C441*C12954 )  ) *cnst4;
    double C12394 = be*C440;
    double C12624 =  (  ( - (  ( C12394*C12575 ) /C438 )  ) /C438 ) - (  ( C465*C12578 ) /C438 ) ;
    double C430 =  (  ( C12575*C440 ) /C438 ) +C12624;
    double C571 =  (  (  ( C496+ ( C528*C463 )  ) +C430 ) - ( C529*C465 )  ) -C499;
    double C12407 =  (  ( - (  ( C12390*C12394 ) /C438 )  ) /C438 ) - (  ( C12575*C465 ) /C438 ) ;
    double C427 = C12407+ (  ( C12390*C440 ) /C438 ) ;
    double C12489 =  (  ( C427*C12472 ) /C438 ) + ( C467*C430 ) ;
    double C570 =  (  (  ( C493+ ( C527*C463 )  ) +C427 ) - ( C528*C465 )  ) -C496;
    double C12595 =  ( C442*C427 ) -C12489;
    double C2211 =  (  (  ( C2172+ ( C463*C2194 )  ) +C12595 ) - ( C465*C2195 )  ) -C2175;
    double C12931 = C2211- ( C442*C570 ) ;
    double C12587 =  ( C427-C430 ) /C12413;
    double C12430 = C12424- (  ( C465*C12624 ) + (  ( C12407*C12394 ) /C438 )  ) ;
    double C12431 = C12430+ ( C12407*C440 ) ;
    double C429 = C12431+ ( C427*C440 ) ;
    double C583 =  (  ( C429+ (  ( C463*C570 ) + ( C527/C438 )  )  ) - ( C571*C465 )  ) -C547;
    double C12625 =  (  ( - (  ( C12394*C12578 ) /C438 )  ) /C438 ) - (  ( C12583*C465 ) /C438 ) ;
    double C12639 = C12603- (  (  ( C12394*C12624 ) /C438 ) + ( C12625*C465 )  ) ;
    double C433 =  ( C440*C430 ) + ( C12639+ ( C440*C12624 )  ) ;
    double C12967 =  (  ( C442*C429 ) - (  ( C467*C433 ) + (  ( C429*C12472 ) /C438 )  )  ) + (  ( C463*C2211 ) + ( C2194/C438 )  ) ;
    double cnst412 =  (  (  ( C12407-C12624 ) *2 ) /C12413 ) - (  (  ( C12394*C12430 ) /C438 ) + ( C12639*C465 )  ) ;
    double cnst415 =  (  (  (  ( C12430*C440 ) +cnst412 ) + ( C12431*C440 )  ) + ( C429*C440 )  ) + (  (  ( 3*C570 ) /C456 ) + ( C583*C463 )  ) ;
    double C12629 = C12625+ (  ( C440*C12578 ) /C438 ) ;
    double cnst417 =  (  (  ( C529*C463 ) +C499 ) +C12629 ) - (  (  ( C435+ ( C463*C482 )  ) - ( C12653*C465 )  ) *C465 ) ;
    double cnst421 =  (  ( C433+ (  ( C571*C463 ) +C547 )  ) - (  ( cnst417-C12654 ) *C465 )  ) - ( C529/C438 ) ;
    double gx200200 =  (  (  ( cnst415- ( C465*cnst421 )  ) - (  ( C571*3 ) /C456 )  ) - ( C583*C440 )  ) - ( C440* ( C583- ( C440*C570 )  )  ) ;
    double cnst426 = cnst1*gx200200;
    double C12642 =  ( C467*C12629 ) + (  ( C12472*C430 ) /C438 ) ;
    double C13032 =  (  (  ( C442*C430 ) -C12642 ) + ( C2175+ ( C463*C2195 )  )  ) - (  (  (  ( C1338*C463 ) +C1316 ) - ( C12961*C465 )  ) *C465 ) ;
    double C13155 =  ( C12967- (  ( C13032-C12717 ) *C465 )  ) - ( C2195/C438 ) ;
    double gx101200 =  ( C13155- ( C442*C583 )  ) - ( C12931*C440 ) ;
    double gx200101 =  ( C13155- ( C440*C2211 )  ) - ( C440* ( C2211- ( C440*C2194 )  )  ) ;
    double cnst437 =  ( C12587+ (  ( C467*C12642 ) + (  ( C12489*C12472 ) /C438 )  )  ) - ( C442*C12489 ) ;
    double C13113 =  (  (  ( C1386*C463 ) +C12678 ) + (  ( C442*C12595 ) +cnst437 )  ) - (  (  ( C1313+ ( C463*C1371 )  ) - ( C13008*C465 )  ) *C465 ) ;
    double C13149 = C13113-C12682;
    double C13191 = C13149- ( C442*C2211 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 3] +=  ( C13191- ( C12948*C440 )  ) *cnst4;
    double gx002200 = C13191- ( C442*C12931 ) ;
    double gx200002 =  ( C13149- ( C1386*C440 )  ) - ( C440* ( C1386- ( C440*C1370 )  )  ) ;
    double C12436 = C441*be;
    double C12626 =  (  ( - (  ( C12436*C12578 ) /C438 )  ) /C438 ) - (  ( C466*C12583 ) /C438 ) ;
    double C12631 = C12626+ (  ( C441*C12578 ) /C438 ) ;
    double C13006 =  (  (  ( C508+ ( C948*C914 )  ) +C12631 ) - ( C466*C12958 )  ) -C12656;
    double C12459 =  (  ( C12436*C427 ) /C438 ) + ( C466*C430 ) ;
    double C12588 =  ( C441*C427 ) -C12459;
    double C12448 =  (  ( - (  ( C12390*C12436 ) /C438 )  ) /C438 ) - (  ( C466*C12575 ) /C438 ) ;
    double C12606 =  (  ( C12390*C441 ) /C438 ) +C12448;
    double C1783 =  ( C12606+ ( C463*C933 )  ) - ( C934*C465 ) ;
    double C980 =  (  ( C12606+ (  ( C946*C914 ) +C502 )  ) - ( C466*C947 )  ) -C505;
    double C12467 =  (  ( - (  ( C12436*C12575 ) /C438 )  ) /C438 ) - (  ( C466*C12578 ) /C438 ) ;
    double C12641 = C12603- (  (  ( C12436*C12467 ) /C438 ) + ( C466*C12626 )  ) ;
    double C12526 = C12424- (  (  ( C12436*C12448 ) /C438 ) + ( C466*C12467 )  ) ;
    double C12527 =  ( C441*C12448 ) +C12526;
    double C908 =  ( C12606*C441 ) +C12527;
    double C983 =  ( C908+ ( C967*C463 )  ) - ( C465*C968 ) ;
    double C12915 = C983- ( C441*C1783 ) ;
    double cnst470 =  (  (  ( C12448-C12467 ) *2 ) /C12413 ) - (  ( C466*C12641 ) + (  ( C12436*C12526 ) /C438 )  ) ;
    double C3282 =  (  ( cnst470+ ( C441*C12526 )  ) + ( C441*C12527 )  ) + ( C441*C908 ) ;
    double C13188 =  (  ( C3282+ ( C3301*C463 )  ) - ( C13092*C465 )  ) - ( C983*C441 ) ;
    double gx020110 = C13188- ( C441*C12915 ) ;
    double gx110020 = C13188- ( C12902*C440 ) ;
    double C12609 = C12467+ (  ( C441*C12575 ) /C438 ) ;
    double C12644 =  ( C467*C12631 ) + (  ( C12609*C12472 ) /C438 ) ;
    double C981 =  (  ( C12609+ ( C505+ ( C947*C914 )  )  ) - ( C466*C948 )  ) -C508;
    double C986 =  ( C980*C463 ) - ( C981*C465 ) ;
    double C12916 = C986- ( C441*C1779 ) ;
    double C13111 =  (  ( C463*C986 ) + ( C980/C456 )  ) - (  (  ( C463*C981 ) - ( C465*C13006 )  ) *C465 ) ;
    double C3304 =  (  ( C908+ (  ( C980*C914 ) + ( C946/C438 )  )  ) - ( C466*C981 )  ) -C3290;
    double C12904 = C3304- ( C441*C980 ) ;
    double C13147 = C13111- ( C981/C456 ) ;
    double C13186 = C13147- ( C441*C1797 ) ;
    double gy020200 = C13186- ( C12899*C441 ) ;
    double cnst491 = cnst1*gy020200;
    gy[(Ai + 0) * matrix_size + Bi + 0] +=  ( C13186- ( C12916*C440 )  ) *cnst4;
    double gy200020 =  ( C13147- ( C986*C440 )  ) - (  ( C986- ( C980*C440 )  ) *C440 ) ;
    double cnst493 = cnst1*gy200020;
    double C2516 =  ( C442*C12609 ) -C12644;
    double C13072 =  (  ( C2516+ (  ( C914*C2538 ) +C2181 )  ) - ( C466*C13003 )  ) -C12723;
    double C910 =  ( C12609*C441 ) + ( C12641+ ( C441*C12467 )  ) ;
    double C13093 =  (  (  ( C3290+ ( C914*C981 )  ) +C910 ) - ( C466*C13006 )  ) - ( C948/C438 ) ;
    double C13189 =  (  ( C3304*C463 ) - ( C13093*C465 )  ) - ( C441*C986 ) ;
    double gy020110 = C13189- ( C441*C12916 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 0] +=  ( gy200110*cnst2 ) - ( cnst2*gy020110 ) ;
    double gy110020 = C13189- ( C12904*C440 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 4] +=  ( gy110200*cnst2 ) - ( gy110020*cnst2 ) ;
    double cnst514 =  (  ( C3282+ (  (  ( C980*3 ) /C456 ) + ( C3304*C914 )  )  ) - ( C466*C13093 )  ) - (  ( 3*C981 ) /C456 ) ;
    double gy020020 =  ( cnst514- ( C441*C3304 )  ) - ( C441*C12904 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 4] +=  ( cnst0*gy020020 ) + (  (  ( cnst0*gy200200 ) - ( cnst0*gy200020 )  ) - ( cnst0*gy020200 )  ) ;
    double cnst517 = cnst1*gy020020;
    double C4235 =  ( C442*C908 ) - (  ( C467*C910 ) + (  ( C908*C12472 ) /C438 )  ) ;
    double C13131 =  ( C4235+ ( C463*C4613 )  ) - ( C13071*C465 ) ;
    double C13179 = C13131- ( C442*C983 ) ;
    double gx101020 = C13179- ( C12934*C440 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 4] +=  ( gx101200*cnst2 ) - ( cnst2*gx101020 ) ;
    double C12532 =  (  ( C12606*C12472 ) /C438 ) + ( C12609*C467 ) ;
    double C2514 =  ( C442*C12606 ) -C12532;
    double C2545 =  (  ( C463*C2529 ) +C2514 ) - ( C2530*C465 ) ;
    double C13164 = C13131- ( C441*C2545 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 1] += cnst4* ( C13164- ( C12926*C440 )  ) ;
    double C12920 = C2545- ( C441*C2194 ) ;
    double gx020101 = C13164- ( C441*C12920 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 3] +=  ( gx200101*cnst2 ) - ( gx020101*cnst2 ) ;
    double C12944 = C2545- ( C442*C1783 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 0] += cnst4* ( C13179- ( C441*C12944 )  ) ;
    double C4616 =  (  (  (  ( C914*C2537 ) +C2178 ) +C2514 ) - ( C466*C2538 )  ) -C2181;
    double C12935 = C4616- ( C442*C980 ) ;
    double C13132 =  ( C463*C4616 ) - ( C13072*C465 ) ;
    double C13180 = C13132- ( C442*C986 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 0] += cnst4* ( C13180- ( C12945*C441 )  ) ;
    double gy101020 = C13180- ( C440*C12935 ) ;
    gy[(Ai + 3) * matrix_size + Bi + 4] +=  ( gy101200*cnst2 ) - ( gy101020*cnst2 ) ;
    double C13165 = C13132- ( C441*C2546 ) ;
    double gy020101 = C13165- ( C441*C12922 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 3] +=  ( gy200101*cnst2 ) - ( cnst2*gy020101 ) ;
    double C12928 = C4616- ( C441*C2537 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 1] +=  ( C13165- ( C12928*C440 )  ) *cnst4;
    double C13168 =  (  ( C4235+ (  ( C2537/C438 ) + ( C914*C4616 )  )  ) - ( C466*C13072 )  ) - ( C2538/C438 ) ;
    double gy020011 =  ( C13168- ( C441*C4616 )  ) - ( C12928*C441 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 1] +=  ( cnst2*gy200011 ) - ( cnst2*gy020011 ) ;
    double gy011020 =  ( C13168- ( C442*C3304 )  ) - ( C441*C12935 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 4] +=  ( cnst2*gy011200 ) - ( gy011020*cnst2 ) ;
    double cnst563 =  (  ( C12606-C12609 ) /C12413 ) + (  ( C467*C12644 ) + (  ( C12532*C12472 ) /C438 )  ) ;
    double C3629 =  ( cnst563- ( C442*C12532 )  ) + ( C442*C2514 ) ;
    double C13159 =  (  ( C3629+ (  ( C3639*C914 ) +C12684 )  ) - ( C466*C13069 )  ) -C12688;
    double gy020002 =  ( C13159- ( C441*C3639 )  ) - ( C441*C12911 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 2] +=  ( cnst517+ ( cnst491+ (  ( cnst3*gy200002 ) - ( cnst196+cnst493 )  )  )  ) - ( cnst3*gy020002 ) ;
    double C13195 = C13159- ( C442*C4616 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 1] += cnst4* ( C13195- ( C441*C12953 )  ) ;
    double gy002020 = C13195- ( C442*C12935 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 4] +=  (  ( cnst3*gy002200 ) + ( cnst517+ (  ( cnst493-cnst196 ) -cnst491 )  )  ) - ( cnst3*gy002020 ) ;
    double C13137 =  ( C3629+ ( C3636*C463 )  ) - ( C13068*C465 ) ;
    double C13170 = C13137- ( C442*C2545 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 3] +=  ( C13170- ( C441*C12948 )  ) *cnst4;
    gx[(Ai + 3) * matrix_size + Bi + 1] +=  ( C13170- ( C12951*C440 )  ) *cnst4;
    double C1784 =  ( C12609+ ( C934*C463 )  ) - ( C935*C465 ) ;
    double C1800 =  (  ( C12588+ (  ( C1783*C463 ) + ( C933/C456 )  )  ) - ( C465*C1784 )  ) -C1764;
    double C12898 = C1800- ( C441*C570 ) ;
    double C12640 =  (  ( C12436*C430 ) /C438 ) + ( C466*C12629 ) ;
    double cnst578 =  ( C12587+ (  ( C12640*C466 ) + (  ( C12436*C12459 ) /C438 )  )  ) - ( C441*C12459 ) ;
    double C13110 =  (  (  ( C967/C456 ) + ( C983*C463 )  ) + ( cnst578+ ( C441*C12588 )  )  ) - (  (  ( C910+ ( C463*C968 )  ) - ( C13005*C465 )  ) *C465 ) ;
    double C13146 = C13110- ( C968/C456 ) ;
    double C13185 = C13146- ( C441*C1800 ) ;
    double gx020200 = C13185- ( C441*C12898 ) ;
    double cnst580 = gx020200*cnst1;
    gx[(Ai + 0) * matrix_size + Bi + 0] +=  ( C13185- ( C440*C12915 )  ) *cnst4;
    double gx200020 =  ( C13146- ( C983*C440 )  ) - ( C440* ( C983- ( C967*C440 )  )  ) ;
    gx[(Ai + 4) * matrix_size + Bi + 4] +=  (  (  ( cnst0*gx200200 ) - ( cnst0*gx200020 )  ) - ( cnst0*gx020200 )  ) + ( gx020020*cnst0 ) ;
    double cnst585 = cnst1*gx200020;
    gx[(Ai + 2) * matrix_size + Bi + 4] +=  (  ( cnst3*gx002200 ) + (  (  ( cnst585-cnst426 ) -cnst580 ) +cnst169 )  ) - ( gx002020*cnst3 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 2] +=  (  ( cnst580+ (  ( cnst3*gx200002 ) - ( cnst585+cnst426 )  )  ) +cnst169 ) - ( cnst3*gx020002 ) ;
    double C12647 =  ( C441*C430 ) -C12640;
    double C12969 =  (  ( C442*C12588 ) - (  (  ( C12588*C12472 ) /C438 ) + ( C467*C12647 )  )  ) + (  ( C463*C2545 ) + ( C2529/C456 )  ) ;
    double C13122 =  ( C12969- (  (  ( C2516+ ( C2530*C463 )  ) - ( C13002*C465 )  ) *C465 )  ) - ( C2530/C456 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 3] += cnst4* (  ( C13122- ( C441*C2211 )  ) - ( C12920*C440 )  ) ;
    double C13182 = C13122- ( C442*C1800 ) ;
    double gx011200 = C13182- ( C441*C12931 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 4] +=  ( cnst2*gx011200 ) - ( cnst2*gx011020 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 0] +=  ( C13182- ( C440*C12944 )  ) *cnst4;
    double gx200011 =  ( C13122- ( C440*C2545 )  ) - (  ( C2545- ( C2529*C440 )  ) *C440 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 1] +=  ( cnst2*gx200011 ) - ( gx020011*cnst2 ) ;
    double C13029 =  ( C12647+ (  ( C463*C1784 ) +C1764 )  ) - (  (  (  ( C935*C463 ) +C12631 ) - ( C12956*C465 )  ) *C465 ) ;
    double C12965 =  (  ( C463*C1800 ) + ( C1783/C438 )  ) + (  ( C441*C429 ) - (  (  ( C12436*C429 ) /C438 ) + ( C466*C433 )  )  ) ;
    double C13152 =  ( C12965- (  ( C13029- ( C935/C456 )  ) *C465 )  ) - ( C1784/C438 ) ;
    double gx200110 =  ( C13152- ( C1800*C440 )  ) - (  ( C1800- ( C1783*C440 )  ) *C440 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 0] +=  ( gx200110*cnst2 ) - ( gx020110*cnst2 ) ;
    double gx110200 =  ( C13152- ( C441*C583 )  ) - ( C12898*C440 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 4] +=  ( cnst2*gx110200 ) - ( gx110020*cnst2 ) ;
    double cnst627 = std::sqrt(3.0);
    gx[(Ai + 3) * matrix_size + Bi + 2] +=  ( cnst627* ( C13197- ( C440*C12938 )  )  ) - (  ( cnst3*gx101020 ) + ( cnst3*gx101200 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 0] +=  ( cnst627* ( C13170- ( C442*C12944 )  )  ) - (  ( cnst3*gx200110 ) + ( cnst3*gx020110 )  ) ;
    gz[(Ai + 3) * matrix_size + Bi + 2] +=  ( cnst627* ( C13199- ( C12942*C440 )  )  ) - (  ( gz101020*cnst3 ) + ( cnst3*gz101200 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 2] +=  ( cnst627* ( C13200- ( C441*C12938 )  )  ) - (  ( cnst3*gx011200 ) + ( cnst3*gx011020 )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 2] +=  ( cnst627* (  ( C13137- ( C441*C1386 )  ) - ( C12908*C440 )  )  ) - (  ( cnst3*gx110020 ) + ( cnst3*gx110200 )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 3] +=  ( cnst627* ( C13199- ( C442*C12950 )  )  ) - (  ( gz200101*cnst3 ) + ( cnst3*gz020101 )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 0] +=  ( cnst627* ( C13172- ( C442*C12946 )  )  ) - (  ( gz020110*cnst3 ) + ( cnst3*gz200110 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 1] +=  ( cnst627* ( C13200- ( C442*C12951 )  )  ) - (  ( cnst3*gx200011 ) + ( cnst3*gx020011 )  ) ;
    gz[(Ai + 0) * matrix_size + Bi + 2] +=  ( cnst627* (  ( C13139- ( C441*C1389 )  ) - ( C12913*C440 )  )  ) - (  ( cnst3*gz110020 ) + ( cnst3*gz110200 )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 1] +=  ( cnst627* ( C13202- ( C442*C12954 )  )  ) - (  ( gz020011*cnst3 ) + ( cnst3*gz200011 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 2] +=  ( cnst627* ( C13201- ( C12940*C441 )  )  ) - (  ( cnst3*gy011200 ) + ( cnst3*gy011020 )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 0] +=  ( cnst627* ( C13171- ( C442*C12945 )  )  ) - (  ( cnst3*gy200110 ) + ( cnst3*gy020110 )  ) ;
    gz[(Ai + 1) * matrix_size + Bi + 2] +=  ( cnst627* ( C13202- ( C12942*C441 )  )  ) - (  ( cnst3*gz011020 ) + ( gz011200*cnst3 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 2] +=  ( cnst627* (  ( C13138- ( C441*C1383 )  ) - ( C12911*C440 )  )  ) - (  ( gy110020*cnst3 ) + ( cnst3*gy110200 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 2] +=  ( cnst627* ( C13198- ( C12940*C440 )  )  ) - (  ( cnst3*gy101200 ) + ( gy101020*cnst3 )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 1] +=  (  ( C13201- ( C442*C12953 )  ) *cnst627 ) - (  ( cnst3*gy020011 ) + ( cnst3*gy200011 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 3] +=  ( cnst627* ( C13197- ( C442*C12948 )  )  ) - (  ( cnst3*gx020101 ) + ( cnst3*gx200101 )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 3] +=  ( cnst627* ( C13198- ( C442*C12949 )  )  ) - (  ( cnst3*gy020101 ) + ( cnst3*gy200101 )  ) ;
    double cnst657 =  (  (  ( 0.25*gx200020 ) + ( 0.25*gx200200 )  ) - ( 0.5*gx200002 )  ) + ( 0.25*gx020200 ) ;
    double cnst661 =  (  (  ( 0.25*gz200200 ) + ( 0.25*gz200020 )  ) - ( 0.5*gz200002 )  ) + ( gz020200*0.25 ) ;
    double cnst665 =  (  (  ( cnst661+ ( 0.25*gz020020 )  ) - ( 0.5*gz020002 )  ) - ( 0.5*gz002200 )  ) - ( 0.5*gz002020 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 2] += cnst665+ (  ( cnst93- ( C442*C5721 )  ) - ( C442*C12942 )  ) ;
    double cnst670 =  (  (  (  ( 0.25*gx020020 ) +cnst657 ) - ( 0.5*gx020002 )  ) - ( 0.5*gx002200 )  ) - ( gx002020*0.5 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 2] += cnst670+ (  ( cnst51- ( C442*C5718 )  ) - ( C442*C12938 )  ) ;
    double cnst674 =  (  (  ( 0.25*gy200200 ) + ( 0.25*gy200020 )  ) - ( 0.5*gy200002 )  ) + ( 0.25*gy020200 ) ;
    double cnst678 =  (  (  (  ( 0.25*gy020020 ) +cnst674 ) - ( 0.5*gy020002 )  ) - ( 0.5*gy002200 )  ) - ( 0.5*gy002020 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 2] +=  (  ( cnst309- ( C442*C5719 )  ) - ( C442*C12940 )  ) +cnst678;
}
