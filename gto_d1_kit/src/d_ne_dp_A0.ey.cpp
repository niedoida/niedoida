/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d1_kit/gto_d1.hpp"
#include <cmath>

namespace {
    static const double Pi = M_PI;
}

void vne_gradient_21_1(
double ae , 
double be , 
double xA , 
double yA , 
double zA , 
double xB , 
double yB , 
double zB , 
double xC , 
double yC , 
double zC , 
const double* bs , 
double* const gx , 
double* const gy , 
double* const gz , 
std::size_t matrix_size , 
std::size_t Ai , 
std::size_t Bi ) 
{
    double C258 = bs[3];
    double C250 = bs[1];
    double C255 = bs[2];
    double C247 = bs[0];
    double C259 = bs[4];
    double cnst0 = std::sqrt(0.75);
    double C251 = yA-yB;
    double C248 = xA-xB;
    double cnst1 = std::sqrt(3.0);
    double C252 = zA-zB;
    double C249 = be*ae;
    double C267 = C249*C248;
    double C309 = C249* (  ( std::pow(C252 , 2) ) + (  ( std::pow(C248 , 2) ) + ( std::pow(C251 , 2) )  )  ) ;
    double C276 = C251*C249;
    double C278 = C249*C252;
    double C3663 = C251*be;
    double C3669 = be*C252;
    double C242 = be+ae;
    double C280 =  (  ( ae*xA ) + ( be*xB )  ) /C242;
    double C296 = C280-xC;
    double C308 = ae*C296;
    double C294 = C280-xB;
    double C275 = C242*2;
    double C332 = std::exp( ( - ( C309/C242 )  ) );
    double C3545 = C332* ( Pi*2. ) ;
    double C3682 = C255*C3545;
    double C237 = C3682/C242;
    double C274 =  ( C237*ae ) /C242;
    double C3546 = C247*C3545;
    double C3650 = C3546/C242;
    double C266 =  ( C3650*ae ) /C242;
    double C3547 = C3545*C250;
    double C3651 = C3547/C242;
    double C271 =  ( ae*C3651 ) /C242;
    double C3687 = C3545*C258;
    double C3843 =  ( ae* ( C3687/C242 )  ) /C242;
    double C333 = C332* ( Pi*4 ) ;
    double C334 = C333* (  (  ( C247*C267 ) /C242 ) + ( C308*C250 )  ) ;
    double C335 = C333* (  ( C255*C308 ) + (  ( C250*C267 ) /C242 )  ) ;
    double C378 =  ( - ( C335/C242 )  ) /C275;
    double C391 =  (  ( C266- (  ( C294*C334 ) /C242 )  ) -C271 ) + (  ( C335*C296 ) /C242 ) ;
    double C3921 = C333* (  (  ( C258*C267 ) /C242 ) + ( C259*C308 )  ) ;
    double C291 =  (  ( be*zB ) + ( zA*ae )  ) /C242;
    double C830 = C291-zB;
    double C305 = C291-zC;
    double C3645 =  (  ( - (  ( C3547*C3669 ) /C242 )  ) /C242 ) - (  ( C305*C3682 ) /C242 ) ;
    double C824 = C3645+ (  ( C3547*C252 ) /C242 ) ;
    double C840 =  ( C824*ae ) /C242;
    double C3637 =  (  ( - (  ( C3669*C3546 ) /C242 )  ) /C242 ) - (  ( C3547*C305 ) /C242 ) ;
    double C823 = C3637+ (  ( C3546*C252 ) /C242 ) ;
    double C837 =  ( ae*C823 ) /C242;
    double C311 = C305*ae;
    double C342 = C333* (  (  ( C278*C255 ) /C242 ) + ( C311*C258 )  ) ;
    double C3906 =  ( - ( C342/C242 )  ) /C275;
    double C3923 = C333* (  ( C259*C311 ) + (  ( C278*C258 ) /C242 )  ) ;
    double C3955 =  (  ( C305*C3923 ) /C242 ) + (  ( C274- (  ( C342*C830 ) /C242 )  ) -C3843 ) ;
    double C340 = C333* (  (  ( C278*C250 ) /C242 ) + ( C311*C255 )  ) ;
    double C872 =  (  ( C305*C342 ) /C242 ) + (  ( C271- (  ( C340*C830 ) /C242 )  ) -C274 ) ;
    double C3776 = C872/C275;
    double C383 =  (  ( C342*C296 ) /C242 ) - (  ( C340*C294 ) /C242 ) ;
    double C384 =  ( - ( C340/C242 )  ) /C275;
    double C341 = C333* (  ( C311*C250 ) + (  ( C247*C278 ) /C242 )  ) ;
    double C382 =  (  ( C340*C296 ) /C242 ) - (  ( C294*C341 ) /C242 ) ;
    double C871 =  (  ( C266- (  ( C341*C830 ) /C242 )  ) -C271 ) + (  ( C340*C305 ) /C242 ) ;
    double C877 =  ( C294*C871 ) - ( C872*C296 ) ;
    double C3773 = C871/C275;
    double C4030 =  (  (  ( C294*C877 ) +C3773 ) - (  (  ( C872*C294 ) - ( C3955*C296 )  ) *C296 )  ) -C3776;
    double gz200001 =  ( C4030- ( C248*C877 )  ) - ( C248* ( C877- ( C248*C871 )  )  ) ;
    double C857 =  (  ( C335*C305 ) /C242 ) - (  ( C830*C334 ) /C242 ) ;
    double C3761 = C857/C275;
    double cnst42 =  (  ( - (  ( C3669*C3682 ) /C242 )  ) /C242 ) - (  ( C3687*C305 ) /C242 ) ;
    double C3862 =  (  (  (  ( C252*C3682 ) /C242 ) +cnst42 ) *ae ) /C242;
    double C336 = C333* (  (  ( C255*C267 ) /C242 ) + ( C308*C258 )  ) ;
    double C392 =  (  ( C271- (  ( C335*C294 ) /C242 )  ) -C274 ) + (  ( C336*C296 ) /C242 ) ;
    double C858 =  (  ( C305*C336 ) /C242 ) - (  ( C335*C830 ) /C242 ) ;
    double C876 =  (  (  ( C857*C294 ) +C837 ) -C840 ) - ( C858*C296 ) ;
    double C3890 = C876- ( C252*C391 ) ;
    double C3766 = C858/C275;
    double C3953 =  (  ( C3921*C305 ) /C242 ) - (  ( C336*C830 ) /C242 ) ;
    double cnst61 =  (  (  ( C274- (  ( C336*C294 ) /C242 )  ) -C3843 ) + (  ( C3921*C296 ) /C242 )  ) *C296;
    double C3902 =  ( - ( C336/C242 )  ) /C275;
    double C3652 = C242*2.;
    double C3699 =  ( C3650-C3651 ) /C3652;
    double C1980 =  ( C3637*C252 ) + ( C3699- (  ( C3645*C305 ) + (  ( C3669*C3637 ) /C242 )  )  ) ;
    double C1618 =  ( C252*C823 ) +C1980;
    double C3887 =  ( C1618*ae ) /C242;
    double C3703 =  ( C3651-C237 ) /C3652;
    double cnst64 =  ( C3645*C252 ) + ( C3703- (  (  ( C3669*C3645 ) /C242 ) + ( C305*cnst42 )  )  ) ;
    double C3888 =  (  ( cnst64+ ( C824*C252 )  ) *ae ) /C242;
    double C284 =  ( std::pow(C242 , 2) ) *2;
    double C345 = C334/C284;
    double C1993 =  (  (  ( C857*C830 ) -C345 ) - ( C305*C858 )  ) -C378;
    double C3898 = C1993- ( C857*C252 ) ;
    double C3728 = C335/C284;
    double C3998 =  (  (  ( C858*C830 ) -C3728 ) - ( C3953*C305 )  ) -C3902;
    double cnst74 =  (  (  (  ( C857/C242 ) + ( C1993*C830 )  ) - ( C3998*C305 )  ) - ( C858/C242 )  ) - ( C1993*C252 ) ;
    double C4049 =  (  (  ( C3887+ ( C294*C1993 )  ) -C3888 ) - ( C3998*C296 )  ) - ( C876*C252 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 2] +=  (  ( C4049-C1980 ) - ( C248*C3898 )  ) *cnst1;
    double C357 = C341/C284;
    double C401 =  (  (  ( C382*C294 ) -C357 ) - ( C296*C383 )  ) -C384;
    double C1997 =  (  (  (  (  ( C830*C871 ) +C837 ) -C357 ) -C840 ) - ( C305*C872 )  ) -C384;
    double C3900 =  ( C1997-C823 ) - ( C252*C871 ) ;
    double C3737 = C340/C284;
    double C4000 =  (  (  (  (  ( C872*C830 ) +C840 ) -C3737 ) -C3862 ) - ( C305*C3955 )  ) -C3906;
    double cnst93 =  (  (  (  ( C871/C242 ) + ( C3887+ ( C1997*C830 )  )  ) -C3888 ) - ( C305*C4000 )  ) - ( C872/C242 ) ;
    double cnst98 =  (  ( C294*C383 ) -C3737 ) - ( C296* (  (  ( C3923*C296 ) /C242 ) - (  ( C294*C342 ) /C242 )  )  ) ;
    double cnst102 =  (  (  ( C382/C242 ) + ( C294*C401 )  ) - (  ( cnst98-C3906 ) *C296 )  ) - ( C383/C242 ) ;
    double gz200100 =  ( cnst102- ( C248*C401 )  ) - ( C248* ( C401- ( C382*C248 )  )  ) ;
    double C3535 = C248*be;
    double C3721 =  (  ( - (  ( C3535*C3682 ) /C242 )  ) /C242 ) - (  ( C3687*C296 ) /C242 ) ;
    double C3723 = C3721+ (  ( C248*C3682 ) /C242 ) ;
    double C3554 =  (  ( - (  ( C3535*C3546 ) /C242 )  ) /C242 ) - (  ( C3547*C296 ) /C242 ) ;
    double C3702 =  (  ( C248*C3546 ) /C242 ) +C3554;
    double C3894 =  ( C877-C3702 ) - ( C382*C252 ) ;
    double C3720 =  (  ( - (  ( C3547*C3535 ) /C242 )  ) /C242 ) - (  ( C3682*C296 ) /C242 ) ;
    double C241 =  ( C248*C3554 ) + ( C3699- (  ( C3720*C296 ) + (  ( C3535*C3554 ) /C242 )  )  ) ;
    double C232 =  ( C3702*C248 ) +C241;
    gz[(Ai + 3) * matrix_size + Bi + 0] +=  (  (  ( C4030-C232 ) - ( C252*C401 )  ) - ( C3894*C248 )  ) *cnst1;
    double C236 =  (  ( C3547*C248 ) /C242 ) +C3720;
    double C273 =  ( C236*ae ) /C242;
    double C404 =  (  (  (  (  ( C3702*ae ) /C242 ) + ( C294*C391 )  ) -C345 ) -C273 ) - ( C392*C296 ) ;
    double C405 = C404-C378;
    double cnst153 =  (  (  (  (  ( C294*C392 ) +C273 ) -C3728 ) - (  ( ae*C3723 ) /C242 )  ) -cnst61 ) -C3902;
    double cnst157 =  (  ( C3702*C3669 ) /C242 ) + ( C236*C305 ) ;
    double C1620 = -cnst157;
    double C822 =  ( C3702*C252 ) -cnst157;
    double C4057 =  (  (  ( C294*C1997 ) - ( C4000*C296 )  ) -C822 ) - ( C252*C877 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 2] +=  ( C4057- ( C3900*C248 )  ) *cnst1;
    double C238 =  (  ( C3703- (  ( C3721*C296 ) + (  ( C3535*C3720 ) /C242 )  )  ) + ( C248*C3720 )  ) + ( C236*C248 ) ;
    double cnst165 =  (  ( C391/C242 ) + (  ( C294*C405 ) + (  ( C232*ae ) /C242 )  )  ) - (  ( C238*ae ) /C242 ) ;
    double cnst169 =  (  (  ( cnst165- ( cnst153*C296 )  ) - ( C392/C242 )  ) -C232 ) - ( C248*C405 ) ;
    double gx200100 =  ( cnst169-C241 ) - (  (  ( C405-C3702 ) - ( C248*C391 )  ) *C248 ) ;
    double C3860 =  (  (  ( C236*C252 ) - (  (  ( C236*C3669 ) /C242 ) + ( C305*C3723 )  )  ) *ae ) /C242;
    double C4007 =  (  (  (  (  ( C822*ae ) /C242 ) + ( C876*C294 )  ) +C3761 ) -C3860 ) - ( C296* (  (  (  ( C858*C294 ) +C840 ) -C3862 ) - ( C3953*C296 )  )  ) ;
    double C4028 = C4007-C3766;
    double cnst177 =  (  ( C4028-C822 ) - ( C248*C876 )  ) - (  ( C252*C3554 ) - (  ( C305*C3720 ) + (  ( C3669*C3554 ) /C242 )  )  ) ;
    double gx200001 = cnst177- ( C248* (  ( C876-C823 ) - ( C248*C857 )  )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 0] +=  (  (  ( C4028- ( C252*C405 )  ) -C1620 ) - ( C248*C3890 )  ) *cnst1;
    double C287 =  (  ( be*yB ) + ( ae*yA )  ) /C242;
    double C301 = C287-yC;
    double C310 = C301*ae;
    double C338 =  (  (  ( C247*C276 ) /C242 ) + ( C310*C250 )  ) *C333;
    double C351 = C338/C284;
    double C3922 = C333* (  ( C259*C310 ) + (  ( C276*C258 ) /C242 )  ) ;
    double C337 = C333* (  (  ( C276*C250 ) /C242 ) + ( C255*C310 )  ) ;
    double C381 =  ( - ( C337/C242 )  ) /C275;
    double C859 =  (  ( C305*C337 ) /C242 ) - (  ( C830*C338 ) /C242 ) ;
    double C3768 = C859/C275;
    double C379 =  (  ( C337*C296 ) /C242 ) - (  ( C294*C338 ) /C242 ) ;
    double C3733 = C337/C284;
    double C339 = C333* (  (  ( C276*C255 ) /C242 ) + ( C310*C258 )  ) ;
    double C3904 =  ( - ( C339/C242 )  ) /C275;
    double C380 =  (  ( C339*C296 ) /C242 ) - (  ( C337*C294 ) /C242 ) ;
    double cnst194 =  (  ( C380*C294 ) -C3733 ) - ( C296* (  (  ( C3922*C296 ) /C242 ) - (  ( C339*C294 ) /C242 )  )  ) ;
    double C400 =  (  (  ( C379*C294 ) -C351 ) - ( C380*C296 )  ) -C381;
    double cnst203 =  (  (  ( C379/C242 ) + ( C294*C400 )  ) - (  ( cnst194-C3904 ) *C296 )  ) - ( C380/C242 ) ;
    double gy200100 =  ( cnst203- ( C248*C400 )  ) - ( C248* ( C400- ( C379*C248 )  )  ) ;
    double C860 =  (  ( C305*C339 ) /C242 ) - (  ( C337*C830 ) /C242 ) ;
    double C870 =  ( C859*C294 ) - ( C860*C296 ) ;
    double C3892 = C870- ( C379*C252 ) ;
    double C1994 =  (  (  ( C859*C830 ) -C351 ) - ( C305*C860 )  ) -C381;
    double C3899 = C1994- ( C859*C252 ) ;
    double C3771 = C860/C275;
    double C3954 =  (  ( C3922*C305 ) /C242 ) - (  ( C339*C830 ) /C242 ) ;
    double C3999 =  (  (  ( C860*C830 ) -C3733 ) - ( C305*C3954 )  ) -C3904;
    double C4050 =  (  ( C294*C1994 ) - ( C3999*C296 )  ) - ( C252*C870 ) ;
    gy[(Ai + 3) * matrix_size + Bi + 2] += cnst1* ( C4050- ( C3899*C248 )  ) ;
    double cnst225 =  (  (  (  ( C830*C1994 ) + ( C859/C242 )  ) - ( C305*C3999 )  ) - ( C860/C242 )  ) - ( C252*C1994 ) ;
    double C4029 =  (  (  ( C294*C870 ) +C3768 ) - (  (  ( C294*C860 ) - ( C3954*C296 )  ) *C296 )  ) -C3771;
    gy[(Ai + 3) * matrix_size + Bi + 0] +=  (  ( C4029- ( C252*C400 )  ) - ( C248*C3892 )  ) *cnst1;
    double gy200001 =  ( C4029- ( C248*C870 )  ) - ( C248* ( C870- ( C248*C859 )  )  ) ;
    double C3612 =  (  ( - (  ( C3663*C3547 ) /C242 )  ) /C242 ) - (  ( C301*C3682 ) /C242 ) ;
    double C588 = C3612+ (  ( C251*C3547 ) /C242 ) ;
    double C604 =  ( ae*C588 ) /C242;
    double C3604 =  (  ( - (  ( C3663*C3546 ) /C242 )  ) /C242 ) - (  ( C3547*C301 ) /C242 ) ;
    double C587 = C3604+ (  ( C251*C3546 ) /C242 ) ;
    double C601 =  ( ae*C587 ) /C242;
    double cnst243 =  (  ( C3669*C587 ) /C242 ) + ( C305*C588 ) ;
    double C1438 =  ( C252*C587 ) -cnst243;
    double C3881 =  ( ae*C1438 ) /C242;
    double C1786 = -cnst243;
    double C1240 =  ( C251*C3604 ) + ( C3699- (  (  ( C3663*C3604 ) /C242 ) + ( C3612*C301 )  )  ) ;
    double C1044 = C1240+ ( C251*C587 ) ;
    double C3868 =  ( C1044*ae ) /C242;
    double C1440 =  ( C3604*C252 ) - (  (  ( C3604*C3669 ) /C242 ) + ( C3612*C305 )  ) ;
    double C3851 =  (  (  ( C251*C236 ) - (  (  ( C3663*C236 ) /C242 ) + ( C301*C3723 )  )  ) *ae ) /C242;
    double cnst255 =  ( C236*C301 ) + (  ( C3663*C3702 ) /C242 ) ;
    double C1046 = -cnst255;
    double C586 =  ( C251*C3702 ) -cnst255;
    double C3722 =  (  ( - (  ( C3663*C3682 ) /C242 )  ) /C242 ) - (  ( C3687*C301 ) /C242 ) ;
    double C590 = C3722+ (  ( C251*C3682 ) /C242 ) ;
    double C3853 =  ( C590*ae ) /C242;
    double C3882 =  ( ae* (  ( C252*C588 ) - (  ( C590*C305 ) + (  ( C3669*C588 ) /C242 )  )  )  ) /C242;
    double C1045 =  ( C251*C588 ) + (  ( C3703- (  ( C3722*C301 ) + (  ( C3663*C3612 ) /C242 )  )  ) + ( C251*C3612 )  ) ;
    double C3869 =  ( C1045*ae ) /C242;
    double C594 = C287-yB;
    double C3980 =  ( C858*C594 ) - ( C3953*C301 ) ;
    double C3952 =  (  ( C301*C3923 ) /C242 ) - (  ( C342*C594 ) /C242 ) ;
    double C3982 =  ( C872*C594 ) - ( C3955*C301 ) ;
    double C635 =  (  ( C271- (  ( C337*C594 ) /C242 )  ) -C274 ) + (  ( C339*C301 ) /C242 ) ;
    double C3951 =  (  ( C274- (  ( C339*C594 ) /C242 )  ) -C3843 ) + (  ( C3922*C301 ) /C242 ) ;
    double C3993 =  (  (  (  (  ( C594*C635 ) +C604 ) -C3733 ) -C3853 ) - ( C3951*C301 )  ) -C3904;
    double C3950 =  (  ( C3921*C301 ) /C242 ) - (  ( C336*C594 ) /C242 ) ;
    double C1451 =  (  ( C837+ ( C859*C594 )  ) -C840 ) - ( C860*C301 ) ;
    double C4053 =  (  (  ( C3887+ ( C594*C1994 )  ) -C3888 ) - ( C3999*C301 )  ) - ( C1451*C252 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 2] +=  (  ( C4053-C1980 ) - ( C251*C3899 )  ) *cnst1;
    double C3884 =  ( C1451-C823 ) - ( C251*C859 ) ;
    double C622 =  (  ( C336*C301 ) /C242 ) - (  ( C335*C594 ) /C242 ) ;
    double C3992 =  (  (  ( C622*C594 ) -C3728 ) - ( C3950*C301 )  ) -C3902;
    double C621 =  (  ( C335*C301 ) /C242 ) - (  ( C594*C334 ) /C242 ) ;
    double C640 =  (  (  ( C621*C294 ) +C601 ) -C604 ) - ( C622*C296 ) ;
    double C3871 = C640- ( C251*C391 ) ;
    double C4004 =  (  (  ( C621/C275 ) + (  ( C294*C640 ) + (  ( C586*ae ) /C242 )  )  ) -C3851 ) - (  (  (  (  ( C294*C622 ) +C604 ) -C3853 ) - ( C3950*C296 )  ) *C296 ) ;
    double C4025 = C4004- ( C622/C275 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 0] +=  (  (  ( C4025- ( C251*C405 )  ) -C1046 ) - ( C248*C3871 )  ) *cnst1;
    double cnst282 =  (  ( C4025-C586 ) - ( C248*C640 )  ) - (  ( C251*C3554 ) - (  (  ( C3663*C3554 ) /C242 ) + ( C301*C3720 )  )  ) ;
    double gx200010 = cnst282- ( C248* (  ( C640-C587 ) - ( C621*C248 )  )  ) ;
    double C1253 =  (  (  ( C621*C594 ) -C345 ) - ( C301*C622 )  ) -C378;
    double cnst289 =  (  (  (  ( C621/C242 ) + ( C1253*C594 )  ) - ( C3992*C301 )  ) - ( C622/C242 )  ) - ( C251*C1253 ) ;
    double C4046 =  (  (  ( C3868+ ( C1253*C294 )  ) -C3869 ) - ( C3992*C296 )  ) - ( C251*C640 ) ;
    double gx020100 = C4046- ( C251*C3871 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 0] +=  ( gx200100*cnst0 ) - ( gx020100*cnst0 ) ;
    double C3876 = C1253- ( C251*C621 ) ;
    double gx020010 = cnst289- ( C251*C3876 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 1] +=  ( cnst0*gx200010 ) - ( gx020010*cnst0 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 1] +=  (  ( C4046-C1240 ) - ( C248*C3876 )  ) *cnst1;
    double C626 =  (  ( C342*C301 ) /C242 ) - (  ( C340*C594 ) /C242 ) ;
    double C3994 =  (  (  ( C594*C626 ) -C3737 ) - ( C301*C3952 )  ) -C3906;
    double C625 =  (  ( C340*C301 ) /C242 ) - (  ( C341*C594 ) /C242 ) ;
    double C1255 =  (  (  ( C625*C594 ) -C357 ) - ( C301*C626 )  ) -C384;
    double C3878 = C1255- ( C251*C625 ) ;
    double cnst307 =  (  (  (  ( C1255*C594 ) + ( C625/C242 )  ) - ( C3994*C301 )  ) - ( C626/C242 )  ) - ( C251*C1255 ) ;
    double gz020010 = cnst307- ( C251*C3878 ) ;
    double C636 =  ( C625*C294 ) - ( C296*C626 ) ;
    double C4006 =  (  ( C625/C275 ) + ( C636*C294 )  ) - (  (  ( C294*C626 ) - ( C3952*C296 )  ) *C296 ) ;
    double C4027 = C4006- ( C626/C275 ) ;
    double C3875 = C636- ( C251*C382 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 0] +=  (  ( C4027- ( C251*C401 )  ) - ( C248*C3875 )  ) *cnst1;
    double gz200010 =  ( C4027- ( C636*C248 )  ) - ( C248* ( C636- ( C248*C625 )  )  ) ;
    gz[(Ai + 4) * matrix_size + Bi + 1] +=  ( cnst0*gz200010 ) - ( gz020010*cnst0 ) ;
    double C4048 =  (  ( C1255*C294 ) - ( C3994*C296 )  ) - ( C251*C636 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 1] +=  ( C4048- ( C248*C3878 )  ) *cnst1;
    double gz020100 = C4048- ( C251*C3875 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 0] +=  ( gz200100*cnst0 ) - ( cnst0*gz020100 ) ;
    double C1449 =  ( C594*C871 ) - ( C872*C301 ) ;
    double C4058 =  (  (  ( C1997*C594 ) - ( C301*C4000 )  ) -C1438 ) - ( C252*C1449 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 2] +=  ( C4058- ( C251*C3900 )  ) *cnst1;
    double C4024 =  ( C294*C1449 ) - ( C296*C3982 ) ;
    double C4055 =  ( C4024-C586 ) - ( C636*C252 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 0] +=  ( C4055- ( C251*C3894 )  ) *cnst1;
    double C3897 =  ( C1449-C587 ) - ( C625*C252 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 1] +=  ( C4055- ( C248*C3897 )  ) *cnst1;
    double C3886 = C1449- ( C251*C871 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 2] +=  (  ( C4024- ( C251*C877 )  ) - ( C3886*C248 )  ) *cnst1;
    double C4036 =  (  ( C3773+ ( C594*C1449 )  ) - ( C301*C3982 )  ) -C3776;
    gz[(Ai + 1) * matrix_size + Bi + 1] += cnst1* (  (  ( C4036-C1044 ) - ( C1255*C252 )  ) - ( C251*C3897 )  ) ;
    double gz020001 =  ( C4036- ( C251*C1449 )  ) - ( C251*C3886 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 2] +=  ( gz200001*cnst0 ) - ( cnst0*gz020001 ) ;
    double C3981 =  (  (  ( C860*C594 ) +C840 ) -C3862 ) - ( C3954*C301 ) ;
    double C4023 =  ( C1451*C294 ) - ( C3981*C296 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 2] +=  (  (  ( C4023-C822 ) - ( C251*C870 )  ) - ( C248*C3884 )  ) *cnst1;
    double C4035 =  (  (  ( C3768+ ( C3881+ ( C1451*C594 )  )  ) -C3882 ) - ( C3981*C301 )  ) -C3771;
    double gy020001 =  (  (  ( C4035-C1438 ) - ( C251*C1451 )  ) -C1440 ) - ( C251*C3884 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 2] +=  ( gy200001*cnst0 ) - ( cnst0*gy020001 ) ;
    double C1447 =  ( C857*C594 ) - ( C858*C301 ) ;
    double C4034 =  (  (  ( C1447*C594 ) +C3761 ) - ( C3980*C301 )  ) -C3766;
    double C4022 =  (  ( C3881+ ( C1447*C294 )  ) -C3882 ) - ( C3980*C296 ) ;
    double C4043 = C4022- ( C252*C640 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 0] += cnst1* ( C4043- ( C251*C3890 )  ) ;
    double C3895 = C1447- ( C621*C252 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 1] +=  (  ( C4034- ( C1253*C252 )  ) - ( C251*C3895 )  ) *cnst1;
    gx[(Ai + 3) * matrix_size + Bi + 1] +=  (  ( C4043-C1786 ) - ( C248*C3895 )  ) *cnst1;
    double C3880 = C1447- ( C251*C857 ) ;
    double gx020001 =  ( C4034- ( C251*C1447 )  ) - ( C251*C3880 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 2] +=  ( cnst0*gx200001 ) - ( gx020001*cnst0 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 2] +=  (  (  ( C4022- ( C251*C876 )  ) -C1440 ) - ( C248*C3880 )  ) *cnst1;
    double C4052 =  (  ( C1993*C594 ) - ( C3998*C301 )  ) - ( C1447*C252 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 2] +=  ( C4052- ( C251*C3898 )  ) *cnst1;
    double C634 =  (  ( C337*C301 ) /C242 ) + (  ( C266- (  ( C594*C338 ) /C242 )  ) -C271 ) ;
    double C1257 =  (  (  (  (  ( C634*C594 ) +C601 ) -C351 ) -C604 ) - ( C301*C635 )  ) -C381;
    double cnst357 =  (  (  (  ( C634/C242 ) + ( C3868+ ( C594*C1257 )  )  ) -C3869 ) - ( C301*C3993 )  ) - ( C635/C242 ) ;
    double C3877 =  ( C1257-C587 ) - ( C251*C634 ) ;
    double gy020010 =  (  (  ( cnst357-C1044 ) - ( C251*C1257 )  ) -C1240 ) - ( C251*C3877 ) ;
    double C3896 = C1451- ( C634*C252 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 1] += cnst1* (  (  ( C4035- ( C252*C1257 )  ) -C1786 ) - ( C251*C3896 )  ) ;
    double C641 =  ( C634*C294 ) - ( C296*C635 ) ;
    double C4056 =  (  (  ( C294*C1257 ) - ( C296*C3993 )  ) -C586 ) - ( C251*C641 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 1] +=  ( C4056- ( C248*C3877 )  ) *cnst1;
    double C4044 = C4023- ( C641*C252 ) ;
    gy[(Ai + 3) * matrix_size + Bi + 1] +=  ( C4044- ( C3896*C248 )  ) *cnst1;
    gy[(Ai + 1) * matrix_size + Bi + 0] +=  (  ( C4044-C1620 ) - ( C251*C3892 )  ) *cnst1;
    double C3873 =  ( C641-C3702 ) - ( C251*C379 ) ;
    double gy020100 =  ( C4056-C1046 ) - ( C251*C3873 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 0] +=  ( gy200100*cnst0 ) - ( gy020100*cnst0 ) ;
    double C4005 =  (  ( C634/C275 ) + ( C641*C294 )  ) - ( C296* (  ( C294*C635 ) - ( C3951*C296 )  )  ) ;
    double C4026 = C4005- ( C635/C275 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 0] +=  (  (  ( C4026-C232 ) - ( C251*C400 )  ) - ( C248*C3873 )  ) *cnst1;
    double gy200010 =  ( C4026- ( C248*C641 )  ) - ( C248* ( C641- ( C634*C248 )  )  ) ;
    gy[(Ai + 4) * matrix_size + Bi + 1] +=  ( gy200010*cnst0 ) - ( gy020010*cnst0 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 2] +=  (  ( - ( 0.5*gy200001 )  ) - ( 0.5*gy020001 )  ) + ( cnst225- ( C3899*C252 )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 1] +=  ( C4053- ( C3896*C252 )  ) + (  ( - ( 0.5*gy200010 )  ) - ( 0.5*gy020010 )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 2] +=  (  (  (  ( cnst93-C1618 ) - ( C1997*C252 )  ) -C1980 ) - ( C3900*C252 )  ) + (  ( - ( 0.5*gz200001 )  ) - ( 0.5*gz020001 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 0] +=  (  ( - ( 0.5*gx200100 )  ) - ( gx020100*0.5 )  ) + ( C4049- ( C252*C3890 )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 1] +=  (  ( C4058-C1786 ) - ( C3897*C252 )  ) + (  ( - ( 0.5*gz200010 )  ) - ( gz020010*0.5 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 1] +=  (  ( - ( 0.5*gx200010 )  ) - ( 0.5*gx020010 )  ) + ( C4052- ( C252*C3895 )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 0] +=  (  ( C4057-C1620 ) - ( C3894*C252 )  ) + (  ( - ( 0.5*gz200100 )  ) - ( 0.5*gz020100 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 2] +=  (  ( - ( 0.5*gx200001 )  ) - ( 0.5*gx020001 )  ) + ( cnst74- ( C3898*C252 )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 0] +=  (  ( - ( 0.5*gy200100 )  ) - ( 0.5*gy020100 )  ) + ( C4050- ( C3892*C252 )  ) ;
}
