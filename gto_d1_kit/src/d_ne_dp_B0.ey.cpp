/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d1_kit/gto_d1.hpp"
#include <cmath>

namespace {
    static const double Pi = M_PI;
}

void vne_gradient_21_2(
double ae , 
double be , 
double xA , 
double yA , 
double zA , 
double xB , 
double yB , 
double zB , 
double xC , 
double yC , 
double zC , 
const double* bs , 
double* const gx , 
double* const gy , 
double* const gz , 
std::size_t matrix_size , 
std::size_t Ai , 
std::size_t Bi ) 
{
    double C256 = bs[3];
    double C245 = bs[1];
    double C253 = bs[2];
    double C246 = bs[0];
    double C257 = bs[4];
    double cnst0 = std::sqrt(0.75);
    double C249 = yA-yB;
    double C247 = xA-xB;
    double cnst1 = std::sqrt(3.0);
    double C250 = zA-zB;
    double C242 = be+ae;
    double C3651 = C242*2.;
    double C272 = C242*2;
    double C277 =  ( be/C242 ) -1;
    double C282 =  ( std::pow(C242 , 2) ) *2;
    double C3662 = C249*be;
    double C3534 = C247*be;
    double C248 = be*ae;
    double C310 = C248* (  ( std::pow(C250 , 2) ) + (  ( std::pow(C247 , 2) ) + ( std::pow(C249 , 2) )  )  ) ;
    double C333 = std::exp( ( - ( C310/C242 )  ) );
    double C3544 = C333* ( Pi*2. ) ;
    double C3546 = C245*C3544;
    double C3650 = C3546/C242;
    double C299 = C277*C3650;
    double C268 =  ( be*C3650 ) /C242;
    double C3545 = C246*C3544;
    double C3649 = C3545/C242;
    double C294 = C3649*C277;
    double C3698 =  ( C3649-C3650 ) /C3651;
    double C3686 = C3544*C256;
    double C3845 =  ( be* ( C3686/C242 )  ) /C242;
    double C3681 = C253*C3544;
    double C237 = C3681/C242;
    double C271 =  ( be*C237 ) /C242;
    double C3728 = C237*C277;
    double C3702 =  ( C3650-C237 ) /C3651;
    double C334 = C333* ( Pi*4 ) ;
    double C264 = C247*C248;
    double C276 = C248*C250;
    double C274 = C249*C248;
    double C288 =  (  ( be*zB ) + ( zA*ae )  ) /C242;
    double C305 = C288-zC;
    double C312 = be*C305;
    double C342 =  (  ( C312*C245 ) - (  ( C246*C276 ) /C242 )  ) *C334;
    double C358 = C342/C282;
    double C3927 =  (  ( C257*C312 ) - (  ( C276*C256 ) /C242 )  ) *C334;
    double C341 = C334* (  ( C253*C312 ) - (  ( C276*C245 ) /C242 )  ) ;
    double C385 =  ( - ( C341/C242 )  ) /C272;
    double C3737 = C341/C282;
    double C343 = C334* (  ( C312*C256 ) - (  ( C276*C253 ) /C242 )  ) ;
    double C3910 =  ( - ( C343/C242 )  ) /C272;
    double C830 = C288-zB;
    double C870 =  (  ( C294- (  ( C342*C830 ) /C242 )  ) -C268 ) + (  ( C341*C305 ) /C242 ) ;
    double C3775 = C870/C272;
    double C871 =  (  ( C343*C305 ) /C242 ) + (  ( C299- (  ( C830*C341 ) /C242 )  ) -C271 ) ;
    double C3778 = C871/C272;
    double C3952 =  (  ( C3728- (  ( C343*C830 ) /C242 )  ) -C3845 ) + (  ( C3927*C305 ) /C242 ) ;
    double C284 =  (  ( be*yB ) + ( ae*yA )  ) /C242;
    double C595 = C284-yB;
    double C301 = C284-yC;
    double C625 =  (  ( C301*C341 ) /C242 ) - (  ( C342*C595 ) /C242 ) ;
    double C311 = C301*be;
    double C338 =  (  ( C253*C311 ) - (  ( C274*C245 ) /C242 )  ) *C334;
    double C3733 = C338/C282;
    double C382 =  ( - ( C338/C242 )  ) /C272;
    double C3926 =  (  ( C257*C311 ) - (  ( C274*C256 ) /C242 )  ) *C334;
    double C340 =  (  ( C311*C256 ) - (  ( C274*C253 ) /C242 )  ) *C334;
    double C3948 =  (  ( C301*C3926 ) /C242 ) + (  ( C3728- (  ( C340*C595 ) /C242 )  ) -C3845 ) ;
    double C3951 =  (  ( C3926*C305 ) /C242 ) - (  ( C830*C340 ) /C242 ) ;
    double C859 =  (  ( C340*C305 ) /C242 ) - (  ( C338*C830 ) /C242 ) ;
    double C3773 = C859/C272;
    double C635 =  (  ( C299- (  ( C338*C595 ) /C242 )  ) -C271 ) + (  ( C301*C340 ) /C242 ) ;
    double C3908 =  ( - ( C340/C242 )  ) /C272;
    double C3996 =  (  (  ( C830*C859 ) -C3733 ) - ( C305*C3951 )  ) -C3908;
    double C339 = C334* (  ( C245*C311 ) - (  ( C246*C274 ) /C242 )  ) ;
    double C352 = C339/C282;
    double C634 =  (  ( C301*C338 ) /C242 ) + (  ( C294- (  ( C339*C595 ) /C242 )  ) -C268 ) ;
    double C858 =  (  ( C338*C305 ) /C242 ) - (  ( C830*C339 ) /C242 ) ;
    double C3770 = C858/C272;
    double C1993 =  (  (  ( C858*C830 ) -C352 ) - ( C859*C305 )  ) -C382;
    double cnst23 =  (  (  (  ( C858/C242 ) + ( C830*C1993 )  ) - ( C305*C3996 )  ) - ( C859/C242 )  ) - ( C250*C1993 ) ;
    double C3902 = C1993- ( C858*C250 ) ;
    double C3611 =  (  ( - (  ( C3546*C3662 ) /C242 )  ) /C242 ) - (  ( C301*C3681 ) /C242 ) ;
    double C589 = C3611+ (  ( C249*C3546 ) /C242 ) ;
    double C3745 = C589*C277;
    double C604 =  ( be*C589 ) /C242;
    double C1448 =  ( C870*C595 ) - ( C301*C871 ) ;
    double C3888 = C1448- ( C249*C870 ) ;
    double C3979 =  ( C871*C595 ) - ( C301*C3952 ) ;
    double C4033 =  (  (  ( C1448*C595 ) +C3775 ) - ( C301*C3979 )  ) -C3778;
    double gz020001 =  ( C4033- ( C249*C1448 )  ) - ( C249*C3888 ) ;
    double C3603 =  (  ( - (  ( C3545*C3662 ) /C242 )  ) /C242 ) - (  ( C301*C3546 ) /C242 ) ;
    double C1239 =  ( C3698- (  ( C301*C3611 ) + (  ( C3603*C3662 ) /C242 )  )  ) + ( C249*C3603 ) ;
    double C588 =  (  ( C249*C3545 ) /C242 ) +C3603;
    double C3900 =  ( C588+C1448 ) - ( C625*C250 ) ;
    double C593 = C588*C277;
    double C1256 =  (  (  (  (  ( C634*C595 ) +C593 ) -C352 ) -C604 ) - ( C301*C635 )  ) -C382;
    double C3879 =  ( C1256+C588 ) - ( C249*C634 ) ;
    double C1043 = C1239+ ( C249*C588 ) ;
    double C3779 = C277*C1043;
    double C626 =  (  ( C301*C343 ) /C242 ) - (  ( C341*C595 ) /C242 ) ;
    double C1254 =  (  (  ( C625*C595 ) -C358 ) - ( C301*C626 )  ) -C385;
    double C3880 = C1254- ( C249*C625 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 1] +=  (  (  ( C4033+C1043 ) - ( C1254*C250 )  ) - ( C249*C3900 )  ) *cnst1;
    double C3721 =  (  ( - (  ( C3681*C3662 ) /C242 )  ) /C242 ) - (  ( C301*C3686 ) /C242 ) ;
    double C591 =  (  ( C249*C3681 ) /C242 ) +C3721;
    double C3855 =  ( be*C591 ) /C242;
    double C3990 =  (  (  (  (  ( C635*C595 ) +C3745 ) -C3733 ) -C3855 ) - ( C301*C3948 )  ) -C3908;
    double C1044 =  (  ( C249*C3611 ) + ( C3702- (  ( C301*C3721 ) + (  ( C3611*C3662 ) /C242 )  )  )  ) + ( C249*C589 ) ;
    double C3871 =  ( be*C1044 ) /C242;
    double cnst72 =  (  (  (  ( C3779+ ( C1256*C595 )  ) + ( C634/C242 )  ) -C3871 ) - ( C301*C3990 )  ) - ( C635/C242 ) ;
    double gy020010 =  ( C1239+ (  ( cnst72+C1043 ) - ( C249*C1256 )  )  ) - ( C249*C3879 ) ;
    double C3949 =  (  ( C301*C3927 ) /C242 ) - (  ( C343*C595 ) /C242 ) ;
    double C3991 =  (  (  ( C626*C595 ) -C3737 ) - ( C301*C3949 )  ) -C3910;
    double cnst80 =  (  (  (  ( C1254*C595 ) + ( C625/C242 )  ) - ( C301*C3991 )  ) - ( C626/C242 )  ) - ( C249*C1254 ) ;
    double gz020010 = cnst80- ( C249*C3880 ) ;
    double C3668 = be*C250;
    double cnst84 =  (  ( C3668*C588 ) /C242 ) + ( C305*C589 ) ;
    double C1437 =  ( C588*C250 ) -cnst84;
    double C3801 = C1437*C277;
    double C1785 = -cnst84;
    double cnst89 =  (  ( - (  ( C3668*C3681 ) /C242 )  ) /C242 ) - (  ( C3686*C305 ) /C242 ) ;
    double C3864 =  ( be* (  (  ( C3681*C250 ) /C242 ) +cnst89 )  ) /C242;
    double C3636 =  (  ( - (  ( C3668*C3545 ) /C242 )  ) /C242 ) - (  ( C3546*C305 ) /C242 ) ;
    double C823 =  (  ( C250*C3545 ) /C242 ) +C3636;
    double C828 = C823*C277;
    double C1439 =  ( C250*C3603 ) - (  (  ( C3668*C3603 ) /C242 ) + ( C3611*C305 )  ) ;
    double C3644 =  (  ( - (  ( C3668*C3546 ) /C242 )  ) /C242 ) - (  ( C3681*C305 ) /C242 ) ;
    double C824 = C3644+ (  ( C3546*C250 ) /C242 ) ;
    double C3764 = C824*C277;
    double C3978 =  (  ( C3764+ ( C859*C595 )  ) -C3864 ) - ( C301*C3951 ) ;
    double C3997 =  (  (  (  ( C3764+ ( C871*C830 )  ) -C3737 ) -C3864 ) - ( C3952*C305 )  ) -C3910;
    double C839 =  ( C824*be ) /C242;
    double C1450 =  (  (  ( C858*C595 ) +C828 ) -C839 ) - ( C301*C859 ) ;
    double C3886 =  ( C1450+C823 ) - ( C249*C858 ) ;
    double C3899 = C1450- ( C250*C634 ) ;
    double C1996 =  (  (  (  (  ( C830*C870 ) +C828 ) -C358 ) -C839 ) - ( C871*C305 )  ) -C385;
    double C3903 =  ( C1996+C823 ) - ( C250*C870 ) ;
    double C4055 =  ( C1437+ (  ( C1996*C595 ) - ( C301*C3997 )  )  ) - ( C250*C1448 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 2] +=  ( C4055- ( C249*C3903 )  ) *cnst1;
    double cnst114 =  ( C250*C3644 ) + ( C3702- (  (  ( C3668*C3644 ) /C242 ) + ( cnst89*C305 )  )  ) ;
    double C3890 =  ( be* (  ( C824*C250 ) +cnst114 )  ) /C242;
    double C1979 =  ( C3698- (  ( C305*C3644 ) + (  ( C3668*C3636 ) /C242 )  )  ) + ( C3636*C250 ) ;
    double C1617 =  ( C250*C823 ) +C1979;
    double C3810 = C1617*C277;
    double C4050 =  (  (  (  ( C1993*C595 ) +C3810 ) -C3890 ) - ( C301*C3996 )  ) - ( C1450*C250 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 2] += cnst1* (  ( C4050+C1979 ) - ( C249*C3902 )  ) ;
    double cnst123 =  (  (  (  ( C3810+ ( C830*C1996 )  ) + ( C870/C242 )  ) -C3890 ) - ( C3997*C305 )  ) - ( C871/C242 ) ;
    double C3884 =  ( be* (  ( C250*C589 ) - (  ( C305*C591 ) + (  ( C3668*C589 ) /C242 )  )  )  ) /C242;
    double C4032 =  (  (  ( C3770+ ( C3801+ ( C1450*C595 )  )  ) -C3884 ) - ( C301*C3978 )  ) -C3773;
    double gy020001 =  (  (  ( C4032+C1437 ) - ( C249*C1450 )  ) +C1439 ) - ( C3886*C249 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 1] += cnst1* (  (  ( C4032- ( C1256*C250 )  ) +C1785 ) - ( C249*C3899 )  ) ;
    double C278 =  (  ( ae*xA ) + ( be*xB )  ) /C242;
    double C292 = C278-xB;
    double C295 = C278-xC;
    double C641 =  ( C292*C634 ) - ( C295*C635 ) ;
    double C3553 =  (  ( - (  ( C3534*C3545 ) /C242 )  ) /C242 ) - (  ( C3546*C295 ) /C242 ) ;
    double C3701 = C3553+ (  ( C247*C3545 ) /C242 ) ;
    double C383 =  (  ( C295*C341 ) /C242 ) - (  ( C342*C292 ) /C242 ) ;
    double C3719 =  (  ( - (  ( C3546*C3534 ) /C242 )  ) /C242 ) - (  ( C3681*C295 ) /C242 ) ;
    double C241 =  ( C3698- (  ( C295*C3719 ) + (  ( C3534*C3553 ) /C242 )  )  ) + ( C247*C3553 ) ;
    double C232 = C241+ ( C247*C3701 ) ;
    double C236 =  (  ( C3546*C247 ) /C242 ) +C3719;
    double cnst176 =  (  ( C3701*C3662 ) /C242 ) + ( C301*C236 ) ;
    double C587 =  ( C249*C3701 ) -cnst176;
    double C1045 = -cnst176;
    double cnst180 =  ( C236*C305 ) + (  ( C3668*C3701 ) /C242 ) ;
    double C822 =  ( C3701*C250 ) -cnst180;
    double C1619 = -cnst180;
    double C3720 =  (  ( - (  ( C3681*C3534 ) /C242 )  ) /C242 ) - (  ( C295*C3686 ) /C242 ) ;
    double C238 =  ( C247*C236 ) + (  ( C3702- (  ( C3720*C295 ) + (  ( C3534*C3719 ) /C242 )  )  ) + ( C247*C3719 )  ) ;
    double C3722 = C3720+ (  ( C3681*C247 ) /C242 ) ;
    double C3862 =  (  (  ( C236*C250 ) - (  (  ( C3668*C236 ) /C242 ) + ( C3722*C305 )  )  ) *be ) /C242;
    double C3853 =  ( be* (  ( C249*C236 ) - (  ( C301*C3722 ) + (  ( C236*C3662 ) /C242 )  )  )  ) /C242;
    double C4020 =  ( C1450*C292 ) - ( C295*C3978 ) ;
    double C4041 = C4020- ( C641*C250 ) ;
    gy[(Ai + 3) * matrix_size + Bi + 1] += cnst1* ( C4041- ( C247*C3899 )  ) ;
    double C4021 =  ( C292*C1448 ) - ( C295*C3979 ) ;
    double C636 =  ( C625*C292 ) - ( C295*C626 ) ;
    double C3877 = C636- ( C249*C383 ) ;
    double C4052 =  ( C587+C4021 ) - ( C636*C250 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 1] +=  ( C4052- ( C3900*C247 )  ) *cnst1;
    double C4045 =  (  ( C1254*C292 ) - ( C295*C3991 )  ) - ( C249*C636 ) ;
    double gz020100 = C4045- ( C249*C3877 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 1] +=  ( C4045- ( C247*C3880 )  ) *cnst1;
    double C4002 =  (  ( C641*C292 ) + ( C634/C272 )  ) - ( C295* (  ( C292*C635 ) - ( C295*C3948 )  )  ) ;
    double C4023 = C4002- ( C635/C272 ) ;
    double gy200010 =  ( C4023- ( C641*C247 )  ) - ( C247* ( C641- ( C247*C634 )  )  ) ;
    gy[(Ai + 4) * matrix_size + Bi + 1] +=  ( gy200010*cnst0 ) - ( cnst0*gy020010 ) ;
    double C309 = C295*be;
    double C336 =  (  ( C253*C309 ) - (  ( C245*C264 ) /C242 )  ) *C334;
    double C379 =  ( - ( C336/C242 )  ) /C272;
    double C3727 = C336/C282;
    double C335 =  (  ( C309*C245 ) - (  ( C246*C264 ) /C242 )  ) *C334;
    double C856 =  (  ( C336*C305 ) /C242 ) - (  ( C335*C830 ) /C242 ) ;
    double C3762 = C856/C272;
    double C346 = C335/C282;
    double C392 =  (  ( C294- (  ( C335*C292 ) /C242 )  ) -C268 ) + (  ( C295*C336 ) /C242 ) ;
    double C621 =  (  ( C301*C336 ) /C242 ) - (  ( C335*C595 ) /C242 ) ;
    double C337 =  (  ( C309*C256 ) - (  ( C253*C264 ) /C242 )  ) *C334;
    double C393 =  (  ( C299- (  ( C292*C336 ) /C242 )  ) -C271 ) + (  ( C295*C337 ) /C242 ) ;
    double C405 =  (  (  (  ( C3701*C277 ) + ( C392*C292 )  ) -C346 ) - (  ( C236*be ) /C242 )  ) - ( C295*C393 ) ;
    double C406 = C405-C379;
    double cnst230 =  (  (  ( C232*C277 ) + ( C292*C406 )  ) + ( C392/C242 )  ) - (  ( be*C238 ) /C242 ) ;
    double C857 =  (  ( C305*C337 ) /C242 ) - (  ( C830*C336 ) /C242 ) ;
    double C875 =  (  (  ( C856*C292 ) +C828 ) -C839 ) - ( C857*C295 ) ;
    double C3892 = C875- ( C392*C250 ) ;
    double C1992 =  (  (  ( C856*C830 ) -C346 ) - ( C857*C305 )  ) -C379;
    double C3901 = C1992- ( C856*C250 ) ;
    double C3768 = C857/C272;
    double C1446 =  ( C856*C595 ) - ( C857*C301 ) ;
    double C3882 = C1446- ( C856*C249 ) ;
    double C3897 = C1446- ( C250*C621 ) ;
    double C622 =  (  ( C301*C337 ) /C242 ) - (  ( C336*C595 ) /C242 ) ;
    double C640 =  (  ( C593+ ( C292*C621 )  ) -C604 ) - ( C295*C622 ) ;
    double C3873 = C640- ( C249*C392 ) ;
    double C1252 =  (  (  ( C621*C595 ) -C346 ) - ( C301*C622 )  ) -C379;
    double C3878 = C1252- ( C249*C621 ) ;
    double C3906 =  ( - ( C337/C242 )  ) /C272;
    double C3925 = C334* (  ( C257*C309 ) - (  ( C264*C256 ) /C242 )  ) ;
    double C3947 =  (  ( C301*C3925 ) /C242 ) - (  ( C337*C595 ) /C242 ) ;
    double C3989 =  (  (  ( C622*C595 ) -C3727 ) - ( C301*C3947 )  ) -C3906;
    double cnst274 =  (  (  (  ( C621/C242 ) + ( C1252*C595 )  ) - ( C301*C3989 )  ) - ( C622/C242 )  ) - ( C249*C1252 ) ;
    double gx020010 = cnst274- ( C249*C3878 ) ;
    double C4043 =  (  (  ( C3779+ ( C292*C1252 )  ) -C3871 ) - ( C3989*C295 )  ) - ( C249*C640 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 1] +=  (  ( C1239+C4043 ) - ( C3878*C247 )  ) *cnst1;
    double gx020100 = C4043- ( C249*C3873 ) ;
    double C4001 =  (  (  ( C621/C272 ) + (  ( C640*C292 ) + ( C587*C277 )  )  ) -C3853 ) - ( C295* (  (  (  ( C622*C292 ) +C3745 ) -C3855 ) - ( C3947*C295 )  )  ) ;
    double C4022 = C4001- ( C622/C272 ) ;
    double cnst280 =  (  ( C249*C3553 ) - (  ( C301*C3719 ) + (  ( C3553*C3662 ) /C242 )  )  ) + (  ( C587+C4022 ) - ( C640*C247 )  ) ;
    double gx200010 = cnst280- ( C247* (  ( C640+C588 ) - ( C247*C621 )  )  ) ;
    gx[(Ai + 4) * matrix_size + Bi + 1] +=  ( cnst0*gx200010 ) - ( cnst0*gx020010 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 0] +=  (  ( C1045+ ( C4022- ( C249*C406 )  )  ) - ( C247*C3873 )  ) *cnst1;
    double cnst287 = C295* (  (  ( C3728- (  ( C292*C337 ) /C242 )  ) -C3845 ) + (  ( C3925*C295 ) /C242 )  ) ;
    double cnst288 =  (  (  (  ( C236*C277 ) + ( C393*C292 )  ) -C3727 ) - (  ( C3722*be ) /C242 )  ) -cnst287;
    double cnst294 =  (  (  ( cnst230- ( C295* ( cnst288-C3906 )  )  ) - ( C393/C242 )  ) +C232 ) - ( C247*C406 ) ;
    double gx200100 =  ( cnst294+C241 ) - ( C247* (  ( C3701+C406 ) - ( C247*C392 )  )  ) ;
    gx[(Ai + 4) * matrix_size + Bi + 0] +=  ( gx200100*cnst0 ) - ( gx020100*cnst0 ) ;
    double C3950 =  (  ( C3925*C305 ) /C242 ) - (  ( C830*C337 ) /C242 ) ;
    double C4004 =  (  ( C3762+ (  ( C277*C822 ) + ( C875*C292 )  )  ) -C3862 ) - ( C295* (  (  ( C3764+ ( C857*C292 )  ) -C3864 ) - ( C295*C3950 )  )  ) ;
    double C4025 = C4004-C3768;
    double cnst299 =  (  ( C3553*C250 ) - (  ( C3719*C305 ) + (  ( C3668*C3553 ) /C242 )  )  ) + (  ( C4025+C822 ) - ( C875*C247 )  ) ;
    double gx200001 = cnst299- ( C247* (  ( C875+C823 ) - ( C856*C247 )  )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 0] +=  (  ( C1619+ ( C4025- ( C250*C406 )  )  ) - ( C247*C3892 )  ) *cnst1;
    double C3995 =  (  (  ( C857*C830 ) -C3727 ) - ( C3950*C305 )  ) -C3906;
    double cnst306 =  (  (  (  ( C856/C242 ) + ( C830*C1992 )  ) - ( C3995*C305 )  ) - ( C857/C242 )  ) - ( C1992*C250 ) ;
    double C4046 =  (  (  ( C3810+ ( C292*C1992 )  ) -C3890 ) - ( C295*C3995 )  ) - ( C875*C250 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 2] +=  (  ( C4046+C1979 ) - ( C247*C3901 )  ) *cnst1;
    double C4049 =  (  ( C1992*C595 ) - ( C301*C3995 )  ) - ( C1446*C250 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 2] += cnst1* ( C4049- ( C249*C3901 )  ) ;
    double C3977 =  ( C857*C595 ) - ( C301*C3950 ) ;
    double C4019 =  (  ( C3801+ ( C292*C1446 )  ) -C3884 ) - ( C295*C3977 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 2] +=  (  ( C1439+ ( C4019- ( C249*C875 )  )  ) - ( C247*C3882 )  ) *cnst1;
    double C4040 = C4019- ( C640*C250 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 1] +=  (  ( C4040+C1785 ) - ( C247*C3897 )  ) *cnst1;
    gx[(Ai + 1) * matrix_size + Bi + 0] +=  ( C4040- ( C249*C3892 )  ) *cnst1;
    double C4031 =  (  ( C3762+ ( C1446*C595 )  ) - ( C301*C3977 )  ) -C3768;
    gx[(Ai + 1) * matrix_size + Bi + 1] +=  (  ( C4031- ( C250*C1252 )  ) - ( C249*C3897 )  ) *cnst1;
    double gx020001 =  ( C4031- ( C249*C1446 )  ) - ( C249*C3882 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 2] +=  ( cnst0*gx200001 ) - ( gx020001*cnst0 ) ;
    double C384 =  (  ( C343*C295 ) /C242 ) - (  ( C292*C341 ) /C242 ) ;
    double cnst317 =  (  ( C292*C384 ) -C3737 ) - ( C295* (  (  ( C295*C3927 ) /C242 ) - (  ( C343*C292 ) /C242 )  )  ) ;
    double C402 =  (  (  ( C383*C292 ) -C358 ) - ( C295*C384 )  ) -C385;
    double cnst324 =  (  (  ( C383/C242 ) + ( C402*C292 )  ) - ( C295* ( cnst317-C3910 )  )  ) - ( C384/C242 ) ;
    double gz200100 =  ( cnst324- ( C247*C402 )  ) - ( C247* ( C402- ( C247*C383 )  )  ) ;
    gz[(Ai + 4) * matrix_size + Bi + 0] +=  ( cnst0*gz200100 ) - ( cnst0*gz020100 ) ;
    double C4003 =  (  ( C625/C272 ) + ( C636*C292 )  ) - (  (  ( C292*C626 ) - ( C295*C3949 )  ) *C295 ) ;
    double C4024 = C4003- ( C626/C272 ) ;
    double gz200010 =  ( C4024- ( C636*C247 )  ) - ( C247* ( C636- ( C247*C625 )  )  ) ;
    gz[(Ai + 4) * matrix_size + Bi + 1] +=  ( gz200010*cnst0 ) - ( cnst0*gz020010 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 0] += cnst1* (  ( C4024- ( C249*C402 )  ) - ( C247*C3877 )  ) ;
    double C4053 =  ( C587+ (  ( C1256*C292 ) - ( C295*C3990 )  )  ) - ( C249*C641 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 1] +=  ( C4053- ( C247*C3879 )  ) *cnst1;
    double C876 =  ( C292*C870 ) - ( C295*C871 ) ;
    double C3896 =  ( C3701+C876 ) - ( C383*C250 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 0] +=  ( C4052- ( C249*C3896 )  ) *cnst1;
    double C4054 =  (  (  ( C292*C1996 ) - ( C295*C3997 )  ) +C822 ) - ( C876*C250 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 2] +=  ( C4054- ( C247*C3903 )  ) *cnst1;
    double C4027 =  (  ( C3775+ ( C292*C876 )  ) - (  (  ( C871*C292 ) - ( C295*C3952 )  ) *C295 )  ) -C3778;
    double gz200001 =  ( C4027- ( C247*C876 )  ) - ( C247* ( C876- ( C247*C870 )  )  ) ;
    gz[(Ai + 4) * matrix_size + Bi + 2] +=  ( gz200001*cnst0 ) - ( cnst0*gz020001 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 0] +=  (  (  ( C4027+C232 ) - ( C402*C250 )  ) - ( C247*C3896 )  ) *cnst1;
    gz[(Ai + 0) * matrix_size + Bi + 2] +=  (  ( C4021- ( C249*C876 )  ) - ( C3888*C247 )  ) *cnst1;
    double C869 =  ( C858*C292 ) - ( C295*C859 ) ;
    double C4026 =  (  (  ( C869*C292 ) +C3770 ) - ( C295* (  ( C292*C859 ) - ( C295*C3951 )  )  )  ) -C3773;
    double gy200001 =  ( C4026- ( C247*C869 )  ) - ( C247* ( C869- ( C247*C858 )  )  ) ;
    gy[(Ai + 4) * matrix_size + Bi + 2] +=  ( cnst0*gy200001 ) - ( gy020001*cnst0 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 2] += cnst1* (  (  ( C4020+C822 ) - ( C249*C869 )  ) - ( C3886*C247 )  ) ;
    double C380 =  (  ( C295*C338 ) /C242 ) - (  ( C292*C339 ) /C242 ) ;
    double C3875 =  ( C641+C3701 ) - ( C249*C380 ) ;
    double gy020100 =  ( C4053+C1045 ) - ( C249*C3875 ) ;
    double C3894 = C869- ( C380*C250 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 0] +=  (  ( C1619+C4041 ) - ( C249*C3894 )  ) *cnst1;
    double C381 =  (  ( C295*C340 ) /C242 ) - (  ( C338*C292 ) /C242 ) ;
    double cnst366 =  (  ( C292*C381 ) -C3733 ) - ( C295* (  (  ( C295*C3926 ) /C242 ) - (  ( C292*C340 ) /C242 )  )  ) ;
    double C401 =  (  (  ( C380*C292 ) -C352 ) - ( C295*C381 )  ) -C382;
    gy[(Ai + 0) * matrix_size + Bi + 0] +=  (  (  ( C232+C4023 ) - ( C249*C401 )  ) - ( C3875*C247 )  ) *cnst1;
    gy[(Ai + 3) * matrix_size + Bi + 0] +=  (  ( C4026- ( C250*C401 )  ) - ( C247*C3894 )  ) *cnst1;
    double cnst377 =  (  (  ( C292*C401 ) + ( C380/C242 )  ) - ( C295* ( cnst366-C3908 )  )  ) - ( C381/C242 ) ;
    double gy200100 =  ( cnst377- ( C247*C401 )  ) - (  ( C401- ( C247*C380 )  ) *C247 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 0] +=  ( cnst0*gy200100 ) - ( cnst0*gy020100 ) ;
    double C4047 =  (  ( C292*C1993 ) - ( C295*C3996 )  ) - ( C869*C250 ) ;
    gy[(Ai + 3) * matrix_size + Bi + 2] +=  ( C4047- ( C3902*C247 )  ) *cnst1;
    gx[(Ai + 2) * matrix_size + Bi + 1] +=  ( C4049- ( C3897*C250 )  ) + (  ( - ( 0.5*gx200010 )  ) - ( 0.5*gx020010 )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 0] +=  (  ( - ( 0.5*gz200100 )  ) - ( 0.5*gz020100 )  ) + (  ( C1619+C4054 ) - ( C3896*C250 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 2] +=  (  ( - ( 0.5*gx200001 )  ) - ( 0.5*gx020001 )  ) + ( cnst306- ( C3901*C250 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 0] +=  ( C4046- ( C250*C3892 )  ) + (  ( - ( gx200100*0.5 )  ) - ( gx020100*0.5 )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 1] +=  (  ( C1785+C4055 ) - ( C3900*C250 )  ) + (  ( - ( 0.5*gz200010 )  ) - ( 0.5*gz020010 )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 2] +=  (  ( - ( 0.5*gz200001 )  ) - ( 0.5*gz020001 )  ) + (  (  (  ( cnst123+C1617 ) - ( C1996*C250 )  ) +C1979 ) - ( C3903*C250 )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 0] +=  ( C4047- ( C250*C3894 )  ) + (  ( - ( 0.5*gy200100 )  ) - ( 0.5*gy020100 )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 2] +=  ( cnst23- ( C3902*C250 )  ) + (  ( - ( 0.5*gy200001 )  ) - ( 0.5*gy020001 )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 1] +=  (  ( - ( 0.5*gy200010 )  ) - ( 0.5*gy020010 )  ) + ( C4050- ( C3899*C250 )  ) ;
}
