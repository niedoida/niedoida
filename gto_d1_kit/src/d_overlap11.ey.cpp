/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d1_kit/gto_d1.hpp"
#include <cmath>

namespace {
    static const double Pi = M_PI;
}

void overlap_gradient_23(
double ae , 
double be , 
double cc , 
double xAB , 
double yAB , 
double zAB , 
double* const gx , 
double* const gy , 
double* const gz , 
std::size_t matrix_size , 
std::size_t Ai , 
std::size_t Bi ) 
{
    double cnst0 = std::sqrt(22.5);
    double C9047 = ae*zAB;
    double C9032 = yAB*ae;
    double cnst1 = std::sqrt(3.75);
    double cnst2 = ae*2;
    double cnst4 = std::sqrt( ( 2.25/8.0 ) );
    double cnst6 = std::sqrt( ( 15./8.0 ) );
    double cnst8 = std::sqrt( ( 3.75/8.0 ) );
    double cnst10 = std::sqrt( ( 135./8.0 ) );
    double cnst12 = std::sqrt( ( 33.75/8.0 ) );
    double cnst14 = std::sqrt( ( 1.25/8.0 ) );
    double cnst15 = std::sqrt(1.875);
    double cnst16 = std::sqrt(5.625);
    double C8996 = xAB*ae;
    double cnst18 = std::sqrt( ( 0.75/8.0 ) );
    double cnst19 = std::sqrt(0.75);
    double cnst21 = std::sqrt( ( 45.0/8.0 ) );
    double cnst23 = std::sqrt( ( 5.0/8.0 ) );
    double cnst24 = std::sqrt(4.5);
    double cnst26 = std::sqrt( ( 9./8.0 ) );
    double cnst27 = std::sqrt(3.0);
    double cnst29 = std::sqrt( ( 3.0/8.0 ) );
    double cnst30 = std::sqrt(6.75);
    double cnst31 = std::sqrt(7.5);
    double cnst32 = std::sqrt(6.0);
    double cnst33 = std::sqrt(1.6875);
    double cnst34 = std::sqrt(15.0);
    double cnst36 = std::sqrt( ( 45./8.0 ) );
    double cnst38 = cc* ( std::sqrt(45.) ) ;
    double C9078 = be*yAB;
    double C9140 = be*zAB;
    double C8995 = xAB*be;
    double C8993 = be+ae;
    double C9375 = std::sqrt( ( Pi/C8993 ) );
    double C9309 = C9375*C9078;
    double C9370 = C9309/C8993;
    double C8989 = -C9370;
    double C9031 = C8989*ae;
    double C9091 = 2*C9031;
    double C9363 = C9032*C9375;
    double C9380 = C9363/C8993;
    double C9358 = C8996*C9375;
    double C9378 = C9358/C8993;
    double C9354 = C8995*C9375;
    double C9359 = C9354/C8993;
    double C8980 = -C9359;
    double C8991 = C8980*ae;
    double C8998 = C8991*2;
    double C9365 = C9375*C9047;
    double C9382 = C9365/C8993;
    double C9328 = C9140*C9375;
    double C9374 = C9328/C8993;
    double C8990 = -C9374;
    double C9046 = C8990*ae;
    double C9150 = C9046*2;
    double C9000 = 2.*C8993;
    double C9082 =  (  ( C9375*ae ) *2. ) /C9000;
    double C9083 = C9082+ (  (  ( C8991*C8996 ) *2 ) /C8993 ) ;
    double C9054 =  (  (  ( C9047*C9046 ) *2 ) /C8993 ) +C9082;
    double C9504 =  (  ( C9054*C9047 ) /C8993 ) + (  ( C9150+ (  ( C9382*ae ) *2 )  ) /C9000 ) ;
    double C9039 =  (  (  ( C9032*C9031 ) *2 ) /C8993 ) +C9082;
    double C9503 =  (  ( C9032*C9039 ) /C8993 ) + (  ( C9091+ (  ( C9380*ae ) *2 )  ) /C9000 ) ;
    double C9376 = C9375/C9000;
    double C9165 =  ( - (  ( be*C9375 ) *2 )  ) /C9000;
    double C9437 = C9165- (  (  ( C9140*C9046 ) *2 ) /C8993 ) ;
    double C9498 =  (  ( C9150- (  ( be*C8990 ) *2 )  ) /C9000 ) - (  ( C9140*C9437 ) /C8993 ) ;
    double C9012 = C9165- (  (  ( C8991*C8995 ) *2 ) /C8993 ) ;
    double C9021 =  (  ( C8996*C9012 ) /C8993 ) + (  ( C8991*4. ) /C9000 ) ;
    double C9414 = C9021*2;
    double C9107 = C9165- (  (  ( C9078*C9031 ) *2 ) /C8993 ) ;
    double C9116 =  (  ( 4.*C9031 ) /C9000 ) + (  ( C9032*C9107 ) /C8993 ) ;
    double C9432 = C9116*2;
    double C9114 =  (  ( C9091- (  ( C8989*be ) *2 )  ) /C9000 ) - (  ( C9107*C9078 ) /C8993 ) ;
    double C9175 =  (  ( C9046*4. ) /C9000 ) + (  ( C9047*C9437 ) /C8993 ) ;
    double C9439 = 2*C9175;
    double C9505 =  (  (  (  ( C9378*ae ) *2 ) +C8998 ) /C9000 ) + (  ( C8996*C9083 ) /C8993 ) ;
    double C9019 =  (  ( C8998- (  ( C8980*be ) *2 )  ) /C9000 ) - (  ( C8995*C9012 ) /C8993 ) ;
    double C9269 = std::pow(C8993 , 2);
    double C8984 = C9376- (  ( C9354*C8996 ) /C9269 ) ;
    double C9502 =  (  (  ( C9083+C9012 ) + (  ( C8984*ae ) *2 )  ) /C9000 ) + (  ( C8996*C9021 ) /C8993 ) ;
    double gx101210 = C8990* ( C9380*C9502 ) ;
    double gx110201 =  ( C8989*C9502 ) *C9382;
    double C9406 =  (  ( C9378-C9359 ) /C9000 ) + (  ( C8984*C8996 ) /C8993 ) ;
    double gz110201 =  ( C8989*C9406 ) *C9054;
    double C9534 =  (  ( C8996*C9502 ) /C8993 ) + (  (  (  ( C9406*ae ) *2 ) + ( C9505+C9414 )  ) /C9000 ) ;
    double gx101300 = C8990* ( C9375*C9534 ) ;
    double gx110300 =  ( C8989*C9534 ) *C9375;
    double gy110210 = C9375* ( C9116*C9406 ) ;
    double gy110201 =  ( C9406*C9107 ) *C9382;
    double gy101210 =  ( C9039*C9406 ) *C8990;
    double gz101201 =  ( C9375*C9406 ) *C9175;
    double gz101210 =  ( C9406*C9380 ) *C9437;
    double C9356 = C8984*2;
    gz[(Ai + 3) * matrix_size + Bi + 1] += cnst38* (  ( C8984*C9380 ) *C9175 ) ;
    double gy101120 = C8990* ( C8984*C9503 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 1] +=  (  ( C9116*C8984 ) *C9382 ) *cnst38;
    double C9074 = C9376+ (  (  ( std::pow(C9078 , 2) ) *C9375 ) /C9269 ) ;
    double C9119 =  (  (  ( C9107*2 ) + (  ( ae*C9074 ) *2 )  ) /C9000 ) + (  ( C9032*C9114 ) /C8993 ) ;
    double gy020111 = C9382* ( C9378*C9119 ) ;
    double gx020201 =  ( C9505*C9074 ) *C9382;
    double gz020102 =  ( C9378*C9074 ) *C9504;
    double C9139 = C9376+ (  ( C9375* ( std::pow(C9140 , 2) )  ) /C9269 ) ;
    double gy002120 =  ( C9378*C9503 ) *C9139;
    double gx002210 = C9139* ( C9505*C9380 ) ;
    double C9178 =  (  ( C9047*C9498 ) /C8993 ) + (  (  (  ( C9139*ae ) *2 ) + ( C9437*2 )  ) /C9000 ) ;
    double C9399 = C9376+ (  (  ( std::pow(C9032 , 2) ) *C9375 ) /C9269 ) ;
    double gz101021 = C9175* ( C8980*C9399 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 5] += cc* (  ( cnst0*gz101201 ) - ( gz101021*cnst0 )  ) ;
    double gx101120 =  ( C9399*C9021 ) *C8990;
    gx[(Ai + 3) * matrix_size + Bi + 6] += cc* (  ( cnst10*gx101120 ) + ( cnst6*gx101300 )  ) ;
    double gz002021 = C9178* ( C9399*C9375 ) ;
    double gx200021 =  ( C9399*C9019 ) *C9382;
    double gz101120 =  ( C8984*C9399 ) *C9437;
    double gz002120 =  ( C9378*C9399 ) *C9498;
    double C9528 =  (  (  ( C9039*2 ) + (  ( C9399*ae ) *2 )  ) /C9000 ) + (  ( C9032*C9503 ) /C8993 ) ;
    double gy002030 = C9139* ( C9528*C9375 ) ;
    double gy101030 = C8990* ( C8980*C9528 ) ;
    gy[(Ai + 3) * matrix_size + Bi + 0] += cc* (  ( gy101210*cnst10 ) - ( gy101030*cnst6 )  ) ;
    double gx002120 = C9139* ( C9399*C9083 ) ;
    double C9317 = C9376- (  ( C9032*C9309 ) /C9269 ) ;
    double gz110210 = C9150* ( C9406*C9317 ) ;
    double C9407 =  (  ( C9380-C9370 ) /C9000 ) + (  ( C9032*C9317 ) /C8993 ) ;
    double gx110021 = C9382* ( C9407*C9012 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 5] += cc* (  ( cnst0*gx110201 ) - ( gx110021*cnst0 )  ) ;
    double gz011120 =  ( C9378*C9407 ) *C9437;
    double gz011021 =  ( C9375*C9407 ) *C9175;
    double gz110021 = C9054* ( C8980*C9407 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 5] += cc* (  ( gz110201*cnst0 ) - ( gz110021*cnst0 )  ) ;
    double gx110120 = C9375* ( C9021*C9407 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 6] += cc* (  ( cnst10*gx110120 ) + ( cnst6*gx110300 )  ) ;
    double gz110120 = C9150* ( C8984*C9407 ) ;
    double gx011120 =  ( C9083*C9407 ) *C8990;
    double C9507 =  (  (  ( C9039+C9107 ) + (  ( ae*C9317 ) *2 )  ) /C9000 ) + (  ( C9116*C9032 ) /C8993 ) ;
    double gy110021 =  ( C8980*C9507 ) *C9382;
    gy[(Ai + 0) * matrix_size + Bi + 5] +=  (  ( cnst0*gy110201 ) - ( cnst0*gy110021 )  ) *cc;
    double gy110120 = C9375* ( C8984*C9507 ) ;
    double gy011120 =  ( C9378*C9507 ) *C8990;
    double C9535 =  (  ( C9032*C9507 ) /C8993 ) + (  (  ( C9432+C9503 ) + (  ( C9407*ae ) *2 )  ) /C9000 ) ;
    double gy011030 =  ( C9535*C9375 ) *C8990;
    double gy110030 =  ( C8980*C9535 ) *C9375;
    gy[(Ai + 0) * matrix_size + Bi + 0] += cc* (  ( cnst10*gy110210 ) - ( cnst6*gy110030 )  ) ;
    gz[(Ai + 1) * matrix_size + Bi + 1] += cnst38* (  ( C9378*C9317 ) *C9175 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 1] +=  (  ( C8984*C9317 ) *C9054 ) *cnst38;
    double C9368 = C9317*2;
    double C9200 =  (  ( C9032*C9407 ) /C8993 ) + (  ( C9368+C9399 ) /C9000 ) ;
    double gx110030 =  ( C9200*C9012 ) *C9375;
    double gz110030 = C8990* ( C8998*C9200 ) ;
    double cnst254 = cnst6*gz110030;
    gz[(Ai + 0) * matrix_size + Bi + 0] += cc* (  ( gz110210*cnst10 ) -cnst254 ) ;
    double cnst256 = gz110030*cnst26;
    double gz011030 =  ( C9375*C9200 ) *C9437;
    double gx110210 = C9375* ( C9502*C9317 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 0] += cc* (  ( cnst10*gx110210 ) - ( cnst6*gx110030 )  ) ;
    double gx011210 =  ( C9505*C9317 ) *C8990;
    gx[(Ai + 1) * matrix_size + Bi + 0] += cc* (  ( gx011210*cnst10 ) -cnst254 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 1] +=  (  ( C9021*C9317 ) *C9382 ) *cnst38;
    double C8982 = C9376+ (  ( C9375* ( std::pow(C8995 , 2) )  ) /C9269 ) ;
    double gy200030 = C9375* ( C8982*C9528 ) ;
    double C9024 =  (  (  ( C9012*2 ) + (  ( C8982*ae ) *2 )  ) /C9000 ) + (  ( C8996*C9019 ) /C8993 ) ;
    double gx200111 =  ( C9024*C9380 ) *C9382;
    double gx200120 = C9375* ( C9024*C9399 ) ;
    double gz200012 =  ( C8982*C9380 ) *C9504;
    double gy200021 =  ( C8982*C9503 ) *C9382;
    double gz200021 =  ( C8982*C9399 ) *C9054;
    double C9355 = C9269*2.;
    double C9339 =  (  ( - ( C9328*2. )  ) /C9355 ) + (  ( C9139*C9047 ) /C8993 ) ;
    double gx002201 =  ( C9505*C9375 ) *C9339;
    double gx002021 = C9339* ( C9399*C8998 ) ;
    double gy002021 =  ( C9375*C9503 ) *C9339;
    double C9508 =  (  ( C9178*C9047 ) /C8993 ) + (  (  ( C9498+C9439 ) + (  ( ae*C9339 ) *2 )  ) /C9000 ) ;
    double C9028 =  (  ( C9363*2. ) /C9355 ) + (  ( C9032*C9399 ) /C8993 ) ;
    double gz101030 =  ( C9028*C8980 ) *C9437;
    gz[(Ai + 3) * matrix_size + Bi + 0] += cc* (  ( cnst10*gz101210 ) - ( cnst6*gz101030 )  ) ;
    double gz200030 = C9150* ( C9028*C8982 ) ;
    double gx200030 =  ( C9028*C9019 ) *C9375;
    double gx101030 = C8990* ( C9028*C9012 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 0] += cc* (  ( cnst10*gx101210 ) - ( cnst6*gx101030 )  ) ;
    double gx002030 =  ( C9028*C8998 ) *C9139;
    double gz002030 =  ( C9028*C9375 ) *C9498;
    double C8983 =  (  ( C8982*C8996 ) /C8993 ) + (  ( - ( C9354*2. )  ) /C9355 ) ;
    double C9501 =  (  (  (  ( ae*C8983 ) *2 ) + ( C9019+C9414 )  ) /C9000 ) + (  ( C9024*C8996 ) /C8993 ) ;
    double gx200201 = C9382* ( C9375*C9501 ) ;
    double gx200210 =  ( C9380*C9501 ) *C9375;
    double gy200111 = C9382* ( C9039*C8983 ) ;
    double cnst358 =  (  ( C9339* ( C9039*C9378 )  ) *cnst34 ) - (  ( gy200111*cnst1 ) + ( cnst1*gy020111 )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 1] += cc*cnst358;
    double gz200111 =  ( C9380*C8983 ) *C9054;
    double gz200102 =  ( C9375*C8983 ) *C9504;
    double gz200120 = C9150* ( C9399*C8983 ) ;
    double C8985 =  (  ( C9356+C8982 ) /C9000 ) + (  ( C8996*C8983 ) /C8993 ) ;
    double gy200201 =  ( C8985*C9091 ) *C9382;
    double gz200201 = C9054* ( C8985*C9375 ) ;
    double gy200210 =  ( C9039*C8985 ) *C9375;
    double cnst392 =  (  ( C8996*C9501 ) /C8993 ) + (  (  (  ( C9502*2 ) + ( C9024*2 )  ) + ( C8985*cnst2 )  ) /C9000 ) ;
    double gx200300 = cnst392* ( std::pow(C9375 , 2) ) ;
    double gz200210 = C9150* ( C8985*C9380 ) ;
    double gy200120 = C9375* ( C8983*C9503 ) ;
    double C8988 =  (  ( C8996*C8985 ) /C8993 ) + (  (  ( C9406*2 ) + ( C8983*2 )  ) /C9000 ) ;
    double gz200300 = C9150* ( C8988*C9375 ) ;
    double gy200300 =  ( C8988*C9091 ) *C9375;
    double C9320 =  (  ( - ( 2.*C9309 )  ) /C9355 ) + (  ( C9032*C9074 ) /C8993 ) ;
    double C9506 =  (  ( C9032*C9119 ) /C8993 ) + (  (  (  ( ae*C9320 ) *2 ) + ( C9432+C9114 )  ) /C9000 ) ;
    double gy020120 = C9375* ( C9378*C9506 ) ;
    double gy020021 =  ( C9375*C9506 ) *C9382;
    double gx020210 = C9375* ( C9505*C9320 ) ;
    double gz020012 = C9504* ( C9375*C9320 ) ;
    double gz020111 = C9054* ( C9378*C9320 ) ;
    double cnst455 =  (  ( C9178* ( C9378*C9380 )  ) *cnst34 ) - (  ( gz200111*cnst1 ) + ( gz020111*cnst1 )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 1] += cc*cnst455;
    double C9402 =  (  ( C9032*C9320 ) /C8993 ) + (  ( C9368+C9074 ) /C9000 ) ;
    double cnst459 =  (  (  (  ( C9507*2 ) + ( C9119*2 )  ) + ( C9402*cnst2 )  ) /C9000 ) + (  ( C9032*C9506 ) /C8993 ) ;
    double gy020030 =  ( cnst459*C9375 ) *C9375;
    double gx020021 =  ( C9402*C8998 ) *C9382;
    double cnst470 =  ( cnst16*gx020021 ) + (  (  ( cnst16*gx200201 ) - ( gx200021*cnst16 )  ) - ( cnst16*gx020201 )  ) ;
    gx[(Ai + 4) * matrix_size + Bi + 5] += cc*cnst470;
    double cnst472 =  ( cnst15*gx020021 ) + (  (  ( gx200021*cnst15 ) - ( cnst15*gx200201 )  ) - ( gx020201*cnst15 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 5] += cc* (  (  ( cnst31*gx002201 ) +cnst472 ) - ( gx002021*cnst31 )  ) ;
    double gz020021 = C9054* ( C9402*C9375 ) ;
    double gz020120 = C9150* ( C9378*C9402 ) ;
    double gx020120 =  ( C9402*C9083 ) *C9375;
    double C9087 =  (  (  ( C9320*2 ) + ( C9407*2 )  ) /C9000 ) + (  ( C9032*C9402 ) /C8993 ) ;
    double gz020030 = C9150* ( C9375*C9087 ) ;
    double cnst495 =  ( cnst4*gz020030 ) - (  (  ( cnst4*gz200210 ) + ( gz200012*cnst24 )  ) + ( gz200030*cnst4 )  ) ;
    double gx020030 =  ( C8998*C9087 ) *C9375;
    double cnst504 =  (  (  ( gx200210*cnst12 ) - ( cnst8*gx200030 )  ) + ( cnst8*gx020030 )  ) - ( gx020210*cnst12 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 0] += cc*cnst504;
    double gx020111 =  ( C9083*C9320 ) *C9382;
    double cnst510 =  (  ( C9339* ( C9083*C9380 )  ) *cnst34 ) - (  ( gx200111*cnst1 ) + ( gx020111*cnst1 )  ) ;
    gx[(Ai + 2) * matrix_size + Bi + 1] += cnst510*cc;
    double C9336 = C9376- (  ( C9047*C9328 ) /C9269 ) ;
    double gx101201 = C9336* ( C9375*C9502 ) ;
    double gy101021 =  ( C8980*C9503 ) *C9336;
    double gx011021 = C9336* ( C8998*C9407 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 1] += cnst38* ( C9336* ( C9116*C9378 )  ) ;
    double C9372 = C9336*2;
    double C9404 =  (  ( C9372+C9139 ) /C9000 ) + (  ( C9047*C9339 ) /C8993 ) ;
    double gy011021 = C9336* ( C9375*C9507 ) ;
    double gx011201 = C9336* ( C8989*C9505 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 5] += cc* (  ( cnst0*gx011201 ) - ( gx011021*cnst0 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 1] +=  ( C9336* ( C9039*C8984 )  ) *cnst38;
    double gy101201 = C9336* ( C9091*C9406 ) ;
    gy[(Ai + 3) * matrix_size + Bi + 5] += cc* (  ( gy101201*cnst0 ) - ( cnst0*gy101021 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 1] += cnst38* (  ( C9083*C9317 ) *C9336 ) ;
    double gx101021 = C9336* ( C9399*C9012 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 5] +=  (  ( cnst0*gx101201 ) - ( cnst0*gx101021 )  ) *cc;
    double C9408 =  (  ( C9382-C9374 ) /C9000 ) + (  ( C9336*C9047 ) /C8993 ) ;
    double C9146 =  (  ( C9047*C9404 ) /C8993 ) + (  (  ( C9339*2 ) + ( C9408*2 )  ) /C9000 ) ;
    double C9509 =  (  (  ( C9054+C9437 ) + (  ( C9336*ae ) *2 )  ) /C9000 ) + (  ( C9047*C9175 ) /C8993 ) ;
    double C9536 =  (  ( C9047*C9509 ) /C8993 ) + (  (  (  ( C9408*ae ) *2 ) + ( C9504+C9439 )  ) /C9000 ) ;
    double cnst543 =  (  (  (  ( C8980*C9375 ) *C9536 ) *cnst27 ) - ( gz101201*cnst30 )  ) - ( gz101021*cnst30 ) ;
    gz[(Ai + 3) * matrix_size + Bi + 3] += cnst543*cc;
    double cnst549 =  (  (  (  ( C9178*2 ) + ( 2*C9509 )  ) + ( cnst2*C9404 )  ) /C9000 ) + (  ( C9508*C9047 ) /C8993 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 1] +=  ( C9336* ( C9021*C9380 )  ) *cnst38;
    double C9400 = C9376+ (  ( C9375* ( std::pow(C9047 , 2) )  ) /C9269 ) ;
    double gy020102 = C9400* ( C9378*C9114 ) ;
    double gx200102 =  ( C9024*C9375 ) *C9400;
    double gy200012 = C9400* ( C9039*C8982 ) ;
    double cnst556 =  ( cnst4*gy020030 ) - (  ( cnst4*gy200030 ) + (  ( gy200012*cnst24 ) + ( cnst4*gy200210 )  )  ) ;
    double gy200102 = C9400* ( C9091*C8983 ) ;
    double gy020012 = C9400* ( C9119*C9375 ) ;
    double C9529 =  (  ( C9047*C9504 ) /C8993 ) + (  (  (  ( C9400*ae ) *2 ) + ( C9054*2 )  ) /C9000 ) ;
    double gz200003 = C9529* ( C8982*C9375 ) ;
    double gz020003 = C9529* ( C9375*C9074 ) ;
    double cnst564 =  (  (  ( cnst19*gz200003 ) - ( gz200201*cnst33 )  ) - ( cnst33*gz200021 )  ) - ( cnst19*gz020003 ) ;
    double cnst567 =  (  (  (  ( C8989*C8980 ) *C9529 ) *cnst27 ) - ( gz110201*cnst30 )  ) - ( gz110021*cnst30 ) ;
    gz[(Ai + 0) * matrix_size + Bi + 3] += cc*cnst567;
    double gx200012 =  ( C9019*C9380 ) *C9400;
    double cnst571 =  ( cnst4*gx020030 ) - (  (  ( gx200012*cnst24 ) + ( gx200210*cnst4 )  ) + ( cnst4*gx200030 )  ) ;
    double gx020012 = C9400* ( C8998*C9320 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 2] += cc* (  ( gx020012*cnst24 ) + (  ( gx020210*cnst4 ) +cnst571 )  ) ;
    double C9043 =  (  ( C9365*2. ) /C9355 ) + (  ( C9400*C9047 ) /C8993 ) ;
    double cnst579 =  (  (  ( C9043* ( C8980*C9107 )  ) *cnst27 ) - ( gy110201*cnst30 )  ) - ( gy110021*cnst30 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 3] += cc*cnst579;
    double gy020003 =  ( C9375*C9114 ) *C9043;
    double gx020003 = C9043* ( C8998*C9074 ) ;
    double gy200003 =  ( C8982*C9091 ) *C9043;
    double cnst585 =  (  (  ( cnst19*gy200003 ) - ( gy200201*cnst33 )  ) - ( gy200021*cnst33 )  ) - ( cnst19*gy020003 ) ;
    double gx200003 = C9043* ( C9375*C9019 ) ;
    double cnst589 =  (  (  ( cnst19*gx200003 ) - ( cnst33*gx200201 )  ) - ( gx200021*cnst33 )  ) - ( cnst19*gx020003 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 3] += cc* (  (  ( gx020201*cnst33 ) +cnst589 ) + ( cnst33*gx020021 )  ) ;
    double cnst594 =  (  (  (  ( C8989*C9012 ) *C9043 ) *cnst27 ) - ( gx110201*cnst30 )  ) - ( gx110021*cnst30 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 3] += cc*cnst594;
    double gx020102 =  ( C9083*C9074 ) *C9400;
    double C9224 =  (  ( C9372+C9400 ) /C9000 ) + (  ( C9408*C9047 ) /C8993 ) ;
    double cnst598 =  (  ( C8989*C8998 ) *C9224 ) *cnst27;
    gx[(Ai + 1) * matrix_size + Bi + 3] += cc* (  ( cnst598- ( gx011201*cnst30 )  ) - ( gx011021*cnst30 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 3] += cc* (  ( cnst598- ( gy101201*cnst30 )  ) - ( gy101021*cnst30 )  ) ;
    double cnst605 =  (  (  (  ( C9375*C9012 ) *C9224 ) *cnst27 ) - ( gx101201*cnst30 )  ) - ( gx101021*cnst30 ) ;
    gx[(Ai + 3) * matrix_size + Bi + 3] += cc*cnst605;
    double C9401 = C9376+ (  ( C9375* ( std::pow(C8996 , 2) )  ) /C9269 ) ;
    double gy011210 = C8990* ( C9116*C9401 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 0] += cc* (  ( cnst10*gy011210 ) - ( cnst6*gy011030 )  ) ;
    double C9530 =  (  ( C9505*C8996 ) /C8993 ) + (  (  ( C9083*2 ) + (  ( C9401*ae ) *2 )  ) /C9000 ) ;
    double gx011300 = C8990* ( C8989*C9530 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 6] += cc* (  ( gx011300*cnst6 ) + ( cnst10*gx011120 )  ) ;
    double gx020300 = C9375* ( C9530*C9074 ) ;
    double cnst620 =  ( cnst4*gx020300 ) + (  ( cnst24*gx200102 ) - (  ( cnst4*gx200300 ) + ( gx200120*cnst4 )  )  ) ;
    gx[(Ai + 4) * matrix_size + Bi + 4] += cc* (  (  ( gx020120*cnst4 ) +cnst620 ) - ( gx020102*cnst24 )  ) ;
    double cnst625 =  (  (  ( gx200120*cnst12 ) + ( cnst8*gx200300 )  ) - ( cnst8*gx020300 )  ) - ( gx020120*cnst12 ) ;
    gx[(Ai + 4) * matrix_size + Bi + 6] += cc*cnst625;
    double gx002300 =  ( C9375*C9530 ) *C9139;
    double gz011201 =  ( C8989*C9401 ) *C9175;
    gz[(Ai + 1) * matrix_size + Bi + 5] += cc* (  ( gz011201*cnst0 ) - ( gz011021*cnst0 )  ) ;
    double cnst634 =  (  (  (  ( C8989*C9375 ) *C9536 ) *cnst27 ) - ( gz011201*cnst30 )  ) - ( gz011021*cnst30 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 3] += cc*cnst634;
    double gz020201 =  ( C9401*C9074 ) *C9054;
    double cnst638 =  (  (  ( cnst15*gz200021 ) - ( gz200201*cnst15 )  ) - ( gz020201*cnst15 )  ) + ( cnst15*gz020021 ) ;
    double cnst641 =  ( cnst16*gz020021 ) + (  (  ( cnst16*gz200201 ) - ( cnst16*gz200021 )  ) - ( cnst16*gz020201 )  ) ;
    gz[(Ai + 4) * matrix_size + Bi + 5] += cc*cnst641;
    gz[(Ai + 4) * matrix_size + Bi + 3] += cc* (  ( gz020021*cnst33 ) + (  ( gz020201*cnst33 ) +cnst564 )  ) ;
    double gy002201 =  ( C9091*C9401 ) *C9339;
    double gy011201 = C9336* ( C9107*C9401 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 5] += cc* (  ( cnst0*gy011201 ) - ( cnst0*gy011021 )  ) ;
    double cnst653 =  (  (  (  ( C9375*C9107 ) *C9224 ) *cnst27 ) - ( gy011201*cnst30 )  ) - ( gy011021*cnst30 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 3] += cc*cnst653;
    double gz002201 = C9178* ( C9375*C9401 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 5] += cc* (  ( cnst638+ ( gz002201*cnst31 )  ) - ( gz002021*cnst31 )  ) ;
    double gz020210 = C9150* ( C9401*C9320 ) ;
    double cnst661 =  (  ( gz020030*cnst8 ) + (  ( gz200210*cnst12 ) - ( gz200030*cnst8 )  )  ) - ( gz020210*cnst12 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 0] += cc*cnst661;
    gz[(Ai + 4) * matrix_size + Bi + 2] +=  (  (  ( gz020210*cnst4 ) +cnst495 ) + ( gz020012*cnst24 )  ) *cc;
    double gz011210 = C9437* ( C9401*C9317 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 0] += cc* (  ( cnst10*gz011210 ) - ( cnst6*gz011030 )  ) ;
    double gz002210 =  ( C9401*C9380 ) *C9498;
    double gy020201 =  ( C9401*C9114 ) *C9382;
    gy[(Ai + 4) * matrix_size + Bi + 3] += cc* (  ( cnst585+ ( cnst33*gy020201 )  ) + ( gy020021*cnst33 )  ) ;
    double cnst678 =  (  (  ( cnst16*gy200201 ) - ( gy200021*cnst16 )  ) - ( cnst16*gy020201 )  ) + ( cnst16*gy020021 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 5] += cc*cnst678;
    double cnst682 =  (  (  ( gy200021*cnst15 ) - ( gy200201*cnst15 )  ) - ( cnst15*gy020201 )  ) + ( gy020021*cnst15 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 5] += cc* (  ( cnst682+ ( gy002201*cnst31 )  ) - ( gy002021*cnst31 )  ) ;
    double C9075 =  (  ( C9358*2. ) /C9355 ) + (  ( C8996*C9401 ) /C8993 ) ;
    double gy002300 = C9139* ( C9091*C9075 ) ;
    double gz011300 = C9437* ( C8989*C9075 ) ;
    gz[(Ai + 1) * matrix_size + Bi + 6] += cc* (  ( cnst6*gz011300 ) + ( cnst10*gz011120 )  ) ;
    double gz002300 =  ( C9375*C9075 ) *C9498;
    double gy020300 = C9375* ( C9114*C9075 ) ;
    double cnst701 =  (  ( gy200102*cnst24 ) - (  ( cnst4*gy200120 ) + ( gy200300*cnst4 )  )  ) + ( cnst4*gy020300 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 4] +=  (  (  ( cnst4*gy020120 ) +cnst701 ) - ( cnst24*gy020102 )  ) *cc;
    double cnst706 =  (  (  ( gy200300*cnst8 ) + ( gy200120*cnst12 )  ) - ( gy020300*cnst8 )  ) - ( cnst12*gy020120 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 6] += cc*cnst706;
    double gz020300 = C9150* ( C9074*C9075 ) ;
    double cnst711 =  (  (  ( gz200120*cnst12 ) + ( gz200300*cnst8 )  ) - ( gz020300*cnst8 )  ) - ( gz020120*cnst12 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 6] += cc*cnst711;
    double cnst715 =  (  ( cnst24*gz200102 ) - (  ( gz200300*cnst4 ) + ( gz200120*cnst4 )  )  ) + ( gz020300*cnst4 ) ;
    gz[(Ai + 4) * matrix_size + Bi + 4] += cc* (  (  ( gz020120*cnst4 ) +cnst715 ) - ( gz020102*cnst24 )  ) ;
    double gy011300 =  ( C9107*C9075 ) *C8990;
    gy[(Ai + 1) * matrix_size + Bi + 6] += cc* (  ( cnst6*gy011300 ) + ( cnst10*gy011120 )  ) ;
    double C9197 =  (  ( C8996*C9406 ) /C8993 ) + (  ( C9356+C9401 ) /C9000 ) ;
    double gz101300 =  ( C9197*C9375 ) *C9437;
    gz[(Ai + 3) * matrix_size + Bi + 6] += cc* (  ( cnst6*gz101300 ) + ( cnst10*gz101120 )  ) ;
    double gz110300 =  ( C9197*C9091 ) *C8990;
    double cnst731 = gz110300*cnst6;
    gz[(Ai + 0) * matrix_size + Bi + 6] += cc* (  ( cnst10*gz110120 ) +cnst731 ) ;
    gy[(Ai + 3) * matrix_size + Bi + 6] += cc* (  ( cnst10*gy101120 ) +cnst731 ) ;
    double cnst734 = gz110300*cnst26;
    double gy110300 = C9375* ( C9197*C9107 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 6] += cc* (  ( cnst10*gy110120 ) + ( cnst6*gy110300 )  ) ;
    double gy002210 =  ( C9039*C9401 ) *C9139;
    double gy020210 =  ( C9119*C9401 ) *C9375;
    double cnst747 =  (  ( cnst8*gy020030 ) + (  ( cnst12*gy200210 ) - ( gy200030*cnst8 )  )  ) - ( cnst12*gy020210 ) ;
    gy[(Ai + 4) * matrix_size + Bi + 0] += cc*cnst747;
    gy[(Ai + 4) * matrix_size + Bi + 2] += cc* (  ( gy020012*cnst24 ) + (  ( cnst4*gy020210 ) +cnst556 )  ) ;
    double cnst762 =  (  ( gz200021*0.75 ) + (  ( gz200201*0.75 ) + ( - ( 0.5*gz200003 )  )  )  ) - ( 0.5*gz020003 ) ;
    double cnst765 =  (  ( C9375*C9375 ) *cnst549 ) + (  ( gz020021*0.75 ) + ( cnst762+ ( gz020201*0.75 )  )  ) ;
    double cnst767 =  (  ( gx200021*0.75 ) + (  ( gx200201*0.75 ) + ( - ( 0.5*gx200003 )  )  )  ) - ( 0.5*gx020003 ) ;
    double cnst770 =  (  (  ( gx020201*0.75 ) +cnst767 ) + ( gx020021*0.75 )  ) + (  ( C9375*C8998 ) *C9146 ) ;
    double cnst775 =  (  ( gy200021*0.75 ) + (  ( - ( 0.5*gy200003 )  ) + ( gy200201*0.75 )  )  ) - ( 0.5*gy020003 ) ;
    double cnst778 =  (  (  ( gy020201*0.75 ) +cnst775 ) + ( gy020021*0.75 )  ) + (  ( C9375*C9091 ) *C9146 ) ;
    double cnst779 = std::sqrt(18.);
    double cnst782 =  ( cnst26*gz101030 ) + (  ( gz101210*cnst26 ) + (  (  ( C8980*C9380 ) *C9509 ) *cnst779 )  ) ;
    gz[(Ai + 3) * matrix_size + Bi + 2] += - ( cc*cnst782 ) ;
    double cnst785 =  (  ( C9400* ( C8984*C9107 )  ) *cnst779 ) - (  ( cnst26*gy110300 ) + ( cnst26*gy110120 )  ) ;
    gy[(Ai + 0) * matrix_size + Bi + 4] += cnst785*cc;
    double cnst787 =  ( cnst779* ( C9400* ( C8989*C9021 )  )  ) - (  ( cnst26*gx110300 ) + ( gx110120*cnst26 )  ) ;
    gx[(Ai + 0) * matrix_size + Bi + 4] += cc*cnst787;
    double cnst790 =  (  (  (  ( C9116*C8980 ) *C9400 ) *cnst779 ) + ( cnst26*gy110210 )  ) + ( gy110030*cnst26 ) ;
    gy[(Ai + 0) * matrix_size + Bi + 2] += - ( cc*cnst790 ) ;
    double cnst795 = cc* (  (  (  ( C9408* ( C8998*C9317 )  ) *cnst779 ) + ( gx011210*cnst26 )  ) +cnst256 ) ;
    gx[(Ai + 1) * matrix_size + Bi + 2] += -cnst795;
    double cnst799 =  (  (  ( gz110210*cnst26 ) + (  ( C9504* ( C8980*C9317 )  ) *cnst779 )  ) +cnst256 ) *cc;
    gz[(Ai + 0) * matrix_size + Bi + 2] += -cnst799;
    double cnst802 =  ( cnst26*gz011030 ) + (  ( gz011210*cnst26 ) + ( cnst779* (  ( C9375*C9317 ) *C9509 )  )  ) ;
    gz[(Ai + 1) * matrix_size + Bi + 2] += - ( cc*cnst802 ) ;
    double cnst806 =  ( gx101030*cnst26 ) + (  ( gx101210*cnst26 ) + (  ( C9408* ( C9380*C9012 )  ) *cnst779 )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 2] += - ( cc*cnst806 ) ;
    double cnst810 =  ( gy101030*cnst26 ) + (  ( cnst779* ( C9408* ( C9039*C8980 )  )  ) + ( gy101210*cnst26 )  ) ;
    gy[(Ai + 3) * matrix_size + Bi + 2] += - ( cc*cnst810 ) ;
    double cnst813 =  ( cnst779* ( C9408* ( C9378*C9107 )  )  ) - (  ( gy011300*cnst26 ) + ( gy011120*cnst26 )  ) ;
    gy[(Ai + 1) * matrix_size + Bi + 4] += cc*cnst813;
    double cnst816 =  (  ( gx110210*cnst26 ) + (  (  ( C9012*C9317 ) *C9400 ) *cnst779 )  ) + ( cnst26*gx110030 ) ;
    gx[(Ai + 0) * matrix_size + Bi + 2] += - ( cc*cnst816 ) ;
    double cnst819 =  ( cnst779* (  ( C8989*C9083 ) *C9408 )  ) - (  ( gx011300*cnst26 ) + ( cnst26*gx011120 )  ) ;
    gx[(Ai + 1) * matrix_size + Bi + 4] += cc*cnst819;
    double cnst821 =  ( cnst779* (  ( C9021*C9375 ) *C9408 )  ) - (  ( cnst26*gx101300 ) + ( cnst26*gx101120 )  ) ;
    gx[(Ai + 3) * matrix_size + Bi + 4] += cc*cnst821;
    gy[(Ai + 3) * matrix_size + Bi + 4] += cc* (  ( cnst779* ( C9408* ( C8984*C9091 )  )  ) - ( cnst734+ ( gy101120*cnst26 )  )  ) ;
    gz[(Ai + 0) * matrix_size + Bi + 4] += cc* (  (  (  ( C8989*C8984 ) *C9504 ) *cnst779 ) - (  ( gz110120*cnst26 ) +cnst734 )  ) ;
    double cnst828 =  (  ( gy011210*cnst26 ) + ( cnst779* ( C9408* ( C9116*C9375 )  )  )  ) + ( gy011030*cnst26 ) ;
    gy[(Ai + 1) * matrix_size + Bi + 2] += - ( cc*cnst828 ) ;
    double cnst831 =  ( cnst779* (  ( C8984*C9375 ) *C9509 )  ) - (  ( gz101300*cnst26 ) + ( gz101120*cnst26 )  ) ;
    gz[(Ai + 3) * matrix_size + Bi + 4] += cc*cnst831;
    double cnst833 =  (  (  ( C9378*C8989 ) *C9509 ) *cnst779 ) - (  ( cnst26*gz011120 ) + ( cnst26*gz011300 )  ) ;
    gz[(Ai + 1) * matrix_size + Bi + 4] += cnst833*cc;
    double cnst835 = std::sqrt(1.5);
    double cnst838 =  ( cnst18*gx020030 ) + (  (  ( cnst18*gx200030 ) + ( gx200210*cnst18 )  ) + ( gx200012*cnst835 )  ) ;
    double cnst843 =  (  (  ( cnst18*gy200120 ) + ( gy200300*cnst18 )  ) - ( gy200102*cnst835 )  ) + ( cnst18*gy020300 ) ;
    double cnst847 =  ( gz020300*cnst18 ) + (  (  ( gz200300*cnst18 ) + ( gz200120*cnst18 )  ) - ( cnst835*gz200102 )  ) ;
    double cnst851 =  (  ( cnst835*gy200012 ) + (  ( cnst18*gy200030 ) + ( cnst18*gy200210 )  )  ) + ( cnst18*gy020030 ) ;
    double cnst855 =  (  (  ( gx200120*cnst18 ) + ( cnst18*gx200300 )  ) - ( cnst835*gx200102 )  ) + ( cnst18*gx020300 ) ;
    double cnst858 =  (  (  ( gx020120*cnst18 ) +cnst855 ) - ( gx020102*cnst835 )  ) - ( cnst29*gx002300 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 4] += cc* (  ( cnst858- ( gx002120*cnst29 )  ) + (  (  ( C9375*C9083 ) *C9404 ) *cnst32 )  ) ;
    double cnst863 =  (  ( cnst835*gy020012 ) + (  ( cnst18*gy020210 ) +cnst851 )  ) - ( cnst29*gy002030 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 2] += cc* (  ( cnst863- ( gy002210*cnst29 )  ) - ( cnst32* ( C9404* ( C9039*C9375 )  )  )  ) ;
    double cnst869 =  (  (  ( cnst18*gz200210 ) + ( gz200030*cnst18 )  ) + ( gz200012*cnst835 )  ) + ( cnst18*gz020030 ) ;
    double cnst872 =  (  ( gz020012*cnst835 ) + (  ( gz020210*cnst18 ) +cnst869 )  ) - ( gz002030*cnst29 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 2] += cc* (  ( cnst872- ( gz002210*cnst29 )  ) - (  (  ( C9375*C9380 ) *C9508 ) *cnst32 )  ) ;
    double cnst877 =  (  (  ( gx020210*cnst18 ) +cnst838 ) + ( gx020012*cnst835 )  ) - ( cnst29*gx002030 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 2] += cc* (  ( cnst877- ( gx002210*cnst29 )  ) - ( cnst32* (  ( C8998*C9380 ) *C9404 )  )  ) ;
    double cnst882 =  (  (  ( cnst18*gy020120 ) +cnst843 ) - ( cnst835*gy020102 )  ) - ( cnst29*gy002300 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 4] += cc* (  (  ( C9404* ( C9378*C9091 )  ) *cnst32 ) + ( cnst882- ( gy002120*cnst29 )  )  ) ;
    double cnst887 =  (  ( cnst847+ ( gz020120*cnst18 )  ) - ( gz020102*cnst835 )  ) - ( gz002300*cnst29 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 4] += cc* (  ( cnst887- ( gz002120*cnst29 )  ) + ( cnst32* ( C9508* ( C9378*C9375 )  )  )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 3] += cc* (  ( cnst765- ( gz002201*1.5 )  ) - ( gz002021*1.5 )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 3] +=  (  ( cnst778- ( gy002201*1.5 )  ) - ( gy002021*1.5 )  ) *cc;
    gx[(Ai + 2) * matrix_size + Bi + 3] += cc* (  ( cnst770- ( 1.5*gx002201 )  ) - ( gx002021*1.5 )  ) ;
    double cnst902 = std::sqrt( ( 11.25/8.0 ) );
    double cnst917 =  ( cnst14*gz200300 ) + (  (  ( gz020120*cnst902 ) + ( cnst14*gz020300 )  ) + ( gz200120*cnst902 )  ) ;
    gz[(Ai + 2) * matrix_size + Bi + 6] += cc* (  ( cnst21*gz002120 ) + (  ( cnst23*gz002300 ) -cnst917 )  ) ;
    double cnst923 =  (  ( cnst14*gz020030 ) + (  ( gz200030*cnst14 ) - ( cnst902*gz200210 )  )  ) - ( gz020210*cnst902 ) ;
    gz[(Ai + 2) * matrix_size + Bi + 0] += cc* (  ( cnst923- ( gz002030*cnst23 )  ) + ( gz002210*cnst36 )  ) ;
    double cnst927 =  (  (  ( cnst14*gx200030 ) - ( gx200210*cnst902 )  ) + ( cnst14*gx020030 )  ) - ( cnst902*gx020210 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 0] += cc* (  ( cnst927- ( cnst23*gx002030 )  ) + ( gx002210*cnst36 )  ) ;
    double cnst932 =  (  ( gx200120*cnst902 ) + (  ( cnst14*gx020300 ) + ( cnst902*gx020120 )  )  ) + ( cnst14*gx200300 ) ;
    gx[(Ai + 2) * matrix_size + Bi + 6] += cc* (  (  ( cnst23*gx002300 ) -cnst932 ) + ( gx002120*cnst21 )  ) ;
    double cnst936 =  (  ( cnst14*gy020030 ) + (  ( cnst14*gy200030 ) - ( cnst902*gy200210 )  )  ) - ( cnst902*gy020210 ) ;
    gy[(Ai + 2) * matrix_size + Bi + 0] += cc* (  ( gy002210*cnst36 ) + ( cnst936- ( cnst23*gy002030 )  )  ) ;
    double cnst942 =  ( cnst14*gy200300 ) + (  ( cnst902*gy200120 ) + (  ( cnst14*gy020300 ) + ( cnst902*gy020120 )  )  ) ;
    gy[(Ai + 2) * matrix_size + Bi + 6] += cc* (  (  ( cnst23*gy002300 ) -cnst942 ) + ( cnst21*gy002120 )  ) ;
    double cnst945 = std::sqrt(11.25);
    gy[(Ai + 4) * matrix_size + Bi + 1] += cc* (  ( cnst945*gy200111 ) - ( cnst945*gy020111 )  ) ;
    gz[(Ai + 4) * matrix_size + Bi + 1] += cc* (  ( gz200111*cnst945 ) - ( gz020111*cnst945 )  ) ;
    gx[(Ai + 4) * matrix_size + Bi + 1] += cc* (  ( gx200111*cnst945 ) - ( cnst945*gx020111 )  ) ;
}
